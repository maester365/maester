{
  "Result": "Failed",
  "FailedCount": 139,
  "PassedCount": 120,
  "SkippedCount": 18,
  "TotalCount": 284,
  "ExecutedAt": "2025-04-30T08:29:07.071475+10:00",
  "TotalDuration": "00:05:01",
  "UserDuration": "00:04:48",
  "DiscoveryDuration": "00:00:10",
  "FrameworkDuration": "00:00:02",
  "TenantId": "0817c655-a853-4d8f-9723-3a333b5b9235",
  "TenantName": "Entra.Chat",
  "Account": "merill@elapora.com",
  "CurrentVersion": "0.1.0",
  "LatestVersion": "1.0.0",
  "Tests": [
    {
      "Id": "CIS.M365.1.1.1",
      "Title": "(L1) Ensure Administrative accounts are cloud-only",
      "Name": "CIS.M365.1.1.1: (L1) Ensure Administrative accounts are cloud-only",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.1.1.1",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisCloudAdmin\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"admin accounts are cloud-only\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCloudAdmin.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.1.1.1: (L1) Ensure Administrative accounts are cloud-only",
        "TestResult": "\nWell done. Your tenant has no hybrid Global Administrators:\n\n| Display Name | Cloud Only |\n| --- | --- |\n| Ann Quinzon | ✅ Pass |\n| Bob Leaf | ✅ Pass |\n| Damien Bowden | ✅ Pass |\n| Emergency Access | ✅ Pass |\n| Joshua Fernando | ✅ Pass |\n| Merill Fernando | ✅ Pass |\n| Tyler Chan | ✅ Pass |\n",
        "TestDescription": "1.1.1 (L1) Ensure Administrative accounts are cloud-only\n\nAdministrative accounts are special privileged accounts that could have varying levels of access to data, users, and settings. Regular user accounts should never be utilized for administrative tasks and care should be taken, in the case of a hybrid environment, to keep Administrative accounts separated from on-prem accounts. Administrative accounts should not have applications assigned so that they have no access to potentially vulnerable services (EX. email, Teams, SharePoint, etc.) and only access to perform tasks as needed for administrative purposes.\n\n#### Remediation action:\n\nTo created licensed, separate Administrative accounts for Administrative users:\n1. Navigate to Microsoft 365 admin center [https://admin.microsoft.com](https://admin.microsoft.com).\n2. Click to expand **Users** select **Active users**\n3. Click **Add a user**.\n4. Fill out the appropriate fields for Name, user, etc.\n5. When prompted to assign licenses select as needed **Microsoft Entra ID P1** or\n**Microsoft Entra ID P2**, then click **Next**.\n6. Under the **Option settings** screen you may choose from several types of\nAdministrative access roles. Choose **Admin center access** followed by the\nappropriate role then click **Next**.\n7. Select **Finish adding**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v 4.0.0 - Page 18](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.1.1.3",
      "Title": "(L1) Ensure that between two and four global admins are designated",
      "Name": "CIS.M365.1.1.3: (L1) Ensure that between two and four global admins are designated",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.1.1.3",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisGlobalAdminCount\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"only 2-4 Global Administrators exist\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisGlobalAdminCount.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because only 2-4 Global Administrators exist, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because only 2-4 Global Administrators exist, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisGlobalAdminCount.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"only 2-4 Global Administrators exist\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisGlobalAdminCount.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.1.1.3: (L1) Ensure that between two and four global admins are designated",
        "TestResult": "\nYour tenant does not have the appropriate number of Global Administrators.",
        "TestDescription": "1.1.3 (L1) Ensure that between two and four global admins are designated\n\nMore than one global administrator should be designated so a single admin can be monitored and to provide redundancy should a single admin leave an organization. Additionally, there should be no more than four global admins set for any tenant. Ideally global administrators will have no licenses assigned to them.\n\n#### Remediation action:\n\nTo correct the number of global tenant administrators:\n1. Navigate to Microsoft 365 admin center [https://admin.microsoft.com](https://admin.microsoft.com).\n2. Select **Users** > **Active Users**.\n3. In the Search field enter the name of the user to be made a Global Administrator.\n4. To create a new Global Admin:\n 1. Select the user's name.\n 2. A window will appear to the right.\n 3. Select **Manage roles**.\n 4. Select **Admin center access**.\n 5. Check **Global Administrator**.\n 6. Click Save changes.\n\nTo remove Global Admins:\n1. Select **User**.\n2. Under Roles select **Manage roles**.\n3. De-Select the appropriate role.\n4. Click **Save changes**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 26](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.1.2.1",
      "Title": "(L2) Ensure that only organizationally managed/approved public groups exist",
      "Name": "CIS.M365.1.2.1: (L2) Ensure that only organizationally managed/approved public groups exist",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.1.2.1",
        "L2",
        "CIS E3 Level 2",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0",
        "Severity:Medium"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCis365PublicGroup\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"365 groups are private\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCis365PublicGroup.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because 365 groups are private, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because 365 groups are private, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCis365PublicGroup.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"365 groups are private\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCis365PublicGroup.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.1.2.1: (L2) Ensure that only organizationally managed/approved public groups exist",
        "TestResult": "\nYour tenant has 6 public 365 groups:\n\n| Display Name | Group Public |\n| --- | --- |\n| test spo session enforced | ❌ Fail |\n| Watercooler - Public | ❌ Fail |\n| Microsoft 365 Ops Team | ❌ Fail |\n| New group in Graph Explorer! | ❌ Fail |\n| Pora | ❌ Fail |\n| All Company | ❌ Fail |\n",
        "TestDescription": "1.2.1 (L2) Ensure that only organizationally managed/approved public groups exist\n\nMicrosoft 365 Groups is the foundational membership service that drives all teamwork across Microsoft 365. With Microsoft 365 Groups, you can give a group of people access to a collection of shared resources. While there are several different group types this recommendation concerns Microsoft 365 Groups.\n\nEnsure that only organizationally managed and approved public groups exist.\n\n#### Remediation action:\n\nTo enable only organizationally managed/approved public groups exist:\n1. Navigate to Microsoft 365 admin center [https://admin.microsoft.com](https://admin.microsoft.com).\n2. Click to expand **Teams & groups** select **Active teams & groups**.\n3. On the **Active teams and groups** page, select the group's name that is public.\n4. On the popup groups name page, **Select Settings**.\n5. Under Privacy, select **Private**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 33](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.1.3.1",
      "Title": "(L1) Ensure the 'Password expiration policy' is set to 'Set passwords to never expire (recommended)'",
      "Name": "CIS.M365.1.3.1: (L1) Ensure the 'Password expiration policy' is set to 'Set passwords to never expire (recommended)'",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.1.3.1",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisPasswordExpiry\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"passwords are not set to expire\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisPasswordExpiry.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.1.3.1: (L1) Ensure the 'Password expiration policy' is set to 'Set passwords to never expire (recommended)'",
        "TestResult": "\nWell done. Your tenant passwords are not set to expire:\n\n| Display Name | Domain |\n| --- | --- |\n| pora.onmicrosoft.com | ✅ Pass |\n| elapora.com | ✅ Pass |\n| pora.mail.onmicrosoft.com | ✅ Pass |\n",
        "TestDescription": "1.3.1 (L1) Ensure the 'Password expiration policy' is set to 'Set passwords to never expire (recommended)'\n\nOrganizations such as NIST and Microsoft have updated their password policy recommendations to not arbitrarily require users to change their passwords after a specific amount of time, unless there is evidence that the password is compromised, or the user forgot it.\n\n#### Remediation action:\n\nTo set Office 365 passwords are set to never expire:\n1. Navigate to Microsoft 365 admin center [https://admin.microsoft.com](https://admin.microsoft.com).\n2. Click to expand **Settings** select **Org Settings**.\n3. Click on **Security & privacy**.\n4. Check the **Set passwords to never expire (recommended)** box.\n5. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 41](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.1.3.3",
      "Title": "(L2) Ensure 'External sharing' of calendars is not available",
      "Name": "CIS.M365.1.3.3: (L2) Ensure 'External sharing' of calendars is not available",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.1.3.3",
        "L2",
        "CIS E3 Level 2",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisCalendarSharing\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"calendar sharing is disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCalendarSharing.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because calendar sharing is disabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because calendar sharing is disabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCalendarSharing.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"calendar sharing is disabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisCalendarSharing.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.1.3.3: (L2) Ensure 'External sharing' of calendars is not available",
        "TestResult": "\nYour tenant allows uncontrolled calendar sharing.\n\n| Policy Name | Test Result |\n| --- | --- |\n| [Default Sharing Policy](https://admin.exchange.microsoft.com/#/individualsharing/:/individualsharingdetails/9f930793-eb38-4b6b-a78f-eea3b908f21e/managedomain) | ❌ Fail |\n",
        "TestDescription": "1.3.3 (L2) Ensure 'External sharing' of calendars is not available\n\nAttackers often spend time learning about organizations before launching an attack. Publicly available calendars can help attackers understand organizational relationships and determine when specific users may be more vulnerable to an attack, such as when they are traveling.\n\n#### Remediation action:\n\nTo remediate using the UI:\n1. Navigate to Microsoft 365 admin center [https://admin.microsoft.com](https://admin.microsoft.com).\n2. Click to expand **Settings** select **Org settings**.\n3. In the **Services** section click **Calendar**.\n4. Uncheck **Let your users share their calendars with people outside of\nyour organization who have Office 365 or Exchange**.\n5. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 48](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.1.3.6",
      "Title": "(L2) Ensure the customer lockbox feature is enabled",
      "Name": "CIS.M365.1.3.6:(L2) Ensure the customer lockbox feature is enabled",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.1.3.6",
        "L2",
        "CIS E5 Level 2",
        "CIS E5",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisCustomerLockBox\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the customer lockbox feature is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCustomerLockBox.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the customer lockbox feature is enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the customer lockbox feature is enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCustomerLockBox.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"the customer lockbox feature is enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisCustomerLockBox.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.1.3.6:(L2) Ensure the customer lockbox feature is enabled",
        "TestResult": "\nYour tenant does not have the customer lockbox enabled:\n\n| Customer Lockbox |\n| --- |\n| ❌ Fail |\n",
        "TestDescription": "1.3.6 (L2) Ensure the customer lockbox feature is enabled\n\nCustomer Lockbox is a security feature that provides an additional layer of control and transparency to customer data in Microsoft 365. Enabling this feature protects organizational data against data spillage and exfiltration.\n\nTest implementation checks Exchange Online service only.\n\n#### Remediation action:\n\nTo enable the Customer Lockbox feature:\n1. Navigate to Microsoft 365 admin center [https://admin.microsoft.com](https://admin.microsoft.com).\n2. Click to expand **Settings** then select **Org settings**.\n3. Select **Security & privacy** tab.\n4. Click **Customer lockbox**.\n5. Check the box **Require approval for all data access requests**.\n6. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 55](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.1",
      "Title": "(L2) Ensure Safe Links for Office Applications is Enabled (Only Checks Default Policy)",
      "Name": "CIS.M365.2.1.1: (L2) Ensure Safe Links for Office Applications is Enabled (Only Checks Default Policy)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.1",
        "L2",
        "CIS E5 Level 2",
        "CIS E5",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisSafeLink\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the default safe link policy matches CIS recommendations\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisSafeLink.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the default safe link policy matches CIS recommendations, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the default safe link policy matches CIS recommendations, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisSafeLink.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"the default safe link policy matches CIS recommendations\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisSafeLink.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.1: (L2) Ensure Safe Links for Office Applications is Enabled (Only Checks Default Policy)",
        "TestResult": "\nYour tenants default safe link policy does not match CIS recommendations (https://security.microsoft.com/presetSecurityPolicies).\n\n| Check Name | Result |\n| --- | --- |\n| EnableSafeLinksForEmail | ✅ Pass |\n| EnableSafeLinksForTeams | ✅ Pass |\n| EnableSafeLinksForOffice | ✅ Pass |\n| TrackClicks | ✅ Pass |\n| AllowClickThrough | ❌ Fail |\n| ScanUrls | ✅ Pass |\n| EnableForInternalSenders | ❌ Fail |\n| DeliverMessageAfterScan | ✅ Pass |\n| DisableUrlRewrite | ✅ Pass |\n",
        "TestDescription": "2.1.1 (L2) Ensure Safe Links for Office Applications is Enabled\n\nSafe Links for Office applications extends phishing protection to documents and emails that contain hyperlinks, even after they have been delivered to a user.\n\n#### Remediation action:\n\nTo create a Safe Links policy:\n\n1. Navigate to Microsoft 365 admin center [https://admin.microsoft.com](https://admin.microsoft.com).\n2. Under **Email & collaboration** select **Policies & rules**\n3. Select **Threat policies** then **Safe Links**\n4. Click on **+Create**\n5. Name the policy then click **Next**\n6. In Domains select all valid domains for the organization and Next\n7. Ensure the following **URL & click protection settings** are defined:\n\n**Email**\n* Checked **On: Safe Links checks a list of known, malicious links when users click links in email. URLs are rewritten by default**\n* Checked **Apply Safe Links to email messages sent within the organization**\n* Checked **Apply real-time URL scanning for suspicious links and links that point to files**\n* Checked **Wait for URL scanning to complete before delivering the message**\n* Unchecked **Do not rewrite URLs, do checks via Safe Links API only**.\n\n**Teams**\n* Checked **On: Safe Links checks a list of known, malicious links when users click links in Microsoft Teams. URLs are not rewritten**.\n\n**Office 365 Apps**\n* Checked On: **Safe Links checks a list of known, malicious links when users click links in Microsoft Office apps. URLs are not rewritten**\n\n**Click protection settings**\n* Checked: **Track user clicks**\n* Unchecked: **Let users click through the original URL**\n* There is no recommendation for organization branding\n8. Click **Next** twice and finally Submit.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 64](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.11",
      "Title": "(L2) Ensure comprehensive attachment filtering is applied",
      "Name": "CIS.M365.2.1.11: (L2) Ensure comprehensive attachment filtering is applied",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.11",
        "L2",
        "CIS E3 Level 2",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisAttachmentFilterComprehensive\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the default malware filter policy did not have comprehensive attachment filtering applied.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisAttachmentFilterComprehensive.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the default malware filter policy did not have comprehensive attachment filtering applied., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the default malware filter policy did not have comprehensive attachment filtering applied., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisAttachmentFilterComprehensive.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"the default malware filter policy did not have comprehensive attachment filtering applied.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisAttachmentFilterComprehensive.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.11: (L2) Ensure comprehensive attachment filtering is applied",
        "TestResult": "\nYour tenant does not cover all CIS recommended file attachment extensions:\n\n| Extension Name | Result |\n| --- | --- |\n| 7z | ❌ Fail |\n| a3x | ❌ Fail |\n| ade | ❌ Fail |\n| adp | ❌ Fail |\n| appinstaller | ❌ Fail |\n| applescript | ❌ Fail |\n| application | ❌ Fail |\n| appref-ms | ❌ Fail |\n| appxbundle | ❌ Fail |\n| asd | ❌ Fail |\n| asx | ❌ Fail |\n| bas | ❌ Fail |\n| bgi | ❌ Fail |\n| bz2 | ❌ Fail |\n| chm | ❌ Fail |\n| cpl | ❌ Fail |\n| crt | ❌ Fail |\n| cs | ❌ Fail |\n| csh | ❌ Fail |\n| daa | ❌ Fail |\n| dbf | ❌ Fail |\n| dcr | ❌ Fail |\n| desktopthemepackfile | ❌ Fail |\n| diagcab | ❌ Fail |\n| dif | ❌ Fail |\n| dir | ❌ Fail |\n| dmg | ❌ Fail |\n| doc | ❌ Fail |\n| dot | ❌ Fail |\n| dotm | ❌ Fail |\n| eml | ❌ Fail |\n| fxp | ❌ Fail |\n| gadget | ❌ Fail |\n| gz | ❌ Fail |\n| hlp | ❌ Fail |\n| htc | ❌ Fail |\n| htm | ❌ Fail |\n| htm | ❌ Fail |\n| html | ❌ Fail |\n| html | ❌ Fail |\n| hwpx | ❌ Fail |\n| ics | ❌ Fail |\n| inf | ❌ Fail |\n| ins | ❌ Fail |\n| iqy | ❌ Fail |\n| isp | ❌ Fail |\n| js | ❌ Fail |\n| jse | ❌ Fail |\n| ksh | ❌ Fail |\n| library-ms | ❌ Fail |\n| mam | ❌ Fail |\n| mda | ❌ Fail |\n| mdb | ❌ Fail |\n| mde | ❌ Fail |\n| mdt | ❌ Fail |\n| mdw | ❌ Fail |\n| mdz | ❌ Fail |\n| mht | ❌ Fail |\n| mhtml | ❌ Fail |\n| mof | ❌ Fail |\n| msrcincident | ❌ Fail |\n| ocx | ❌ Fail |\n| odt | ❌ Fail |\n| ops | ❌ Fail |\n| oxps | ❌ Fail |\n| pcd | ❌ Fail |\n| plg | ❌ Fail |\n| pot | ❌ Fail |\n| potm | ❌ Fail |\n| ppkg | ❌ Fail |\n| pps | ❌ Fail |\n| ppsm | ❌ Fail |\n| ppt | ❌ Fail |\n| pptm | ❌ Fail |\n| prf | ❌ Fail |\n| prg | ❌ Fail |\n| ps1 | ❌ Fail |\n| ps11 | ❌ Fail |\n| ps11xml | ❌ Fail |\n| ps1xml | ❌ Fail |\n| ps2 | ❌ Fail |\n| ps2xml | ❌ Fail |\n| psc1 | ❌ Fail |\n| psc2 | ❌ Fail |\n| pub | ❌ Fail |\n| py | ❌ Fail |\n| pyc | ❌ Fail |\n| pyo | ❌ Fail |\n| pyw | ❌ Fail |\n| pyz | ❌ Fail |\n| pyzw | ❌ Fail |\n| rar | ❌ Fail |\n| rtf | ❌ Fail |\n| scpt | ❌ Fail |\n| searchConnector-ms | ❌ Fail |\n| service | ❌ Fail |\n| settingcontent-ms | ❌ Fail |\n| sh | ❌ Fail |\n| shb | ❌ Fail |\n| shs | ❌ Fail |\n| shtm | ❌ Fail |\n| shtml | ❌ Fail |\n| sldm | ❌ Fail |\n| slk | ❌ Fail |\n| so | ❌ Fail |\n| spl | ❌ Fail |\n| stm | ❌ Fail |\n| svg | ❌ Fail |\n| swf | ❌ Fail |\n| tar | ❌ Fail |\n| theme | ❌ Fail |\n| themepack | ❌ Fail |\n| timer | ❌ Fail |\n| url | ❌ Fail |\n| uue | ❌ Fail |\n| vhd | ❌ Fail |\n| vhdx | ❌ Fail |\n| wbk | ❌ Fail |\n| website | ❌ Fail |\n| wim | ❌ Fail |\n| wiz | ❌ Fail |\n| ws | ❌ Fail |\n| xla | ❌ Fail |\n| xlam | ❌ Fail |\n| xlc | ❌ Fail |\n| xlm | ❌ Fail |\n| xls | ❌ Fail |\n| xlsb | ❌ Fail |\n| xlsm | ❌ Fail |\n| xlt | ❌ Fail |\n| xltm | ❌ Fail |\n| xlw | ❌ Fail |\n| xml | ❌ Fail |\n| xnk | ❌ Fail |\n| xps | ❌ Fail |\n| xsl | ❌ Fail |\n",
        "TestDescription": "2.1.11 (L2) Ensure comprehensive attachment filtering is applied\n\n**Rationale:**\nBlocking known malicious file types can help prevent malware-infested files from infecting a host or performing other malicious attacks such as phishing and data extraction. Defining a comprehensive list of attachments can help protect against additional unknown and known threats.\n\n#### Remediation action:\n\nTo implement a new policy containing a comprehensive list of extensions:\n1. Connect to Exchange Online using Connect-ExchangeOnline.\n2. Run the following script:\n```\n# Create an attachment policy and associated rule. The rule is\n# intentionally disabled allowing the org to enable it when ready\n$Policy = @{\n    Name = \"CIS L2 Attachment Policy\"\n    EnableFileFilter = $true\n    ZapEnabled = $true\n    EnableInternalSenderAdminNotifications = $true\n    InternalSenderAdminAddress = 'admin@contoso.com' # Change this.\n}\n\n$L2Extensions = @(\n    \"7z\", \"a3x\", \"ace\", \"ade\", \"adp\", \"ani\", \"app\", \"appinstaller\",\n    \"applescript\", \"application\", \"appref-ms\", \"appx\", \"appxbundle\", \"arj\",\n    \"asd\", \"asx\", \"bas\", \"bat\", \"bgi\", \"bz2\", \"cab\", \"chm\", \"cmd\", \"com\",\n    \"cpl\", \"crt\", \"cs\", \"csh\", \"daa\", \"dbf\", \"dcr\", \"deb\",\n    \"desktopthemepackfile\", \"dex\", \"diagcab\", \"dif\", \"dir\", \"dll\", \"dmg\",\n    \"doc\", \"docm\", \"dot\", \"dotm\", \"elf\", \"eml\", \"exe\", \"fxp\", \"gadget\", \"gz\",\n    \"hlp\", \"hta\", \"htc\", \"htm\", \"htm\", \"html\", \"html\", \"hwpx\", \"ics\", \"img\",\n    \"inf\", \"ins\", \"iqy\", \"iso\", \"isp\", \"jar\", \"jnlp\", \"js\", \"jse\", \"kext\",\n    \"ksh\", \"lha\", \"lib\", \"library-ms\", \"lnk\", \"lzh\", \"macho\", \"mam\", \"mda\",\n    \"mdb\", \"mde\", \"mdt\", \"mdw\", \"mdz\", \"mht\", \"mhtml\", \"mof\", \"msc\", \"msi\",\n    \"msix\", \"msp\", \"msrcincident\", \"mst\", \"ocx\", \"odt\", \"ops\", \"oxps\", \"pcd\",\n    \"pif\", \"plg\", \"pot\", \"potm\", \"ppa\", \"ppam\", \"ppkg\", \"pps\", \"ppsm\", \"ppt\",\n    \"pptm\", \"prf\", \"prg\", \"ps1\", \"ps11\", \"ps11xml\", \"ps1xml\", \"ps2\",\n    \"ps2xml\", \"psc1\", \"psc2\", \"pub\", \"py\", \"pyc\", \"pyo\", \"pyw\", \"pyz\",\n    \"pyzw\", \"rar\", \"reg\", \"rev\", \"rtf\", \"scf\", \"scpt\", \"scr\", \"sct\",\n    \"searchConnector-ms\", \"service\", \"settingcontent-ms\", \"sh\", \"shb\", \"shs\",\n    \"shtm\", \"shtml\", \"sldm\", \"slk\", \"so\", \"spl\", \"stm\", \"svg\", \"swf\", \"sys\",\n    \"tar\", \"theme\", \"themepack\", \"timer\", \"uif\", \"url\", \"uue\", \"vb\", \"vbe\",\n    \"vbs\", \"vhd\", \"vhdx\", \"vxd\", \"wbk\", \"website\", \"wim\", \"wiz\", \"ws\", \"wsc\",\n    \"wsf\", \"wsh\", \"xla\", \"xlam\", \"xlc\", \"xll\", \"xlm\", \"xls\", \"xlsb\", \"xlsm\",\n    \"xlt\", \"xltm\", \"xlw\", \"xml\", \"xnk\", \"xps\", \"xsl\", \"xz\", \"z\"\n)\n\n# Create the policy\nNew-MalwareFilterPolicy @Policy -FileTypes $L2Extensions\n\n# Create the rule for all accepted domains\n$Rule = @{\n    Name = $Policy.Name\n    Enabled = $false\n    MalwareFilterPolicy = $Policy.Name\n    RecipientDomainIs = (Get-AcceptedDomain).Name\n    Priority = 0\n}\n\nNew-MalwareFilterRule @Rule\n```\n3. When prepared enable the rule either through the UI or PowerShell.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 101](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.12",
      "Title": "(L1) Ensure the connection filter IP allow list is not used (Only Checks Default Policy)",
      "Name": "CIS.M365.2.1.12: (L1) Ensure the connection filter IP allow list is not used (Only Checks Default Policy)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.12",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisHostedConnectionFilterPolicy\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the IP Allow List is empty.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisHostedConnectionFilterPolicy.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the IP Allow List is empty., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the IP Allow List is empty., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisHostedConnectionFilterPolicy.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"the IP Allow List is empty.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisHostedConnectionFilterPolicy.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.12: (L1) Ensure the connection filter IP allow list is not used (Only Checks Default Policy)",
        "TestResult": "\nThe connection filter IP allow list was not empty ❌",
        "TestDescription": "2.1.12 (L1) Ensure the connection filter IP allow list is not used\n\n**Rationale:**\nWithout additional verification like mail flow rules, email from sources in the IP Allow List skips spam filtering and sender authentication (SPF, DKIM, DMARC) checks. This method creates a high risk of attackers successfully delivering email to the Inbox that would otherwise be filtered. Messages that are determined to be malware or high confidence phishing are filtered.\n\n#### Remediation action:\n\nTo remove IPs from the allow list:\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com).\n2. Click to expand **Email & collaboration** select **Policies & rules** > **Threat policies**.\n3. Under policies select **Anti-spam**.\n4. Click on the **Connection filter policy (Default)**.\n5. Click **Edit connection filter policy**.\n6. Remove any IP entries from **Always allow messages from the following IP addresses or address range:**.\n7. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 105](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.13",
      "Title": "(L1) Ensure the connection filter safe list is off (Only Checks Default Policy)",
      "Name": "CIS.M365.2.1.13: (L1) Ensure the connection filter safe list is off (Only Checks Default Policy)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.13",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisConnectionFilterSafeList\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the connection filter safe list not enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisConnectionFilterSafeList.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.13: (L1) Ensure the connection filter safe list is off (Only Checks Default Policy)",
        "TestResult": "\nWell done. The connection filter safe list was not enabled ✅",
        "TestDescription": "2.1.13 (L1) Ensure the connection filter safe list is off\n\n**Rationale:**\nWithout additional verification like mail flow rules, email from sources in the IP Allow List skips spam filtering and sender authentication (SPF, DKIM, DMARC) checks. This method creates a high risk of attackers successfully delivering email to the Inbox that would otherwise be filtered. Messages that are determined to be malware or high confidence phishing are filtered. The safe list is managed dynamically by Microsoft, and administrators do not have visibility into which sender are included. Incoming messages from email servers on the safe list bypass spam filtering.\n\n#### Remediation action:\n\nTo remove IPs from the allow list:\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com).\n2. Click to expand **Email & collaboration** select **Policies & rules** > **Threat policies**.\n3. Under policies select **Anti-spam**.\n4. Click on the **Connection filter policy (Default)**.\n5. Ensure Safe list is Off.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 108](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.2",
      "Title": "(L1) Ensure the Common Attachment Types Filter is enabled (Only Checks Default Policy)",
      "Name": "CIS.M365.2.1.2: (L1) Ensure the Common Attachment Types Filter is enabled (Only Checks Default Policy)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.2",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisAttachmentFilter\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the default malware filter policy has the common attachment file filter is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisAttachmentFilter.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CIS",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.2: (L1) Ensure the Common Attachment Types Filter is enabled (Only Checks Default Policy)",
        "TestResult": "\nWell done. Your tenants default malware filter policy has the common attachment file filter enabled (https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Result |\n| --- | --- |\n| EnableFileFilter | ✅ Pass |\n",
        "TestDescription": "2.1.2 (L1) Ensure the Common Attachment Types Filter is enabled\n\n**Rationale:**\nBlocking known malicious file types can help prevent malware-infested files from infecting a host.\n\n#### Remediation action:\n\nTo enable the Common Attachment Types Filter:\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com).\n2. Click to expand **Email & collaboration** select **Policies & rules**.\n3. On the Policies & rules page select **Threat policies**.\n4. Under polices select **Anti-malware** and click on the **Default (Default)** policy.\n5. On the Policy page that appears on the right hand pane scroll to the bottom and click on **Edit protection settings**, check the **Enable the common attachments filter**.\n6. Click Save.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 67](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.3",
      "Title": "(L1) Ensure notifications for internal users sending malware is Enabled (Only Checks Default Policy)",
      "Name": "CIS.M365.2.1.3: (L1) Ensure notifications for internal users sending malware is Enabled (Only Checks Default Policy)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.3",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisInternalMalwareNotification\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the default malware filter policy has malware notifications enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisInternalMalwareNotification.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the default malware filter policy has malware notifications enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the default malware filter policy has malware notifications enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisInternalMalwareNotification.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"the default malware filter policy has malware notifications enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisInternalMalwareNotification.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.3: (L1) Ensure notifications for internal users sending malware is Enabled (Only Checks Default Policy)",
        "TestResult": "\nYour tenants default anti malware policy does not have the recommended internal malware notifications configured (https://security.microsoft.com/antimalwarev2).\n\n| Policy | Result |\n| --- | --- |\n| EnableInternalSenderAdminNotification | ❌ Fail |\n| InternalSenderAdminAddress | ✅ Pass |\n",
        "TestDescription": "2.1.3 (L1) Ensure notifications for internal users sending malware is Enabled\n\n**Rationale:**\nThis setting alerts administrators that an internal user sent a message that contained malware. This may indicate an account or machine compromise that would need to be investigated.\n\n#### Remediation action:\n\nTo enable notifications for internal users sending malware:\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com).\n2. Click to expand **E-mail & Collaboration** select **Policies & rules**.\n3. On the Policies & rules page select **Threat policies**.\n4. Under Policies select **Anti-malware**.\n5. Click on the **Default (Default)** policy.\n6. Click on **Edit protection settings** and change the settings for **Notify an admin about undelivered messages from internal senders** to **On** and enter the email address of the administrator who should be notified under **Administrator email address**.\n7. Click Save.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 71](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.4",
      "Title": "(L2) Ensure Safe Attachments policy is enabled (Only Checks Default Policy)",
      "Name": "CIS.M365.2.1.4: (L2) Ensure Safe Attachments policy is enabled (Only Checks Default Policy)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.4",
        "L2",
        "CIS E5 Level 2",
        "CIS E5",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisSafeAttachment\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the default Safe Attachement policy matches CIS recommendations.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisSafeAttachment.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.4: (L2) Ensure Safe Attachments policy is enabled (Only Checks Default Policy)",
        "TestResult": "\nWell done. Your tenants default safe attachments policy matches CIS recommendations (https://security.microsoft.com/safeattachmentv2).\n\n| Check Name | Result |\n| --- | --- |\n| Enable | ✅ Pass |\n| Action | ✅ Pass |\n| QuarantineTag | ✅ Pass |\n",
        "TestDescription": "2.1.4 (L2) Ensure Safe Attachments policy is enabled\n\n**Rationale:**\nEnabling Safe Attachments policy helps protect against malware threats in email attachments by analyzing suspicious attachments in a secure, cloud-based environment before they are delivered to the user's inbox. This provides an additional layer of security and can prevent new or unseen types of malware from infiltrating the organization's network.\n\n#### Remediation action:\n\nTo enable the Safe Attachments policy:\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com).\n2. Click to expand **E-mail & Collaboration** select **Policies & rules**.\n3. On the Policies & rules page select **Threat policies**.\n4. Under **Policies** select **Safe Attachments**.\n5. Click + **Create**.\n6. Create a Policy Name and Description, and then click **Next**.\n7. Select all valid domains and click Next.\n8. Select **Block**.\n9. Quarantine policy is **AdminOnlyAccessPolicy**.\n10. Leave **Enable redirect** unchecked.\n11. Click **Next** and finally **Submit**.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 71](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.5",
      "Title": "(L2) Ensure Safe Attachments for SharePoint, OneDrive, and Microsoft Teams is Enabled",
      "Name": "CIS.M365.2.1.5: (L2) Ensure Safe Attachments for SharePoint, OneDrive, and Microsoft Teams is Enabled",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.5",
        "L2",
        "CIS E5 Level 2",
        "CIS E5",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisSafeAttachmentsAtpPolicy\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the Safe Attachement policies for SharePoint, OneDrive, and Microsoft Teams are Enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisSafeAttachmentsAtpPolicy.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.5: (L2) Ensure Safe Attachments for SharePoint, OneDrive, and Microsoft Teams is Enabled",
        "TestResult": "\nWell done. Your tenant has Safe Attachments for SharePoint, OneDrive, and Microsoft Teams enabled (https://security.microsoft.com/safeattachmentv2).\n\n| Check Name | Result |\n| --- | --- |\n| EnableATPForSPOTeamsODB | ✅ Pass |\n| EnableSafeDocs | ✅ Pass |\n| AllowSafeDocsOpen | ✅ Pass |\n",
        "TestDescription": "2.1.5 (L2) Ensure Safe Attachments for SharePoint, OneDrive, and Microsoft Teams is Enabled\n\nDescription: Safe Attachments for SharePoint, OneDrive, and Microsoft Teams scans these services for malicious files.\n\n#### Remediation action:\n\nTo enable Safe Attachments for SharePoint, OneDrive, and Microsoft Teams:\n\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com)\n2. Under **Email & collaboration** select **Policies & rules**\n3. Select **Threat policies** then **Safe Attachments**\n4. Click on **Global settings**\n5. Click to **Enable Turn on Defender for Office 365 for SharePoint, OneDrive, and Microsoft Teams**\n6. Click to **Enable Turn on Safe Documents for Office clients**\n7. Click to **Disable Allow people to click through Protected View even if Safe Documents identified the file as malicious**\n8. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 78](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.6",
      "Title": "(L1) Ensure Exchange Online Spam Policies are set to notify administrators (Only Checks Default Policy)",
      "Name": "CIS.M365.2.1.6: (L1) Ensure Exchange Online Spam Policies are set to notify administrators (Only Checks Default Policy)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.6",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisOutboundSpamFilterPolicy\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the default Exchange Online Spam policy is set to notify administrators.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisOutboundSpamFilterPolicy.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the default Exchange Online Spam policy is set to notify administrators., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the default Exchange Online Spam policy is set to notify administrators., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisOutboundSpamFilterPolicy.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"the default Exchange Online Spam policy is set to notify administrators.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisOutboundSpamFilterPolicy.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.6: (L1) Ensure Exchange Online Spam Policies are set to notify administrators (Only Checks Default Policy)",
        "TestResult": "\nYour tenants default Exchange Online Spam policy is not set to notify administrators (https://security.microsoft.com/antispam).\n\n| Check Name | Result |\n| --- | --- |\n| BccSuspiciousOutboundMail | ❌ Fail |\n| NotifyOutboundSpam | ❌ Fail |\n",
        "TestDescription": "2.1.6 (L1) Ensure Exchange Online Spam Policies are set to notify administrators\n\nDescription: Configure Exchange Online Spam Policies to copy emails and notify someone when a sender in the organization has been blocked for sending spam emails.\n\n#### Remediation action:\n\nTo set the Exchange Online Spam Policies:\n\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com)\n2. Under **Email & collaboration** select **Policies & rules**\n3. Select **Threat policies** then **Anti-spam**\n4. Click on the **Anti-spam outbound policy (default)**\n5. Select **Edit protection settings** then under **Notifications**\n6. Check **Send a copy of outbound messages that exceed these limits to these users and groups** then enter the desired email addresses\n7. Check **Notify these users and groups if a sender is blocked due to sending outbound spam** then enter the desired email addresses.\n8. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 80](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.7",
      "Title": "(L1) Ensure that an anti-phishing policy has been created (Only Checks Default Policy)",
      "Name": "CIS.M365.2.1.7: (L1) Ensure that an anti-phishing policy has been created (Only Checks Default Policy)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.7",
        "L1",
        "CIS E5 Level 1",
        "CIS E5",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisSafeAntiPhishingPolicy\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the default anti-phishing policy is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisSafeAntiPhishingPolicy.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the default anti-phishing policy is enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the default anti-phishing policy is enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisSafeAntiPhishingPolicy.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"the default anti-phishing policy is enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisSafeAntiPhishingPolicy.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.7: (L1) Ensure that an anti-phishing policy has been created (Only Checks Default Policy)",
        "TestResult": "\nYour tenants default anti-phishing policy does not match CIS recommendations (https://security.microsoft.com/antiphishing).\n\n| Check Name | Result |\n| --- | --- |\n| Enabled | ✅ Pass |\n| EnableMailboxIntelligenceProtection | ❌ Fail |\n| EnableMailboxIntelligence | ✅ Pass |\n| EnableSpoofIntelligence | ✅ Pass |\n| PhishThresholdLevel | ❌ Fail |\n",
        "TestDescription": "2.1.7 (L1) Ensure that an anti-phishing policy has been created\n\nDescription: Set up anti-phishing polices to increase this protection, for example by refining\nsettings to better detect and prevent impersonation and spoofing attacks.\n\n#### Remediation action:\n\nTo enable Safe Attachments for SharePoint, OneDrive, and Microsoft Teams:\n\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com)\n2. Under **Email & collaboration** select **Policies & rules**\n3. Select **Threat policies** then **Anti-Phishing**\n4. Select the **Office365 AntiPhish Default (Default)** policy and click **Edit protection settings**\n5. Set the **Phishing email threshold** to at least **2 - Aggressive**.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 85](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.1.9",
      "Title": "(L1) Ensure that DKIM is enabled for all Exchange Online Domains",
      "Name": "CIS.M365.2.1.9: (L1) Ensure that DKIM is enabled for all Exchange Online Domains",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.1.9",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisDkim\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"DKIM record should exist and be configured.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisDkim.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because DKIM record should exist and be configured., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because DKIM record should exist and be configured., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisDkim.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"DKIM record should exist and be configured.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisDkim.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.1.9: (L1) Ensure that DKIM is enabled for all Exchange Online Domains",
        "TestResult": "\nYour tenant's domains do not have DKIM fully deployed. Review [EXO configuration](https://security.microsoft.com/authentication?viewid=DKIM) and DNS records.\n\n| Domain | Result | Reason |\n| --- | --- | --- |\n| elapora.com | ❌ Fail | Failure to obtain record |\n| pora.mail.onmicrosoft.com | ❌ Fail | Failure to obtain record |\n| pora.onmicrosoft.com | ❌ Fail | Failure to obtain record |\n",
        "TestDescription": "2.1.9 (L1) Ensure that DKIM is enabled for all Exchange Online Domains\n\nDescription: DKIM lets an organization add a digital signature to outbound email messages in the message header.\n\n#### Remediation action:\n\nTo enable DKIM:\n\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com)\n2. Under **Email & collaboration** select **Policies & rules** then **Threat policies**\n3. Under the **Rules** section click **Email authentication settings**\n4. Select **DKIM**\n5. Click on each domain and confirm that **Sign messages for this domain with DKIM signatures** is **Enabled**\n6. A status of **Not signing DKIM signatures for this domain** is an audit fail.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 92](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.2.4.4",
      "Title": "(L1) Ensure Zero-hour auto purge for Microsoft Teams is on (Only Checks ZAP is enabled)",
      "Name": "CIS.M365.2.4.4: (L1) Ensure Zero-hour auto purge for Microsoft Teams is on (Only Checks ZAP is enabled)",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.2.4.4",
        "L1",
        "CIS E5 Level 1",
        "CIS E5",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisZAP\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the Zero-hour auto purge (ZAP) is enabled\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisZAP.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.2.4.4: (L1) Ensure Zero-hour auto purge for Microsoft Teams is on (Only Checks ZAP is enabled)",
        "TestResult": "\nWell done. Your tenant has Zero-hour auto purge (ZAP) enabled for Microsoft Teams:\n\n| Zero-hour auto purge (ZAP) |\n| --- |\n| ✅ Enabled |\n",
        "TestDescription": "2.4.4 (L1) Ensure Zero-hour auto purge for Microsoft Teams is on\n\n**Rationale:**\nZAP is intended to protect users that have received zero-day malware messages or content that is weaponized after being delivered to users. It does this by continually monitoring spam and malware signatures taking automated retroactive  action on messages that have already been delivered.\n\n#### Remediation action:\n\nTo enable Zero-hour auto purge for Microsoft Teams:\n1. Navigate to Microsoft 365 Defender [https://security.microsoft.com](https://security.microsoft.com)\n2. Click to expand **Settings** > **Email & collaboration** > **Microsoft Teams protection**\n3. Set **Zero-hour auto purge (ZAP)** to **On (Default)**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 125](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.3.1.1",
      "Title": "(L1) Ensure Microsoft 365 audit log search is Enabled",
      "Name": "CIS.M365.3.1.1: (L1) Ensure Microsoft 365 audit log search is Enabled",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.3.1.1",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisAuditLogSearch\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"audit log search is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisAuditLogSearch.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because audit log search is enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because audit log search is enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisAuditLogSearch.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"audit log search is enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisAuditLogSearch.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:02",
      "ResultDetail": {
        "TestTitle": "CIS.M365.3.1.1: (L1) Ensure Microsoft 365 audit log search is Enabled",
        "TestResult": "\nYour tenant does not have audit log search enabled:\n\n| Audit Log Search |\n| --- |\n| ❌ Fail |\n",
        "TestDescription": "3.1.1 (L1) Ensure Microsoft 365 audit log search is Enabled\n\n**Rationale:**\nEnabling audit log search in the Microsoft Purview compliance portal can help organizations improve their security posture, meet regulatory compliance requirements, respond to security incidents, and gain valuable operational insights.\n\n#### Remediation action:\n\nTo enable audit log search:\n1. Navigate to Microsoft Purview Audit Search [https://purview.microsoft.com/audit/auditsearch](https://purview.microsoft.com/audit/auditsearch)\n2. Select **Audit** to open the audit search\n3. Click**Start recording user and admin activity** next to the information warning at the top\n4. Click **Yes** on the dialog box to confirm.\n\n#### Related links\n\n* [Microsoft 365 Defender](https://security.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 129](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.8.1.1",
      "Title": "(L2) Ensure external file sharing in Teams is enabled for only approved cloud storage services",
      "Name": "CIS.M365.8.1.1: (L2) Ensure external file sharing in Teams is enabled for only approved cloud storage services",
      "HelpUrl": "",
      "Tag": [
        "All",
        "Security",
        "CIS",
        "CIS M365 v4.0.0",
        "CIS.M365.8.1.1",
        "CIS E3 Level 2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisThirdPartyFileSharing\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"file sharing with third-party cloud services is disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisThirdPartyFileSharing.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because file sharing with third-party cloud services is disabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because file sharing with third-party cloud services is disabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisThirdPartyFileSharing.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"file sharing with third-party cloud services is disabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisThirdPartyFileSharing.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.8.1.1: (L2) Ensure external file sharing in Teams is enabled for only approved cloud storage services",
        "TestResult": "\nAll or specific third-party cloud services are enabled.\n\n| Policy | Value | Status |\n| --- | --- | --- |\n| AllowDropBox | True | ❌ Fail |\n| AllowBox | True | ❌ Fail |\n| AllowGoogleDrive | True | ❌ Fail |\n| AllowShareFile | True | ❌ Fail |\n| AllowEgnyte | True | ❌ Fail |\n",
        "TestDescription": "8.1.1 (L2) Ensure external file sharing in Teams is enabled for only approved cloud storage services \n\nThis test checks if the third-party cloud services are disabled.\n- DropBox\n- Box\n- Google Drive\n- Citrix Files\n- Egnyte\n\nMicrosoft Teams enables collaboration via file sharing. This file sharing is conducted within Teams, using SharePoint Online, by default; however, third-party cloud services are allowed as well.\n\nRationale:\\\nEnsuring that only authorized cloud storage providers are accessible from Teams will help to dissuade the use of non-approved storage providers\n\n#### Remediation action:\n\nTo change third-party cloud services using the UI:\n1. Navigate to **Microsoft Teams admin center** [https://admin.teams.microsoft.com](https://admin.teams.microsoft.com).\n2. Click to expand **Teams** select **Teams settings**.\n3. Scroll to **Files**.\n4. Set any unauthorized provider to **Off**.\n\nTo change third-party cloud services using PowerShell:\n1. Connect to Teams using **Connect-MicrosoftTeams**.\n2. Run following PowerShell Command:\n```\n$storageParams = @{\n AllowDropBox = $false\n AllowBox = $false\n AllowGoogleDrive = $false\n AllowShareFile = $false\n AllowEgnyte = $false\n}\nSet-CsTeamsClientConfiguration @storageParams\n```\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [Microsoft Teams Admin Center](https://admin.teams.microsoft.com).\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 340](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.8.2.2",
      "Title": "(L1) Ensure communication with unmanaged Teams users is disabled",
      "Name": "CIS.M365.8.2.2: (L1) Ensure communication with unmanaged Teams users is disabled",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.8.2.2",
        "All",
        "Security",
        "CIS",
        "CIS M365 v4.0.0",
        "CIS E3 Level 1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisCommunicateWithUnmanagedTeamsUsers\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"Communication with unmanaged Teams users is disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCommunicateWithUnmanagedTeamsUsers.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Communication with unmanaged Teams users is disabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Communication with unmanaged Teams users is disabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCommunicateWithUnmanagedTeamsUsers.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"Communication with unmanaged Teams users is disabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisCommunicateWithUnmanagedTeamsUsers.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "CIS.M365.8.2.2: (L1) Ensure communication with unmanaged Teams users is disabled",
        "TestResult": "\nCommunication with unmanaged Teams users is enabled.",
        "TestDescription": "8.2.2 (L1) Ensure communication with unmanaged Teams users is disabled & 8.2.3 (L1) Ensure external Teams users cannot initiate conversations\n\nThis test checks if the communication with unmanaged Teams users is disabled .\n\n8.2.2 (L1):\\ \nThis policy setting controls chats and meetings with external unmanaged Teams users (those not managed by an organization, such as Microsoft Teams (free))\n\nRationale:\\\nAllowing users to communicate with unmanaged Teams users presents a potential security threat as little effort is required by threat actors to gain access to a trial or free Microsoft Teams account.\n\n8.2.3 (L1):\\\nThis setting prevents external users who are not managed by an organization from initiating contact with users in the protected organization.\nNote: Disabling this setting is used as an additional stop gap for the previous setting which disables communication with unmanaged Teams users entirely. If an organization chooses to have an exception to (L1) Ensure communication with unmanaged Teams users is disabled they can do so while also disabling the ability for the same group of users to initiate contact. Disabling communication entirely will also disable the ability for unmanaged users to initiate contact.\n\nRationale:\\\nAllowing users to communicate with unmanaged Teams users presents a potential security threat as little effort is required by threat actors to gain access to a trial or free Microsoft Teams account.\n\n#### Remediation action:\n\nTo change communication with unmanaged Teams users using the UI:\n1. Navigate to **Microsoft Teams admin center** [https://admin.teams.microsoft.com](https://admin.teams.microsoft.com).\n2. Click to expand **Users** select **External access**.\n3. Scroll to **Teams accounts not managed by an organization**.\n4. Set **People in my organization can communicate with Teams users whose accounts aren't managed by an organization** to **Off**.\n5. Uncheck **External users with Teams accounts not managed by an organization can contact users in my organization**.\n    - If **People in my organization can communicate with Teams users whose accounts aren't managed by an organization** is already set to **Off** then this setting will not be visible and can be considered to be in a passing state.\n6. Click **Save**\n\nTo change communication with unmanaged Teams users using PowerShell:\n1. Connect to Teams using **Connect-MicrosoftTeams**.\n2. Run following PowerShell Command:\n```\nSet-CsTenantFederationConfiguration -AllowTeamsConsumer $false\nSet-CsTenantFederationConfiguration -AllowTeamsConsumerInbound $false\n```\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [Microsoft Teams Admin Center](https://admin.teams.microsoft.com).\n* [Manage external meetings and chat with people and organizations using Microsoft identities](https://learn.microsoft.com/en-us/microsoftteams/trusted-organizations-external-meetings-chat?tabs=organization-settings)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 350 - 355](https://www.cisecurity.org/benchmark/microsoft_365)\n* [CISA MS.TEAMS.2.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/teams.md#msteams22v1)\n* [DarkGate malware delivered via Microsoft Teams - detection and response](https://levelblue.com/blogs/security-essentials/darkgate-malware-delivered-via-microsoft-teams-detection-and-response)\n* [Midnight Blizzard conducts targeted social engineering over Microsoft Teams](https://www.microsoft.com/en-us/security/blog/2023/08/02/midnight-blizzard-conducts-targeted-social-engineering-over-microsoft-teams/)\n* [GIFShell Attack Lets Hackers Create Reverse Shell through Microsoft Teams GIFs](https://www.bitdefender.com/en-us/blog/hotforsecurity/gifshell-attack-lets-hackers-create-reverse-shell-through-microsoft-teams-gifs)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.8.2.4",
      "Title": "(L1) Ensure communication with Skype users is disabled",
      "Name": "CIS.M365.8.2.4: (L1) Ensure communication with Skype users is disabled",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.8.2.4",
        "All",
        "Security",
        "CIS",
        "CIS M365 v4.0.0",
        "CIS E3 Level 1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisCommunicateWithSkypeUsers\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"Communication with Skype users is disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCommunicateWithSkypeUsers.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Communication with Skype users is disabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Communication with Skype users is disabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisCommunicateWithSkypeUsers.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"Communication with Skype users is disabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisCommunicateWithSkypeUsers.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "CIS.M365.8.2.4: (L1) Ensure communication with Skype users is disabled",
        "TestResult": "\nCommunication with Skype users is enabled.",
        "TestDescription": "8.2.4 (L1) Ensure communication with Skype users is disabled\n\nThis test checks if the communication with Skype users is disabled.\n\nThis policy setting controls chat with external unmanaged Skype users. Note: Skype for business is deprecated as of July 31, 2021, although these settings may still be valid for a period of time. See the link in the reference section for more information.\n\nRationale:\\\nSkype was deprecated July 31, 2021. Disabling communication with skype users reduces the attack surface of the organization. If a partner organization or satellite office wishes to collaborate and has not yet moved off of Skype, then a valid exception will need to be considered for this recommendation.\n\n#### Remediation action:\n\nTo change communication with Skype users using the UI:\n1. Navigate to **Microsoft Teams admin center** [https://admin.teams.microsoft.com](https://admin.teams.microsoft.com).\n2. Click to expand **Users** select **External access**.\n3. Locate **Skype users**\n4. Set **Allow users in my organization to communicate with Skype users** to **Off**.\n5. Click **Save**\n\nTo change communication with Skype users using PowerShell:\n1. Connect to Teams using **Connect-MicrosoftTeams**.\n2. Run following PowerShell Command:\n```\nSet-CsTenantFederationConfiguration -AllowPublicUsers $false\n```\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [Microsoft Teams Admin Center](https://admin.teams.microsoft.com).\n* [Manage external meetings and chat with people and organizations using Microsoft identities](https://learn.microsoft.com/en-us/microsoftteams/trusted-organizations-external-meetings-chat)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 357](https://www.cisecurity.org/benchmark/microsoft_365)\n* [CISA MS.TEAMS.3.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/teams.md#msteams14v1)\n* [MITRE ATT&CK TTP Mapping](https://attack.mitre.org/techniques/T1567/)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.8.4.1",
      "Title": "(L1) Ensure all or a majority of third-party and custom apps are blocked",
      "Name": "CIS.M365.8.4.1: (L1) Ensure all or a majority of third-party and custom apps are blocked",
      "HelpUrl": "",
      "Tag": [
        "All",
        "Security",
        "CIS",
        "CIS M365 v4.0.0",
        "CIS.M365.8.4.1",
        "CIS E3 Level 1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisThirdPartyAndCustomApps\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"all or a majority of third-party and custom apps are blocked.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisThirdPartyAndCustomApps.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because all or a majority of third-party and custom apps are blocked., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because all or a majority of third-party and custom apps are blocked., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisThirdPartyAndCustomApps.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"all or a majority of third-party and custom apps are blocked.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisThirdPartyAndCustomApps.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.8.4.1: (L1) Ensure all or a majority of third-party and custom apps are blocked",
        "TestResult": "\nAll or a majority of third-party or custom apps are allowed.\n\n| Policy | Value | Status |\n| --- | --- | --- |\n| Microsoft apps | Allow all apps | ✅ Pass |\n| Third-party apps | Allow all apps | ❌ Fail |\n| Custom apps | Allow all apps | ❌ Fail |\n",
        "TestDescription": "8.4.1 (L1) Ensure app permission policies are configured \n\nThis test checks if the usage of third-party and custom apps are disabled.\n\nThis policy setting controls which class of apps are available for users to install.\n\nRationale:\\\nAllowing users to install third-party or unverified apps poses a potential risk of  introducing malicious software to the environment.\n\n#### Remediation action:\n\nTo change app permission policies using the UI:\n1. Navigate to **Microsoft Teams admin center** [https://admin.teams.microsoft.com](https://admin.teams.microsoft.com).\n2. Click to expand **Teams apps** select **Permission policies**.\n3. Select **Global (Org-wide default)** policy.\n4. For **Microsoft apps** set **Let users install and use available apps by default** to **On** or less permissive.\n5. For **Third-party apps** set **Let users install and use available apps by default** to **Off**.\n6. For **Custom apps** set **Let users install and use available apps by default** to **Off**.\n\nMake sure to also check the Org-wide app settings:\n1. Navigate to **Microsoft Teams admin center** [https://admin.teams.microsoft.com](https://admin.teams.microsoft.com).\n2. Click to expand **Teams apps** select **Manage apps**.\n3. In the upper right click **Actions** > **Org-wide app settings**.\n4. For **Third-party apps** set **Third-party apps** and **New third-party apps published to the store** to **Off**.\n5. For **Custom apps** set **Let users interact with custom apps in preview** to **Off**.\n6. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [Microsoft Teams Admin Center](https://admin.teams.microsoft.com).\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 359](https://www.cisecurity.org/benchmark/microsoft_365)\n* [CISA MS.TEAMS.5.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/teams.md#msteams52v1)\n* [CISA MS.TEAMS.5.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/teams.md#msteams53v1)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.8.5.3",
      "Title": "(L1) Ensure only people in my org can bypass the lobby",
      "Name": "CIS.M365.8.5.3: (L1) Ensure only people in my org can bypass the lobby",
      "HelpUrl": "",
      "Tag": [
        "All",
        "Security",
        "CIS",
        "CIS M365 v4.0.0",
        "CIS.M365.8.5.3",
        "CIS E3 Level 1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisTeamsLobbyBypass\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"Global (Org-wide default) meeting policy is configured to only bypass the lobby for 'Peoply in my org'.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisTeamsLobbyBypass.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Global (Org-wide default) meeting policy is configured to only bypass the lobby for 'Peoply in my org'., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Global (Org-wide default) meeting policy is configured to only bypass the lobby for 'Peoply in my org'., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisTeamsLobbyBypass.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"Global (Org-wide default) meeting policy is configured to only bypass the lobby for 'Peoply in my org'.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisTeamsLobbyBypass.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "CIS.M365.8.5.3: (L1) Ensure only people in my org can bypass the lobby",
        "TestResult": "\nFollowing people can bypass your lobby: 'EveryoneInCompany'.",
        "TestDescription": "8.5.3 (L1) Ensure only people in my org can bypass the lobby\n\nThis test checks if the Global (Org-wide default) meeting policy is configured to only bypass the lobby for 'Peoply in my org'.\n\nThis policy setting controls who can join a meeting directly and who must wait in the lobby until they're admitted by an organizer, co-organizer, or presenter of the meeting.\n\nRationale:\\\nFor meetings that could contain sensitive information, it is best to allow the meeting organizer to vet anyone not directly sent an invite before admitting them to the meeting. This will also prevent the anonymous user from using the meeting link to have meetings at unscheduled times.\n\n#### Remediation action:\n\nTo change who can bypass the lobby using the UI:\n1. Navigate to [Microsoft Teams admin center](https://admin.teams.microsoft.com).\n2. Click to expand **Meetings** select **Meeting policies**.\n3. Click **Global (Org-wide default)**.\n4. Seach for **Meeting join & lobby**.\n5. Set **Who can bypass the lobby** to **People in my org**.\n6. Click **Save**.\n\nTo change who can bypass the lobby using PowerShell:\n1. Connect to Teams using **Connect-MicrosoftTeams**.\n2. Run following PowerShell Command:\n```\nSet-CsTeamsMeetingPolicy -Identity Global -AutoAdmittedUsers \"EveryoneInCompanyExcludingGuests\"\n```\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [Microsoft Teams Admin Center](https://admin.teams.microsoft.com).\n* [Overview of lobby settings and policies](https://learn.microsoft.com/en-us/microsoftteams/who-can-bypass-meeting-lobby#overview-of-lobby-settings-and-policies)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 368](https://www.cisecurity.org/benchmark/microsoft_365)\n* [CISA MS.TEAMS.1.4v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/teams.md#msteams14v1)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.8.6.1",
      "Title": "(L1) Ensure users can report security concerns in Teams to internal destination",
      "Name": "CIS.M365.8.6.1: (L1) Ensure users can report security concerns in Teams to internal destination",
      "HelpUrl": "",
      "Tag": [
        "All",
        "Security",
        "CIS",
        "CIS M365 v4.0.0",
        "CIS.M365.8.6.1",
        "CIS E3 Level 1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisTeamsReportSecurityConcerns\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"report security concerns in Teams is only to internal destination.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisTeamsReportSecurityConcerns.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because report security concerns in Teams is only to internal destination., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because report security concerns in Teams is only to internal destination., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisTeamsReportSecurityConcerns.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"report security concerns in Teams is only to internal destination.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisTeamsReportSecurityConcerns.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "CIS.M365.8.6.1: (L1) Ensure users can report security concerns in Teams to internal destination",
        "TestResult": "\nAll or specific report submission policies are missing proper configuration.\n\n| Policy | Value | Status |\n| --- | --- | --- |\n| AllowSecurityEndUserReporting | True | ✅ Pass |\n| ReportJunkToCustomizedAddress |  | ✅ Pass |\n| ReportNotJunkToCustomizedAddress |  | ✅ Pass |\n| ReportPhishToCustomizedAddress |  | ✅ Pass |\n| ReportJunkAddresses | NULL | ❌ Fail |\n| ReportNotJunkAddresses | NULL | ❌ Fail |\n| ReportPhishAddresses | NULL | ❌ Fail |\n| ReportChatMessageEnabled |  | ✅ Pass |\n| ReportChatMessageToCustomizedAddressEnabled |  | ✅ Pass |\n",
        "TestDescription": "8.6.1 (L1) Ensure users can report security concerns in Teams\n\nUser reporting settings allow a user to report a message as malicious for further analysis. This recommendation is composed of 3 different settings and all be configured  to pass:\n* In the Teams admin center: On by default and controls whether users are able to report messages from Teams. When this setting is turned off, users can't report messages within Teams, so the corresponding setting in the Microsoft 365 Defender portal is irrelevant.\n* In the Microsoft 365 Defender portal: On by default for new tenants. Existing tenants need to enable it. If user reporting of messages is turned on in the Teams admin center, it also needs to be turned on the Defender portal for user reported messages to show up correctly on the User reported tab on the Submissions page.\n* Defender - Report message destinations: This applies to more than just Microsoft Teams and allows for an organization to keep their reports contained. Due to how the parameters are configured on the backend it is included in this assessment as a requirement.\n\nRationale:\\\nUsers will be able to more quickly and systematically alert administrators of suspicious malicious messages within Teams. The content of these messages may be sensitive in nature and therefore should be kept within the organization and not shared with Microsoft without first consulting company policy.\n\nNote:\\\n- The reported message remains visible to the user in the Teams client.\n- Users can report the same message multiple times.\n- The message sender isn't notified that messages were reported.\n\n\n#### Remediation action:\n\nTo change report security concerns settings using the UI:\n1. Navigate to [Microsoft Teams admin center](https://admin.teams.microsoft.com).\n2. Click to expand **Messaging** select **Messaging policies**.\n3. Click **Global (Org-wide default)**.\n4. Set **Report a security concern** to **On**.\n5. Next, navigate to [Microsoft 365 Defender](https://security.microsoft.com/)\n6. Click on **Settings** > **Email & collaboration** > **User reported settings**.\n7. Scroll to **Microsoft Teams**.\n8. Check **Monitor reported messages in Microsoft Teams** and **Save**.\n9. Set **Send reported messages to:** to **My reporting mailbox only** with reports configured to be sent to authorized staff.\n\nTo change who can bypass the lobby using PowerShell:\n1. Connect to Teams using **Connect-MicrosoftTeams**.\n2. Connecto to ExchangeOnline using **Connect-ExchangeOnline**.\n3. To configure the Teams reporting policy run the following PowerShell command:\n```\nSet-CsTeamsMessagingPolicy -Identity Global -AllowSecurityEndUserReporting $true\n```\n4. To configure the Defender reporting policy, edit and run following commands:\n```\n$socmail = \"soc@contoso.com\" # Change this.\n$params = @{\n    Identity = \"DefaultReportSubmissionPolicy\"\n    EnableReportToMicrosoft = $false\n    ReportChatMessageEnabled = $false\n    ReportChatMessageToCustomizedAddressEnabled = $true\n    ReportJunkToCustomizedAddress = $true\n    ReportNotJunkToCustomizedAddress = $true\n    ReportPhishToCustomizedAddress = $true\n    ReportJunkAddresses = $socmail\n    ReportNotJunkAddresses = $socmail\n    ReportPhishAddresses = $socmail\n}\nSet-ReportSubmissionPolicy @params\nNew-ReportSubmissionRule -Name DefaultReportSubmissionRule -ReportSubmissionPolicy DefaultReportSubmissionPolicy -SentTo $socmail\n```\n\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [Microsoft Teams Admin Center](https://admin.teams.microsoft.com).\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 384](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.1.1",
      "Title": "Legacy authentication SHALL be blocked.",
      "Name": "CISA.MS.AAD.1.1: Legacy authentication SHALL be blocked.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.1.1",
        "CISA",
        "CISA.MS.AAD.1.1",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaBlockLegacyAuth\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"an enabled policy for all users blocking legacy auth access shall exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaBlockLegacyAuth.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.1.1: Legacy authentication SHALL be blocked.",
        "TestResult": "\nYour tenant has one or more policies that block legacy authentication:\n\n  - [Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/4086128c-3850-48ac-8962-e19a956828bd)\n\n",
        "TestDescription": "Legacy authentication SHALL be blocked.\n\nRationale: The security risk of allowing legacy authentication protocols is they do not support MFA. Blocking legacy protocols reduces the impact of user credential theft.\n\n#### Remediation action:\n\nFollow the guide below to create a conditional access policy that blocks legacy authentication.\n\n- [Block legacy authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-block-legacy#create-a-conditional-access-policy)\n\n#### Related links\n\n- [CISA Legacy Authentication - MS.AAD.1.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#1-legacy-authentication)\n- [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L47)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.2.1",
      "Title": "Users detected as high risk SHALL be blocked.",
      "Name": "CISA.MS.AAD.2.1: Users detected as high risk SHALL be blocked.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.2.1",
        "CISA.MS.AAD.2.1",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaBlockHighRiskUser\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"an enabled policy for all users blocking high risk users shall exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaBlockHighRiskUsers.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.2.1: Users detected as high risk SHALL be blocked.",
        "TestResult": "\nWell done. Your tenant has one or more policies that block high risk users :\n\n  - [CISA SCuBA.MS.AAD.2.3: Users detected as high risk SHALL be blocked.](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/94c7d8d0-5c8c-460d-8ace-364374250893)\n\n",
        "TestDescription": "Users detected as high risk SHALL be blocked.\n\nRationale: Blocking high-risk users may prevent compromised accounts from accessing the tenant. This prevents compromised accounts from accessing the tenant.\n\n#### Remediation action:\n\nCreate a conditional access policy blocking users categorized as high risk by the Identity Protection service. Configure the following policy settings in the new conditional access policy as per the values below:\n\n* Users > Include > **All users**\n* Target resources > Cloud apps > **All cloud apps**\n* Conditions > User risk > **High**\n* Access controls > Grant > **Block Access**\n\nNote: While CISA recommends blocking, the [Microsoft recommendation](https://learn.microsoft.com/entra/id-protection/howto-identity-protection-configure-risk-policies#microsofts-recommendation) is to require multi-factor authentication for high-risk users.\n\n#### Related links\n\n* [CISA Risk Based Policies - MS.AAD.2.1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad21v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L85)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.2.2",
      "Title": "A notification SHOULD be sent to the administrator when high-risk users are detected.",
      "Name": "CISA.MS.AAD.2.2: A notification SHOULD be sent to the administrator when high-risk users are detected.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.2.2",
        "CISA.MS.AAD.2.2",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaNotifyHighRisk\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"an enabled is a recipient of risky user login notifications.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaNotifyHighRiskUsers.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.2.2: A notification SHOULD be sent to the administrator when high-risk users are detected.",
        "TestResult": "\nWell done. Your tenant has one or more recipients for notifications of risky user logins:\n\n  - [Merill Fernando](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/IdentityProtectionMenuBlade/~/UsersAtRiskAlerts/fromNav/Identity)\n  - [Bob Leaf](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/IdentityProtectionMenuBlade/~/UsersAtRiskAlerts/fromNav/Identity)\n  - [Joshua Fernando](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/IdentityProtectionMenuBlade/~/UsersAtRiskAlerts/fromNav/Identity)\n\n",
        "TestDescription": "A notification SHOULD be sent to the administrator when high-risk users are detected.\n\nRationale: Notification enables the admin to monitor the event and remediate the risk. This helps the organization proactively respond to cyber intrusions as they occur.\n\n#### Remediation action:\n\nFollow the guide below to configure Entra ID Protection to send a regularly monitored security mailbox email notification when user accounts are determined to be high risk.\n\n- [Configure Entra Identity Protection Notifications - Microsoft Learn](https://learn.microsoft.com/entra/id-protection/howto-identity-protection-configure-notifications#configure-users-at-risk-detected-alerts)\n\n#### Related links\n\n- [CISA Risk Based Policies - MS.AAD.2.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad22v1)\n- [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L122)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.2.3",
      "Title": "Sign-ins detected as high risk SHALL be blocked.",
      "Name": "CISA.MS.AAD.2.3: Sign-ins detected as high risk SHALL be blocked.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.2.3",
        "CISA.MS.AAD.2.3",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaBlockHighRiskSignIn\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"an enabled policy for all users blocking high risk sign-ins shall exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaBlockHighRiskSignIns.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because an enabled policy for all users blocking high risk sign-ins shall exist., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because an enabled policy for all users blocking high risk sign-ins shall exist., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaBlockHighRiskSignIns.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"an enabled policy for all users blocking high risk sign-ins shall exist.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaBlockHighRiskSignIns.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.2.3: Sign-ins detected as high risk SHALL be blocked.",
        "TestResult": "\nYour tenant does not have any conditional access policies that block high risk sign-ins.\n",
        "TestDescription": "Sign-ins detected as high risk SHALL be blocked.\n\nRationale: Blocking high-risk sign ins may prevent compromised sign-ins from accessing the tenant. This prevents compromised sign-ins from accessing the tenant.\n\n#### Remediation action:\n\nCreate a Conditional Access policy blocking sign-ins determined high risk by the Identity Protection service. Configure the following policy settings in the new Conditional Access policy as per the values below:\n\n* Users > Include > **All users**\n* Target resources > Cloud apps > **All cloud apps**\n* Conditions > Sign-in risk > **High**\n* Access controls > Grant > **Block Access**\n\nNote: While CISA recommends blocking, the [Microsoft recommendation](https://learn.microsoft.com/entra/id-protection/howto-identity-protection-configure-risk-policies#microsofts-recommendation) is to require multi-factor authentication for high-risk sign-ins.\n\n#### Related links\n\n* [CISA Risk Based Policies - MS.AAD.2.3](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad23v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L138)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.3.1",
      "Title": "Phishing-resistant MFA SHALL be enforced for all users.",
      "Name": "CISA.MS.AAD.3.1: Phishing-resistant MFA SHALL be enforced for all users.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.1",
        "CISA.MS.AAD.3.1",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaPhishResistant\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"an enabled conditional access policy requires phishing-resistant MFA for all apps.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPhishResistant.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because an enabled conditional access policy requires phishing-resistant MFA for all apps., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because an enabled conditional access policy requires phishing-resistant MFA for all apps., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPhishResistant.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"an enabled conditional access policy requires phishing-resistant MFA for all apps.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPhishResistant.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.3.1: Phishing-resistant MFA SHALL be enforced for all users.",
        "TestResult": "\nYour tenant does not have any conditional access policies that require Phishing Resistant Authentication Strengths.\n",
        "TestDescription": "Phishing-resistant MFA SHALL be enforced for all users.\n\nRationale: Weaker forms of MFA do not protect against sophisticated phishing attacks. By enforcing methods resistant to phishing, those risks are minimized.\n\n#### Remediation action:\n\nCreate a conditional access policy enforcing phishing-resistant MFA for all users. Configure the following policy settings in the new conditional access policy, per the values below:\n\n* Users > Include > **All users**\n* Target resources > Cloud apps > **All cloud apps**\n* Access controls > Grant > Grant Access > Require authentication strength > **Phishing-resistant MFA**\n\n#### Related links\n\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad31v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L181)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.3.2",
      "Title": "If phishing-resistant MFA has not been enforced, an alternative MFA method SHALL be enforced for all users.",
      "Name": "CISA.MS.AAD.3.2: If phishing-resistant MFA has not been enforced, an alternative MFA method SHALL be enforced for all users.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.2",
        "CISA.MS.AAD.3.2",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaMfa\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"an enabled conditional access policy requires MFA for all apps.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaMfa.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.3.2: If phishing-resistant MFA has not been enforced, an alternative MFA method SHALL be enforced for all users.",
        "TestResult": "\nWell done. Your tenant has one or more policies that require MFA:\n\n  - [MFA - All users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/474ddef4-5620-4e7a-8976-6e9b095b2675)\n  - [Require password change for high-risk users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/ddbc3bb1-3749-474f-b8c3-0d997118b24b)\n\n",
        "TestDescription": "If phishing-resistant MFA has not been enforced, an alternative MFA method SHALL be enforced for all users.\n\nRationale: This is a stopgap security policy to help protect the tenant if phishing-resistant MFA has not been enforced. This policy requires MFA enforcement, thus reducing single-form authentication risk.\n\n#### Remediation action:\n\nIf phishing-resistant MFA has not been enforced for all users yet, create a conditional access policy that enforces MFA but does not dictate MFA method. Configure the following policy settings in the new conditional access policy, per the values below:\n\n* Users > Include > **All users**\n* Target resources > Cloud apps > **All cloud apps**\n* Access controls > Grant > Grant Access > **Require multifactor authentication**\n\n#### Related links\n\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad32v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L214)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.3.3",
      "Title": "If phishing-resistant MFA has not been enforced and Microsoft Authenticator is enabled, it SHALL be configured to show login context information.",
      "Name": "CISA.MS.AAD.3.3: If phishing-resistant MFA has not been enforced and Microsoft Authenticator is enabled, it SHALL be configured to show login context information.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.3",
        "CISA.MS.AAD.3.3",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaAuthenticatorContext\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"Microsoft Authenticator is configured to show login context information.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAuthenticatorContext.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Microsoft Authenticator is configured to show login context information., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Microsoft Authenticator is configured to show login context information., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAuthenticatorContext.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"Microsoft Authenticator is configured to show login context information.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAuthenticatorContext.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.3.3: If phishing-resistant MFA has not been enforced and Microsoft Authenticator is enabled, it SHALL be configured to show login context information.",
        "TestResult": "\nYour tenant does not have the [Authentication Methods](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods/fromNav/Identity) policy for Microsoft Authenticator set appropriately or migration to Authentication Methods is not complete.\n\n[Authentication Methods](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods/fromNav/Identity) Migration Complete: ✅ Pass\n",
        "TestDescription": "If phishing-resistant MFA has not been enforced and Microsoft Authenticator is enabled, it SHALL be configured to show login context information.\n\nRationale: This stopgap security policy helps protect the tenant when phishing-resistant MFA has not been enforced and Microsoft Authenticator is used. This policy helps improve the security of Microsoft Authenticator by showing user context information, which helps reduce MFA phishing compromises.\n\n#### Remediation action:\n\nIf phishing-resistant MFA has not been deployed yet and Microsoft Authenticator is in use, configure Authenticator to display context information to users when they log in.\n\n1. In Entra ID, click Security > Authentication methods > **Microsoft Authenticator**.\n2. Click the **Configure tab**.\n3. For Allow use of Microsoft Authenticator OTP select **No**.\n4. Under Show application name in push and passwordless notifications select Status > **Enabled** and Target > Include > **All users**.\n5. Under Show geographic location in push and passwordless notifications select Status > **Enabled** and Target > Include > **All users**.\n6. Select **Save**.\n\n#### Related links\n\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad33v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L254)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.3.4",
      "Title": "The Authentication Methods Manage Migration feature SHALL be set to Migration Complete.",
      "Name": "CISA.MS.AAD.3.4: The Authentication Methods Manage Migration feature SHALL be set to Migration Complete.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.4",
        "CISA.MS.AAD.3.4",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaMethodsMigration\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the migration to Authentication Methods is complete.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaMethodsMigration.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.3.4: The Authentication Methods Manage Migration feature SHALL be set to Migration Complete.",
        "TestResult": "\nWell done. Your tenant has completed the migration to Authentication Methods.\n",
        "TestDescription": "The Authentication Methods Manage Migration feature SHALL be set to Migration Complete.\n\nRationale: To disable the legacy authentication methods screen for the tenant, configure the Manage Migration feature to Migration Complete. The MFA and Self-Service Password Reset (SSPR) authentication methods are both managed from a central admin page, thereby reducing administrative complexity and potential security misconfigurations.\n\n#### Remediation action:\n\nIf phishing-resistant MFA has not been enforced for all users yet, create a conditional access policy that enforces MFA but does not dictate MFA method. Configure the following policy settings in the new conditional access policy, per the values below:\n\n1. Go through the process of [migrating from the legacy Azure AD MFA and Self-Service Password Reset (SSPR) administration pages to the new unified Authentication Methods policy page](https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-authentication-methods-manage).\n2. Once ready to finish the migration, [set the **Manage Migration** option to **Migration Complete**](https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-authentication-methods-manage#finish-the-migration).\n\n#### Related links\n\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.4v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad34v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L284)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.3.5",
      "Title": "The authentication methods SMS, Voice Call, and Email One-Time Passcode (OTP) SHALL be disabled.",
      "Name": "CISA.MS.AAD.3.5: The authentication methods SMS, Voice Call, and Email One-Time Passcode (OTP) SHALL be disabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.5",
        "CISA.MS.AAD.3.5",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaWeakFactor\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"all weak authentication methods are disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaWeakFactor.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because all weak authentication methods are disabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because all weak authentication methods are disabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaWeakFactor.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"all weak authentication methods are disabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaWeakFactor.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.3.5: The authentication methods SMS, Voice Call, and Email One-Time Passcode (OTP) SHALL be disabled.",
        "TestResult": "\nOne or more weak methods are enabled in your tenant, or migration to Authentication Methods is incomplete.\n\n| Authentication Method | State | Test Result |\n| --- | --- | --- |\n| [Sms](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods) | enabled | ❌ Fail |\n| [Voice](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods) | disabled | ✅ Pass |\n| [Email](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods) | disabled | ✅ Pass |\n\n",
        "TestDescription": "The authentication methods SMS, Voice Call, and Email One-Time Passcode (OTP) SHALL be disabled.\n\nRationale: SMS, voice call, and email OTP are the weakest authenticators. This policy forces users to use stronger MFA methods.\n\n#### Remediation action:\n\nIf phishing-resistant MFA has not been deployed yet and Microsoft Authenticator is in use, configure Authenticator to display context information to users when they log in.\n\n1. In **Entra ID**, click **Security** > **[Authentication methods](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods/fromNav/Identity)**\n2. Click on the **SMS**, **Voice Call**, and **Email OTP** authentication methods and disable each of them. Their statuses should be **Enabled** > **No** on the **Authentication methods** > **Policies** page.\n\n#### Related links\n\n* [Entra admin portal - Authentication methods](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods/fromNav/Identity)\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.5v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad35v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L307)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.3.6",
      "Title": "Phishing-resistant MFA SHALL be required for highly privileged roles.",
      "Name": "CISA.MS.AAD.3.6: Phishing-resistant MFA SHALL be required for highly privileged roles.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.6",
        "CISA.MS.AAD.3.6",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaPrivilegedPhishResistant\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"an enabled conditional access policy for highly privileged roles should require phishing resistant MFA.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPrivilegedPhishResistant.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because an enabled conditional access policy for highly privileged roles should require phishing resistant MFA., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because an enabled conditional access policy for highly privileged roles should require phishing resistant MFA., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPrivilegedPhishResistant.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"an enabled conditional access policy for highly privileged roles should require phishing resistant MFA.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPrivilegedPhishResistant.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.3.6: Phishing-resistant MFA SHALL be required for highly privileged roles.",
        "TestResult": "\nYour tenant does not have any conditional access policies that require phishing resistant MFA for highly privileged users.\n",
        "TestDescription": "Phishing-resistant MFA SHALL be required for highly privileged roles.\n\nRationale: This is a backup security policy to help protect privileged access to the tenant if the conditional access policy, which requires MFA for all users, is disabled or misconfigured.\n\n#### Remediation action:\n\nCreate a conditional access policy enforcing phishing-resistant MFA for highly privileged roles. Configure the following policy settings in the new conditional access policy, per the values below:\n\n1. In **Entra** under **Protection** and **Conditional Access**, select **[Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)**.\n2. Click on **New policy**\n3. Under **New Conditional Access policy**, configure the following policy settings in the new conditional access policy, per the values below:\n    * Users > Include > Select users and groups > Directory roles > select each of the roles listed in the **[Highly Privileged Roles](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#highly-privileged-roles)** listed.\n    * Target resources > Cloud apps > **All cloud apps**\n    * Access controls > Grant > Grant Access > Require authentication strength > **Phishing-resistant MFA**\n4. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - Conditional Access | Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.6v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad36v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L354)\n* [CISA ScubaGear Highly Privileged Roles](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#highly-privileged-roles)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.3.7",
      "Title": "Managed devices SHOULD be required for authentication.",
      "Name": "CISA.MS.AAD.3.7: Managed devices SHOULD be required for authentication.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.7",
        "CISA.MS.AAD.3.7",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaManagedDevice\n\n        if ($null -ne $result) {\n            if($result){\n                $result | Should -Be $true -Because \"a policy requires compliant or domain joined devices.\"\n            }else{\n                Test-MtCisaManagedDevice -SkipHybridJoinCheck | Should -Be $true -Because \"a policy requires compliant devices.\"\n            }\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaManagedDevice.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because a policy requires compliant devices., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because a policy requires compliant devices., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaManagedDevice.Tests.ps1",
            "Line": "9",
            "LineText": "                Test-MtCisaManagedDevice -SkipHybridJoinCheck | Should -Be $true -Because \"a policy requires compliant devices.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaManagedDevice.Tests.ps1: line 9\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.3.7: Managed devices SHOULD be required for authentication.",
        "TestResult": "\nYour tenant does not have any conditional access policies that require managed devices.\n",
        "TestDescription": "Managed devices SHOULD be required for authentication.\n\nRationale: The security risk of an adversary authenticating to the tenant from their own device is reduced by requiring a managed device to authenticate. Managed devices are under the provisioning and control of the agency. [OMB-22-09](https://www.whitehouse.gov/wp-content/uploads/2022/01/M-22-09.pdf) states, \"When authorizing users to access resources, agencies must consider at least one device-level signal alongside identity information about the authenticated user.\"\n\n#### Remediation action:\n\nCreate a conditional access policy requiring a user's device to be either Microsoft Entra hybrid joined or compliant during authentication. Configure the following policy settings in the new conditional access policy, per the values below:\n\n1. In **Entra** under **Protection** and **Conditional Access**, select **[Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)**.\n2. Click on **New policy**\n3. Under **New Conditional Access policy**, configure the following policy settings in the new conditional access policy, per the values below:\n    * Users > Include > **All users**\n    * Target resources > Cloud apps > **All cloud apps**\n    * Access controls > Grant > Grant Access > **Require device to be marked as compliant** and **Require Microsoft Entra hybrid joined device** > For multiple controls > **Require one of the selected controls**\n4. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - Conditional Access | Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.7v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad37v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L397)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.3.8",
      "Title": "Managed Devices SHOULD be required to register MFA.",
      "Name": "CISA.MS.AAD.3.8: Managed Devices SHOULD be required to register MFA.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.8",
        "CISA.MS.AAD.3.8",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaManagedDeviceRegistration\n\n        if ($null -ne $result) {\n            if($result){\n                $result | Should -Be $true -Because \"a policy requires compliant or domain joined devices for registration.\"\n            }else{\n                Test-MtCisaManagedDeviceRegistration -SkipHybridJoinCheck | Should -Be $true -Because \"a policy requires compliant devices for registration.\"\n            }\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaManagedDeviceRegistration.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because a policy requires compliant devices for registration., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because a policy requires compliant devices for registration., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaManagedDeviceRegistration.Tests.ps1",
            "Line": "9",
            "LineText": "                Test-MtCisaManagedDeviceRegistration -SkipHybridJoinCheck | Should -Be $true -Because \"a policy requires compliant devices for registration.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaManagedDeviceRegistration.Tests.ps1: line 9\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.3.8: Managed Devices SHOULD be required to register MFA.",
        "TestResult": "\nYour tenant does not have any conditional access policies that require managed devices for registration.\n",
        "TestDescription": "Managed Devices SHOULD be required to register MFA.\n\nRationale: Reduce risk of an adversary using stolen user credentials and then registering their own MFA device to access the tenant by requiring a managed device provisioned and controlled by the agency to perform registration actions. This prevents the adversary from using their own unmanaged device to perform the registration.\n\n#### Remediation action:\n\nCreate a conditional access policy requiring a user to be on a managed device when registering for MFA.\n\n1. In **Entra** under **Protection** and **Conditional Access**, select **[Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)**.\n2. Click on **New policy**\n3. Under **New Conditional Access policy**, configure the following policy settings in the new conditional access policy, per the values below:\n    * Users > Include > **All users**\n    * Target resources > User actions > **Register security information**\n    * Access controls > Grant > Grant Access > **Require device to be marked as compliant** and **Require Microsoft Entra hybrid joined device** > For multiple controls > **Require one of the selected controls**\n4. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - Conditional Access | Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.8v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad38v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L431)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.4.1",
      "Title": "Security logs SHALL be sent to the agency's security operations center for monitoring.",
      "Name": "CISA.MS.AAD.4.1: Security logs SHALL be sent to the agency's security operations center for monitoring.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.4.1",
        "CISA.MS.AAD.4.1",
        "CISA",
        "Security",
        "All",
        "Entra ID P1"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $cisaDiagnosticSettings = Test-MtCisaDiagnosticSettings\n\n        if ($null -ne $cisaDiagnosticSettings) {\n            $cisaDiagnosticSettings | Should -Be $true -Because \"diagnostic settings are configured for all logs.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaDiagnosticSettings.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because diagnostic settings are configured for all logs., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because diagnostic settings are configured for all logs., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaDiagnosticSettings.Tests.ps1",
            "Line": "6",
            "LineText": "            $cisaDiagnosticSettings | Should -Be $true -Because \"diagnostic settings are configured for all logs.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaDiagnosticSettings.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.4.1: Security logs SHALL be sent to the agency's security operations center for monitoring.",
        "TestResult": "\nYour tenant does not have [diagnostic settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/DiagnosticSettingsMenuBlade/~/General) configured for all logs:\n\n| Log Name | Result |\n| --- | --- |\n| ADFSSignInLogs | ❌ Fail |\n| AuditLogs | ❌ Fail |\n| AzureADGraphActivityLogs | ❔ Optional |\n| B2CRequestLogs | ❔ Optional |\n| EnrichedOffice365AuditLogs | ❌ Fail |\n| ManagedIdentitySignInLogs | ❌ Fail |\n| MicrosoftGraphActivityLogs | ❌ Fail |\n| MicrosoftServicePrincipalSignInLogs | ❔ Optional |\n| NetworkAccessAlerts | ❔ Optional |\n| NetworkAccessConnectionEvents | ❔ Optional |\n| NetworkAccessTrafficLogs | ❔ Optional |\n| NonInteractiveUserSignInLogs | ❌ Fail |\n| ProvisioningLogs | ❔ Optional |\n| RemoteNetworkHealthLogs | ❔ Optional |\n| RiskyServicePrincipals | ❌ Fail |\n| RiskyUsers | ❌ Fail |\n| ServicePrincipalRiskEvents | ❌ Fail |\n| ServicePrincipalSignInLogs | ❌ Fail |\n| SignInLogs | ❌ Fail |\n| UserRiskEvents | ❌ Fail |\n\n",
        "TestDescription": "Security logs SHALL be sent to the agency's security operations center for monitoring.\n\nRationale: The security risk of not having visibility into cyber attacks is reduced by collecting logs in the agency’s centralized security detection infrastructure. This makes security events available for auditing, query, and incident response.\n\nNote: The following logs (configured in Entra diagnostic settings), are required: `AuditLogs`, `SignInLogs`, `RiskyUsers`, `UserRiskEvents`, `NonInteractiveUserSignInLogs`, `ServicePrincipalSignInLogs`, `ADFSSignInLogs`, `RiskyServicePrincipals`, `ServicePrincipalRiskEvents`, `EnrichedOffice365AuditLogs`, `MicrosoftGraphActivityLogs`. If managed identities are used for Azure resources, also send the `ManagedIdentitySignInLogs` log type. If the Entra ID Provisioning Service is used to provision users to software-as-a-service (SaaS) apps or other systems, also send the `ProvisioningLogs` log type.\n\nNote: Agencies can benefit from security detection capabilities offered by the CISA Cloud Log Aggregation Warehouse (CLAW) system. Agencies are urged to send the logs to CLAW. Contact CISA at cyberliason@cisa.dhs.gov to request integration instructions.\n\n#### Remediation action:\n\nFollow the configuration instructions unique to the products and integration patterns at your organization to send the security logs to the security operations center for monitoring.\n\n#### Related links\n\n* [CISA 4. Centralized Log Collection - MS.AAD.4.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad41v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L523)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.5.1",
      "Title": "Only administrators SHALL be allowed to register applications.",
      "Name": "CISA.MS.AAD.5.1: Only administrators SHALL be allowed to register applications.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.5.1",
        "CISA.MS.AAD.5.1",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaAppRegistration\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"default user authorization policy prevents app creation.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppRegistration.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.5.1: Only administrators SHALL be allowed to register applications.",
        "TestResult": "\nWell done. **[Users can register applications](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserManagementMenuBlade/~/UserSettings/menuId/UserSettings)** is set to **No** in your tenant.\n",
        "TestDescription": "Only administrators SHALL be allowed to register applications.\n\nRationale: Application access for the tenant presents a heightened security risk compared to interactive user access because applications are typically not subject to critical security protections, such as MFA policies. Reduce risk of unauthorized users installing malicious applications into the tenant by ensuring that only specific privileged users can register applications.\n\n#### Remediation action:\n\n1. In **Entra**, under **Identity** and **Users**, select **[User settings](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserManagementMenuBlade/~/UserSettings/menuId/UserSettings)**.\n2. For **Users can register applications**, select **No**.\n3. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - User settings](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserManagementMenuBlade/~/UserSettings/menuId/UserSettings)\n* [CISA Application Registration & Consent - MS.AAD.5.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad51v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L542)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.5.2",
      "Title": "Only administrators SHALL be allowed to consent to applications.",
      "Name": "CISA.MS.AAD.5.2: Only administrators SHALL be allowed to consent to applications.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.5.2",
        "CISA.MS.AAD.5.2",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaAppUserConsent\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"default user authorization policy prevents app consent.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppUserConsent.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because default user authorization policy prevents app consent., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because default user authorization policy prevents app consent., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppUserConsent.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"default user authorization policy prevents app consent.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppUserConsent.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.5.2: Only administrators SHALL be allowed to consent to applications.",
        "TestResult": "\nYour tenant [allows users to consent for applications](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings). The recommended setting is **Do not allow user consent**.\n",
        "TestDescription": "Only administrators SHALL be allowed to consent to applications.\n\nRationale: Limiting applications consent to only specific privileged users reduces risk of users giving insecure applications access to their data via [consent grant attacks](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/detect-and-remediate-illicit-consent-grants?view=o365-worldwide).\n\n#### Remediation action:\n\n1. In **Entra** under **Identity** and **Applications**, select **Enterprise applications**.\n2. Under **Security**, select **Consent and permissions**.\n3. Under **Manage**, select **[User consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)**.\n4. Under **User consent for applications**, select **Do not allow user consent**.\n5. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - Consent and permissions | User consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)\n* [CISA Application Registration & Consent - MS.AAD.5.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad52v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L575)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.5.3",
      "Title": "An admin consent workflow SHALL be configured for applications.",
      "Name": "CISA.MS.AAD.5.3: An admin consent workflow SHALL be configured for applications.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.5.3",
        "CISA.MS.AAD.5.3",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaAppAdminConsent\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"admin consent policy is configured with reviewers.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppAdminConsent.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because admin consent policy is configured with reviewers., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because admin consent policy is configured with reviewers., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppAdminConsent.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"admin consent policy is configured with reviewers.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppAdminConsent.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.5.3: An admin consent workflow SHALL be configured for applications.",
        "TestResult": "\nYour tenant admin consent request policy is not configured.\n",
        "TestDescription": "An admin consent workflow SHALL be configured for applications.\n\nRationale: Configuring an admin consent workflow reduces the risk of the previous policy by setting up a process for users to securely request access to applications necessary for business purposes. Administrators have the opportunity to review the permissions requested by new applications and approve or deny access based on a risk assessment.\n\n#### Remediation action:\n\n1. In **Entra** create a new **Group** that contains admin users responsible for reviewing and adjudicating application consent requests. Group members will be notified when users request consent for new applications.\n2. Then in **Entra** under **Identity** and **Applications**, select **Enterprise applications**.\n3. Under **Security**, select **Consent and permissions**.\n3. Under **Manage**, select **[Admin consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)**.\n5. Under **Admin consent requests** and **Users can request admin consent to apps they are unable to consent to** select **Yes**.\n6. Under **Who can review admin consent requests**, select **+ Add groups** and select the **group** responsible for reviewing and adjudicating app requests **(created in step one above)**.\n7. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - Consent and permissions | Admin consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\n* [CISA Application Registration & Consent - MS.AAD.5.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad53v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L613)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.6.1",
      "Title": "User passwords SHALL NOT expire.",
      "Name": "CISA.MS.AAD.6.1: User passwords SHALL NOT expire.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.6.1",
        "CISA.MS.AAD.6.1",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaPasswordExpiration\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"at least 1 domain has an password expiration policy of 100 years or more.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPasswordExpiration.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.6.1: User passwords SHALL NOT expire.",
        "TestResult": "\nWell done. Your tenant password expiration policy is set to never expire.\n\n| Domain (Default) | Verified | Type | Validation |\n| --- | --- | --- | --- |\n| pora.onmicrosoft.com () | Verified | Managed | ✅ Pass |\n| elapora.com (✔️) | Verified | Managed | ✅ Pass |\n| pora.mail.onmicrosoft.com () | Verified | Managed | ✅ Pass |\n\n",
        "TestDescription": "User passwords SHALL NOT expire.\n\nThe National Institute of Standards and Technology (NIST), OMB, and Microsoft have published guidance indicating mandated periodic password changes make user accounts less secure. For example, OMB-22-09 states, \"Password policies must not require use of special characters or regular rotation.\"\n\n#### Remediation action:\n\nConfigure password policies to set passwords to never expire.\n1. In **[Microsoft 365 admin center](https://admin.cloud.microsoft/)** under **Settings** and **Org settings**, select the tab **Security & privacy**.\n2. Under **[Password expiration policy](https://admin.cloud.microsoft/?#/Settings/SecurityPrivacy/:/Settings/L1/PasswordPolicy)**, set **Set passwords to never expire**.\n3. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 admin center - Org settings | Password expiration policy](https://admin.cloud.microsoft/?#/Settings/SecurityPrivacy/:/Settings/L1/PasswordPolicy)\n* [Configure the **Password expiration policy** ](https://learn.microsoft.com/en-us/microsoft-365/admin/manage/set-password-expiration-policy?view=o365-worldwide#set-password-expiration-policy)\n* [CISA Passwords - MS.AAD.6.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad61v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L723)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.1",
      "Title": "A minimum of two users and a maximum of eight users SHALL be provisioned with the Global Administrator role.",
      "Name": "CISA.MS.AAD.7.1: A minimum of two users and a maximum of eight users SHALL be provisioned with the Global Administrator role.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.1",
        "CISA.MS.AAD.7.1",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaGlobalAdminCount\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"two or more and eight or fewer Global Administrators exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaGlobalAdminCount.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.1: A minimum of two users and a maximum of eight users SHALL be provisioned with the Global Administrator role.",
        "TestResult": "\nWell done. Your tenant has two or more and eight or fewer Global Administrators:\n\n  - [Ann Quinzon](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/2072badc-3cf0-4e84-b4c2-f9c065c46165)\n  - [Merill Fernando](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/513f3db2-044c-41be-af14-431bf88a2b3e)\n  - [Bob Leaf](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/653c7fdd-1b41-4229-992a-69cc35aad4f7)\n  - [Tyler Chan](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/7094fb23-003a-4f81-9796-5daeaa603003)\n  - [Joshua Fernando](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/babe04c9-8340-4329-a727-a8cee0cd2b1a)\n  - [Emergency Access](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/ceef37b7-c865-48fb-80c9-4def11201854)\n  - [Damien Bowden](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/f431700c-6d81-45b8-8f8d-581a8aa7cda6)\n\n",
        "TestDescription": "A minimum of two users and a maximum of eight users SHALL be provisioned with the Global Administrator role.\n\n**Rationale:** The Global Administrator role provides unfettered access to the tenant (Azure and Microsoft 365). Limiting the number of users with this level of access makes tenant compromise more challenging. Microsoft recommends fewer than five users in the Global Administrator role. However, additional user accounts, up to eight, may be necessary to support emergency access and some operational scenarios.\n\n#### Remediation action:\n\nWhen counting the number of users assigned to the Global Administrator role, **count each user only once**.\n\n1. In **Entra** under **Roles & adminis** and **[All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)**, search for **Global Administrator** and click on it to go to the role and see who is assiged. Count users that are assigned directly to the role and users assigned via group membership.\n\n    If you have **Entra ID PIM**, count both the **Eligible assignments** and **Active assignments**.\n\n    If any of the groups assigned to Global Administrator are enrolled in **PIM for Groups**, also count the number of group members from the PIM for Groups portal **Eligible** assignments.\n\n2. Validate that there are a total of two to eight users assigned to the Global Administrator role.\n\n#### Related links\n\n* [Entra admin center - Roles and administrators | All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)\n* [CISA 7.1 Highly Privileged User Access - MS.AAD.7.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad71v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L761)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.2",
      "Title": "Privileged users SHALL be provisioned with finer-grained roles instead of Global Administrator.",
      "Name": "CISA.MS.AAD.7.2: Privileged users SHALL be provisioned with finer-grained roles instead of Global Administrator.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.2",
        "CISA.MS.AAD.7.2",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaGlobalAdminRatio\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"more granular role assignments exist than global admin assignments.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaGlobalAdminRatio.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because more granular role assignments exist than global admin assignments., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because more granular role assignments exist than global admin assignments., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaGlobalAdminRatio.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"more granular role assignments exist than global admin assignments.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaGlobalAdminRatio.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:39",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.2: Privileged users SHALL be provisioned with finer-grained roles instead of Global Administrator.",
        "TestResult": "\nYour tenant does not have enough granular [role assignments](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles).\n\nCurrent Ratio: 7 = 7 / 1\n\nRatio >= 1 - True\n",
        "TestDescription": "Privileged users SHALL be provisioned with finer-grained roles instead of Global Administrator.\n\nRationale: Many privileged administrative users do not need unfettered access to the tenant to perform their duties. By assigning them to roles based on least privilege, the risks associated with having their accounts compromised are reduced.\n\n#### Remediation action:\n\nThis policy is based on the ratio below:\n\n`X = (Number of users assigned to the Global Administrator role) / (Number of users assigned to other highly privileged roles)`\n\n1. Follow the instructions for policy MS.AAD.7.1v1 above to get a count of users assigned to the Global Administrator role.\n2. Follow the instructions for policy MS.AAD.7.1v1 above but get a count of users assigned to the other highly privileged roles (not Global Administrator). If a user is assigned to both Global Administrator and other roles, only count that user for the Global Administrator assignment.\n3. Divide the value from step 2 from the value from step 1 to calculate X. If X is less than or equal to 1 then the tenant is compliant with the policy.\n\n#### Related links\n\n* [CISA 7.2 Highly Privileged User Access - MS.AAD.7.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad72v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L792)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.3",
      "Title": "Privileged users SHALL be provisioned cloud-only accounts separate from an on-premises directory or other federated identity providers.",
      "Name": "CISA.MS.AAD.7.3: Privileged users SHALL be provisioned cloud-only accounts separate from an on-premises directory or other federated identity providers.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.3",
        "CISA",
        "CISA.MS.AAD.7.3",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaCloudGlobalAdmin\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"no hybrid Global Administrators exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaCloudGlobalAdmin.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:11",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.3: Privileged users SHALL be provisioned cloud-only accounts separate from an on-premises directory or other federated identity providers.",
        "TestResult": "\nWell done. Your tenant has no hybrid Global Administrators.\n",
        "TestDescription": "Privileged users SHALL be provisioned cloud-only accounts separate from an on-premises directory or other federated identity providers.\n\nRationale: Many privileged administrative users do not need unfettered access to the tenant to perform their duties. By assigning them to roles based on least privilege, the risks associated with having their accounts compromised are reduced.\n\n#### Remediation action:\n\n1. Perform the steps below for each [highly privileged role](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles).\n2. Review the users listed that have an **OnPremisesImmutableId** and have **OnPremisesSyncEnabled** set.\n3. Create a cloud only user account for that individual and remove their hybrid identity from privileged roles.\n\n#### Related links\n\n* [Entra admin center - Roles and administrators | All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)\n* [CISA 7.3 Highly Privileged User Access - MS.AAD.7.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad73v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L833)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.4",
      "Title": "Permanent active role assignments SHALL NOT be allowed for highly privileged roles.",
      "Name": "CISA.MS.AAD.7.4: Permanent active role assignments SHALL NOT be allowed for highly privileged roles.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.4",
        "CISA.MS.AAD.7.4",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaPermanentRoleAssignment\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"no permanently active privileged role assignments exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPermanentRoleAssignment.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because no permanently active privileged role assignments exist., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because no permanently active privileged role assignments exist., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPermanentRoleAssignment.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"no permanently active privileged role assignments exist.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaPermanentRoleAssignment.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:30",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.4: Permanent active role assignments SHALL NOT be allowed for highly privileged roles.",
        "TestResult": "\nYour tenant has active assignments without expiration to privileged roles.\n",
        "TestDescription": "Permanent active role assignments SHALL NOT be allowed for highly privileged roles.\n\nRationale: Instead of giving users permanent assignments to privileged roles, provisioning access just in time lessens exposure if those accounts become compromised. In Azure AD PIM or an alternative PAM system, just in time access can be provisioned by assigning users to roles as eligible instead of perpetually active.\n\nNote: Exceptions to this policy are:\n* **Emergency access** accounts that need **perpetual access** to the tenant in the rare event of system degradation or other scenarios.\n* Some types of **service accounts** that require a user account with privileged roles; since these accounts are used by software programs, they **cannot** perform role activation.\n\n#### Remediation action:\n\n1. In **Entra admin center** select **Show more** and **Roles & adminis** and then **[All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)**.\n\n    Perform the steps below for each highly privileged role. We reference the Global Administrator role as an example.\n\n2. Select the **Global administrator** role.\n3. Under **Manage**, select **Assignments** and click the **Active assignments** tab.\n4. Verify there are no users or groups with a value of **Permanent** in the **End time** column. If there are any, recreate those assignments to have an expiration date using Entra ID PIM or an alternative PAM system. If a group is identified and it is enrolled in PIM for Groups, see the exception cases below for details.\n\n#### Related links\n\n* [Entra admin center - Roles and administrators | All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)\n* [CISA 7.4 Highly Privileged User Access - MS.AAD.7.4v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad74v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L856)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.5",
      "Title": "Provisioning users to highly privileged roles SHALL NOT occur outside of a PAM system.",
      "Name": "CISA.MS.AAD.7.5: Provisioning users to highly privileged roles SHALL NOT occur outside of a PAM system.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.5",
        "CISA.MS.AAD.7.5",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaUnmanagedRoleAssignment\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"no unmanaged active role assignments exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaUnmanagedRoleAssignments.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.5: Provisioning users to highly privileged roles SHALL NOT occur outside of a PAM system.",
        "TestResult": "\nWell done. Your tenant has no unmanaged active role assignments.\n",
        "TestDescription": "Provisioning users to highly privileged roles SHALL NOT occur outside of a PAM system.\n\nRationale: Provisioning users to privileged roles within a PAM system enables enforcement of numerous privileged access policies and monitoring. If privileged users are assigned directly to roles in the M365 admin center or via PowerShell outside of the context of a PAM system, a significant set of critical security capabilities are bypassed.\n\n#### Remediation action:\n\n1. In **Entra admin center** select **Show more** > **Roles & admins** and then select **[All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)**.\n\n    Perform the steps below for each highly privileged role. We reference the **Global Administrator** role as an example.\n\n2. Select the **Global administrator** role.\n3. Under **Manage**, select **Assignments** and click the **Active assignments** tab.\n4. For each user or group listed, examine the value in the Start time column. If it contains a value of -, this indicates the respective user/group was assigned to that role outside of Entra ID PIM. If the role was assigned outside of Entra ID PIM, delete the assignment and recreate it using Entra ID PIM.\n\n#### Related links\n\n* [Entra admin center - Roles and administrators | All roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\n* [CISA 7.5 Highly Privileged User Access - MS.AAD.7.5v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad75v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L907)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.6",
      "Title": "Activation of the Global Administrator role SHALL require approval.",
      "Name": "CISA.MS.AAD.7.6: Activation of the Global Administrator role SHALL require approval.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.6",
        "CISA.MS.AAD.7.6",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaRequireActivationApproval\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"the Global Administrator role requires approval for activation.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaRequireActivationApproval.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the Global Administrator role requires approval for activation., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the Global Administrator role requires approval for activation., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaRequireActivationApproval.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"the Global Administrator role requires approval for activation.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaRequireActivationApproval.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.6: Activation of the Global Administrator role SHALL require approval.",
        "TestResult": "\nYour tenant has active assignments without a start date.\n",
        "TestDescription": "Activation of the Global Administrator role SHALL require approval.\n\nRationale: Requiring approval for a user to activate Global Administrator, which provides unfettered access, makes it more challenging for an attacker to compromise the tenant with stolen credentials and it provides visibility of activities indicating a compromise is taking place.\n\n#### Remediation action:\n\n1. In **Entra admin center** select **Identity governance** and **Privileged Identity Management**.\n2. Under **Manage**, select **Microsoft Entra roles**.\n3. Under **Manage**, select **[Roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)**.\n4. Select the **Global Administrator** role in the list.\n5. Click **Settings**.\n6. Click **Edit**.\n7. Select the **Require approval to activate** option.\n8. Click **Update**.\n9. Review the list of groups that are actively assigned to the **Global Administrator** role. If any of the groups are enrolled in PIM for Groups, then also apply the same configurations under step 2 above to each PIM group's Member settings.\n\n#### Related links\n\n* [Entra admin center - Privileged Identity Management | Microsoft Entra roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\n* [CISA 7.6 Highly Privileged User Access - MS.AAD.7.6v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad76v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L938)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.7",
      "Title": "Eligible and Active highly privileged role assignments SHALL trigger an alert.",
      "Name": "CISA.MS.AAD.7.7: Eligible and Active highly privileged role assignments SHALL trigger an alert.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.7",
        "CISA.MS.AAD.7.7",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaAssignmentNotification\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"highly privileged roles are set to notify on assignment.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAssignmentNotification.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because highly privileged roles are set to notify on assignment., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because highly privileged roles are set to notify on assignment., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAssignmentNotification.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"highly privileged roles are set to notify on assignment.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAssignmentNotification.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.7: Eligible and Active highly privileged role assignments SHALL trigger an alert.",
        "TestResult": "\nYour tenant has highly privileged roles without notifications.\n",
        "TestDescription": "Eligible and Active highly privileged role assignments SHALL trigger an alert.\n\nRationale: Closely monitor assignment of the highest privileged roles for signs of compromise. Send assignment alerts to enable the security monitoring team to detect compromise attempts.\n\n#### Remediation action:\n\n1. In **Entra admin center** select **Identity governance** and **Privileged Identity Management**.\n2. Under **Manage**, select **Microsoft Entra roles**.\n3. Under **Manage**, select **[Roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)**.\n\n    Perform the steps below for each highly privileged role. We reference the Global Administrator role as an example.\n\n4. Click the **Global Administrator** role.\n5. Click **Settings** and then click **Edit**.\n6. Click the **Notifications** tab.\n7. Under **Send notifications when members are assigned as eligible to this role**, in the **Role assignment alert** > **Additional recipients** textbox, enter the email address of the security monitoring mailbox configured to receive privileged role assignment alerts.\n8. Under **Send notifications when members are assigned as active to this role**, in the **Role assignment alert** > **Additional recipients** textbox, enter the email address of the security monitoring mailbox configured to receive privileged role assignment alerts.\n9. Click **Update**.\n10. For each of the highly privileged roles, if they have any PIM groups actively assigned to them, then also apply the same configurations per the steps above to each PIM group's **Member** settings.\n\n#### Related links\n\n* [Entra admin center - Privileged Identity Management | Microsoft Entra roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\n* [CISA 7.7 Highly Privileged User Access - MS.AAD.7.7v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad77v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L974)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.8",
      "Title": "User activation of the Global Administrator role SHALL trigger an alert.",
      "Name": "CISA.MS.AAD.7.8: User activation of the Global Administrator role SHALL trigger an alert.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.8",
        "CISA.MS.AAD.7.8",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaActivationNotification -GlobalAdminOnly\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"notifications are set for activation of the Global Admin role.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaActivationNotificationGlobalAdmin.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because notifications are set for activation of the Global Admin role., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because notifications are set for activation of the Global Admin role., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaActivationNotificationGlobalAdmin.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"notifications are set for activation of the Global Admin role.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaActivationNotificationGlobalAdmin.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:04",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.8: User activation of the Global Administrator role SHALL trigger an alert.",
        "TestResult": "\nYour tenant does not have notifications on [role activations](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles).\n\n| Role Name | Result |\n| --- | --- |\n| Global Administrator | ❌ Fail |\n\n",
        "TestDescription": "User activation of the Global Administrator role SHALL trigger an alert.\n\nRationale: Closely monitor activation of the Global Administrator role for signs of compromise. Send activation alerts to enable the security monitoring team to detect compromise attempts.\n\nUser activation of other highly privileged roles SHOULD trigger an alert.\n\nRationale: Closely monitor activation of high-risk roles for signs of compromise. Send activation alerts to enable the security monitoring team to detect compromise attempts. In some environments, activating privileged roles can generate a significant number of alerts.\n\n#### Remediation action:\n\n1. In **Entra admin center** select **Identity governance** and **Privileged Identity Management**.\n2. Under **Manage**, select **Microsoft Entra roles**.\n3. Under **Manage**, select **[Roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)**.\n4. Search and click the **Global Administrator** role.\n\n    For each of the highly privileged roles (other than Global Administrator), follow the same steps but enter a security monitoring mailbox different from the one used to monitor Global Administrator activations.\n\n5. Click **Settings** and then click **Edit**.\n6. Click the **Notifications** tab.\n7. Under **Send notifications when eligible members activate this role**, in the **Role activation alert** > **Additional recipients** textbox, enter the email address of the security monitoring mailbox configured to receive role activation alerts.\n8. Click **Update**.\n9. If the role has any PIM groups actively assigned to it, then also apply the same configurations per the steps above to each PIM group's **Member** settings.\n\n#### Related links\n\n* [Entra admin center - Privileged Identity Management | Microsoft Entra roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\n* [CISA 7.8 Highly Privileged User Access - MS.AAD.7.8v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad78v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1022)\n* [CISA 7.9 Highly Privileged User Access - MS.AAD.7.9v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad78v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1057)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.7.9",
      "Title": "User activation of other highly privileged roles SHOULD trigger an alert.",
      "Name": "CISA.MS.AAD.7.9: User activation of other highly privileged roles SHOULD trigger an alert.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.9",
        "CISA.MS.AAD.7.9",
        "CISA",
        "Security",
        "All",
        "Entra ID P2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaActivationNotification\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"notifications are set for activation of highly privileged roles.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaActivationNotificationOther.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because notifications are set for activation of highly privileged roles., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because notifications are set for activation of highly privileged roles., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaActivationNotificationOther.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"notifications are set for activation of highly privileged roles.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaActivationNotificationOther.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:33",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.7.9: User activation of other highly privileged roles SHOULD trigger an alert.",
        "TestResult": "\nYour tenant does not have notifications on [role activations](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles).\n\n| Role Name | Result |\n| --- | --- |\n| User Administrator | ❌ Fail |\n| Exchange Administrator | ❌ Fail |\n| SharePoint Administrator | ❌ Fail |\n| Application Administrator | ❌ Fail |\n| Privileged Role Administrator | ❌ Fail |\n| Cloud Application Administrator | ❌ Fail |\n| Hybrid Identity Administrator | ❌ Fail |\n\n",
        "TestDescription": "User activation of the Global Administrator role SHALL trigger an alert.\n\nRationale: Closely monitor activation of the Global Administrator role for signs of compromise. Send activation alerts to enable the security monitoring team to detect compromise attempts.\n\nUser activation of other highly privileged roles SHOULD trigger an alert.\n\nRationale: Closely monitor activation of high-risk roles for signs of compromise. Send activation alerts to enable the security monitoring team to detect compromise attempts. In some environments, activating privileged roles can generate a significant number of alerts.\n\n#### Remediation action:\n\n1. In **Entra admin center** select **Identity governance** and **Privileged Identity Management**.\n2. Under **Manage**, select **Microsoft Entra roles**.\n3. Under **Manage**, select **[Roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)**.\n4. Search and click the **Global Administrator** role.\n\n    For each of the highly privileged roles (other than Global Administrator), follow the same steps but enter a security monitoring mailbox different from the one used to monitor Global Administrator activations.\n\n5. Click **Settings** and then click **Edit**.\n6. Click the **Notifications** tab.\n7. Under **Send notifications when eligible members activate this role**, in the **Role activation alert** > **Additional recipients** textbox, enter the email address of the security monitoring mailbox configured to receive role activation alerts.\n8. Click **Update**.\n9. If the role has any PIM groups actively assigned to it, then also apply the same configurations per the steps above to each PIM group's **Member** settings.\n\n#### Related links\n\n* [Entra admin center - Privileged Identity Management | Microsoft Entra roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\n* [CISA 7.8 Highly Privileged User Access - MS.AAD.7.8v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad78v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1022)\n* [CISA 7.9 Highly Privileged User Access - MS.AAD.7.9v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad78v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1057)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.8.1",
      "Title": "Guest users SHOULD have limited or restricted access to Azure AD directory objects.",
      "Name": "CISA.MS.AAD.8.1: Guest users SHOULD have limited or restricted access to Azure AD directory objects.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.8.1",
        "CISA.MS.AAD.8.1",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-MtCisaGuestUserAccess\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"guest users have appropriate role.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaGuestUserAccess.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.8.1: Guest users SHOULD have limited or restricted access to Azure AD directory objects.",
        "TestResult": "\nWell done. Guest user access is restricted to properties and memberships of their own directory objects (most restrictive)\n",
        "TestDescription": "Guest users SHOULD have limited or restricted access to Azure AD directory objects.\n\nRationale: Limiting the amount of object information available to guest users in the tenant, reduces malicious reconnaissance exposure, should a guest account become compromised or be created by an adversary.\n\n#### Remediation action\n\n1. In **Entra ID** and **External Identities**, select **[External collaboration settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings/menuId/Settings)**.\n2. Under **Guest user access**, select either **Guest users have limited access to properties and memberships of directory objects** or **Guest user access is restricted to properties and memberships of their own directory objects (most restrictive)**.\n3. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - External Identities | External collaboration settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings/menuId/Settings)\n* [CISA Guest User Access - MS.AAD.8.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad81v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1100)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.8.2",
      "Title": "Only users with the Guest Inviter role SHOULD be able to invite guest users.",
      "Name": "CISA.MS.AAD.8.2: Only users with the Guest Inviter role SHOULD be able to invite guest users.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.8.2",
        "CISA.MS.AAD.8.2",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaGuestInvitation\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"guest invitations are restricted to admins.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaGuestInvitation.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because guest invitations are restricted to admins., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because guest invitations are restricted to admins., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaGuestInvitation.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"guest invitations are restricted to admins.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaGuestInvitation.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.8.2: Only users with the Guest Inviter role SHOULD be able to invite guest users.",
        "TestResult": "\nYour tenant allows anyone to invite guests.\n\nallowInvitesFrom : adminsGuestInvitersAndAllMembers\n",
        "TestDescription": "Only users with the Guest Inviter role SHOULD be able to invite guest users.\n\nRationale: By only allowing an authorized group of individuals to invite external users to create accounts in the tenant, an agency can enforce a guest user account approval process, reducing the risk of unauthorized account creation.\n\n#### Remediation action:\n\n1. In **Entra ID** and **External Identities**, select **[External collaboration settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings/menuId/Settings)**.\n2. Under **Guest invite settings**, select **Only users assigned to specific admin roles can invite guest users** or **No one in the organization can invite guest users including admins (most restrictive)**.\n\n3. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - External Identities | External collaboration settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings/menuId/Settings)\n* [CISA Guest User Access - MS.AAD.8.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad82v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1157)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.8.3",
      "Title": "Guest invites SHOULD only be allowed to specific external domains that have been authorized by the agency for legitimate business purposes.",
      "Name": "CISA.MS.AAD.8.3: Guest invites SHOULD only be allowed to specific external domains that have been authorized by the agency for legitimate business purposes.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.8.3",
        "CISA",
        "CISA.MS.AAD.8.3",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtCisaCrossTenantInboundDefault\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"default inbound cross-tenant access policy is set to block.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaCrossTenantInboundDefault.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because default inbound cross-tenant access policy is set to block., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because default inbound cross-tenant access policy is set to block., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaCrossTenantInboundDefault.Tests.ps1",
            "Line": "6",
            "LineText": "            $result | Should -Be $true -Because \"default inbound cross-tenant access policy is set to block.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaCrossTenantInboundDefault.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.8.3: Guest invites SHOULD only be allowed to specific external domains that have been authorized by the agency for legitimate business purposes.",
        "TestResult": "\nYour tenant's default cross-tenant inbound access policy is not set to block:\n\n| External Users & Groups | Applications |\n| --- | --- |\n| ❌ Fail | ❌ Fail |\n\n",
        "TestDescription": "Guest invites SHOULD only be allowed to specific external domains that have been authorized by the agency for legitimate business purposes.\n\nRationale: Limiting which domains can be invited to create guest accounts in the tenant helps reduce the risk of users from unauthorized external organizations getting access.\n\n> ⚠️ WARNING: This test utilizes a technical mechanism that differs from CISA's, though the outcome is the same.\n\n#### Remediation action:\n\n1. In **Entra admin center** select **External Identities** and **Cross-tenant access settings**.\n2. Under **Default settings**, select [**Edit inbound defaults**](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/InboundAccessSettings.ReactView/isDefault~/true/name//id/).\n3. Under **B2B collaboration**, and **External users and groups**, ensure **Access status** is set to **Block access**.\n4. Under **B2B collaboration**, and **Applications**, ensure **Access status** is set to **Block access**.\n\n> This configuration will **only** allow B2B collaboration with other Entra tenants.\n\n#### Related links\n\n* [Entra admin center - External Identities | Cross-tenant access settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/InboundAccessSettings.ReactView/isDefault~/true/name//id/)\n* [CISA 8 Guest User Access - MS.AAD.8.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad83v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1190)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.03.1",
      "Title": "DKIM SHOULD be enabled for all domains.",
      "Name": "CISA.MS.EXO.03.1: DKIM SHOULD be enabled for all domains.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.3.1",
        "CISA.MS.EXO.03.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $cisaDkim = Test-MtCisaDkim\n\n        if ($null -ne $cisaDkim) {\n            $cisaDkim | Should -Be $true -Because \"DKIM record should exist and be configured.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDkim.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because DKIM record should exist and be configured., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because DKIM record should exist and be configured., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDkim.Tests.ps1",
            "Line": "6",
            "LineText": "            $cisaDkim | Should -Be $true -Because \"DKIM record should exist and be configured.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDkim.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.03.1: DKIM SHOULD be enabled for all domains.",
        "TestResult": "\nYour tenant's domains do not have DKIM fully deployed. Review [EXO configuration](https://security.microsoft.com/authentication?viewid=DKIM) and DNS records.\n\n| Domain | Result | Reason |\n| --- | --- | --- |\n| elapora.com | ❌ Fail | Failure to obtain record |\n| pora.mail.onmicrosoft.com | ❌ Fail | Failure to obtain record |\n| pora.onmicrosoft.com | ❌ Fail | Failure to obtain record |\n",
        "TestDescription": "DKIM SHOULD be enabled for all domains.\n\nRationale: An adversary may modify the `FROM` field of an email such that it appears to be a legitimate email sent by an agency, facilitating phishing attacks. Enabling DKIM is another means for recipients to detect spoofed emails and verify the integrity of email content.\n\n#### Remediation action:\n\nTo enable DKIM, follow the instructions listed on [Steps to Create, enable and disable DKIM from Microsoft 365 Defender portal | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/email-authentication-dkim-configure?view=o365-worldwide#steps-to-create-enable-and-disable-dkim-from-microsoft-365-defender-portal).\n\n#### Related links\n\n* [Defender admin center - Email authentication settings](https://security.microsoft.com/authentication?viewid=DKIM)\n* [CISA 3 Sender Policy Framework - MS.EXO.3.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo31v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L107)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.06.1",
      "Title": "Contact folders SHALL NOT be shared with all domains.",
      "Name": "CISA.MS.EXO.06.1: Contact folders SHALL NOT be shared with all domains.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.6.1",
        "CISA.MS.EXO.06.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $cisaContactSharing = Test-MtCisaContactSharing\n\n        if($null -ne $cisaContactSharing) {\n            $cisaContactSharing | Should -Be $true -Because \"contact sharing is disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaContactSharing.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.06.1: Contact folders SHALL NOT be shared with all domains.",
        "TestResult": "\nWell done. Your tenant does not allow uncontrolled contact sharing.\n\n| Policy Name | Test Result |\n| --- | --- |\n| [Default Sharing Policy](https://admin.exchange.microsoft.com/#/individualsharing/:/individualsharingdetails/9f930793-eb38-4b6b-a78f-eea3b908f21e/managedomain) | ✅ Pass |\n",
        "TestDescription": "Contact folders SHALL NOT be shared with all domains.\n\nRationale: Contact folders may contain information that should not be shared by default with all domains. Disabling sharing with all domains closes an avenue for data exfiltration while still allowing for specific legitimate use as needed.\n\n#### Remediation action:\n\nTo restrict sharing with all domains:\n1. Sign in to the **Exchange admin center**.\n2. On the left-hand pane under **Organization**, select **Sharing**.\n3. Select [**Individual Sharing**](https://admin.exchange.microsoft.com/#/individualsharing).\n4. For all existing policies, select the policy, then select **Manage domains**.\n5. For all sharing rules under all existing policies, ensure **Sharing with everyone** and **Anonymous** do not include ContactsSharing.\n\n#### Related links\n\n* [Exchange admin center - Individual Sharing](https://admin.exchange.microsoft.com/#/individualsharing)\n* [CISA 6 Calendar and Contact Sharing - MS.EXO.6.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo61v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L335)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.06.2",
      "Title": "Calendar details SHALL NOT be shared with all domains.",
      "Name": "CISA.MS.EXO.06.2: Calendar details SHALL NOT be shared with all domains.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.6.2",
        "CISA.MS.EXO.06.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $cisaCalendarSharing = Test-MtCisaCalendarSharing\n\n        if($null -ne $cisaCalendarSharing) {\n            $cisaCalendarSharing | Should -Be $true -Because \"calendar sharing is disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaCalendarSharing.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because calendar sharing is disabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because calendar sharing is disabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaCalendarSharing.Tests.ps1",
            "Line": "7",
            "LineText": "            $cisaCalendarSharing | Should -Be $true -Because \"calendar sharing is disabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaCalendarSharing.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.06.2: Calendar details SHALL NOT be shared with all domains.",
        "TestResult": "\nYour tenant allows uncontrolled calendar sharing.\n\n| Policy Name | Test Result |\n| --- | --- |\n| [Default Sharing Policy](https://admin.exchange.microsoft.com/#/individualsharing/:/individualsharingdetails/9f930793-eb38-4b6b-a78f-eea3b908f21e/managedomain) | ❌ Fail |\n",
        "TestDescription": "Calendar details SHALL NOT be shared with all domains.\n\nRationale: Calendar details may contain information that should not be shared by default with all domains. Disabling sharing with all domains closes an avenue for data exfiltration while still allowing for legitimate use as needed.\n\n#### Remediation action:\n\nTo restrict sharing with all domains:\n1. Sign in to the **Exchange admin center**.\n2. On the left-hand pane under **Organization**, select **Sharing**.\n3. Select [**Individual Sharing**](https://admin.exchange.microsoft.com/#/individualsharing).\n4. For all existing policies, select the policy, then select **Manage domains**.\n5. For all sharing rules under all existing policies, ensure **Sharing with everyone** and **Anonymous** do not include CalendarSharing.\n\n#### Related links\n\n* [Exchange admin center - Individual Sharing](https://admin.exchange.microsoft.com/#/individualsharing)\n* [Microsoft 365 admin center - Org settings - Calendar](https://admin.microsoft.com/#/Settings/Services/:/Settings/L1/Calendar)\n* [CISA 6 Calendar and Contact Sharing - MS.EXO.6.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo62v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L368)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.07.1",
      "Title": "External sender warnings SHALL be implemented.",
      "Name": "CISA.MS.EXO.07.1: External sender warnings SHALL be implemented.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.7.1",
        "CISA.MS.EXO.07.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $cisaExternalSenderWarning = Test-MtCisaExternalSenderWarning\n\n        if ($null -ne $cisaExternalSenderWarning) {\n            $cisaExternalSenderWarning | Should -Be $true -Because \"external sender warning is set.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaExternalSenderWarning.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because external sender warning is set., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because external sender warning is set., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaExternalSenderWarning.Tests.ps1",
            "Line": "7",
            "LineText": "            $cisaExternalSenderWarning | Should -Be $true -Because \"external sender warning is set.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaExternalSenderWarning.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.07.1: External sender warnings SHALL be implemented.",
        "TestResult": "\nYour tenant does not have an external sender warning.\n\n\n",
        "TestDescription": "External sender warnings SHALL be implemented.\n\nRationale: Phishing is an ever-present threat. Alerting users when email originates from outside their organization can encourage them to exercise increased caution, especially if an email is one they expected from an internal sender.\n\n> ⚠️ WARNING: This test allows the use of a technical mechanism that differs from CISA's, though the outcome is the same.\n\n#### Remediation action:\n\n##### Option 1: Use external sender identification\n\nThis feature is only available for Outlook, Outlook for Mac, Outlook on the web, and Outlook for iOS and Android.\n\n1. Connect to Exchange Online using PowerShell module `ExchangeOnlineManagement`\n2. Enable the feature with the cmdlet `Set-ExternalInOutlook`\n\n```powershell\nInstall-Module -Name ExchangeOnlineManagement\nConnect-ExchangeOnline\nSet-ExternalInOutlook -Enabled $true\n```\n\n##### Option 2: Prepend subject with \"[External]\"\n\nTo create a mail flow rule to produce external sender warnings:\n1. Sign in to the **Exchange admin center**.\n2. Under **Mail flow**, select [**Rules**](https://admin.exchange.microsoft.com/#/transportrules).\n3. Click the plus (+) button to create a new rule.\n4. Select **Modify messages…**.\n5. Give the rule an appropriate name.\n6. Under **Apply this rule if…**, select **The sender is external/internal**.\n7. Under **select sender location**, select **Outside the organization**, then click **OK**.\n8. Under **Do the following…**, select **Prepend the subject of the message with…**.\n9. Under **specify subject prefix**, enter a message such as \"[External]\" (without the quotation marks), then click **OK**.\n10. Click **Next**.\n11. Under **Choose a mode for this rule**, select **Enforce**.\n12. Leave the **Severity** as **Not Specified**.\n13. Leave the **Match sender address in message** as **Header** and click **Next**.\n14. Click **Finish** and then **Done**.\n15. The new rule will be disabled. Re-select the new rule to show its settings and slide the **Enable or disable rule** slider to the right until it shows as **Enabled**.\n\n#### Related links\n\n* [Exchange admin center - Mail Flow Rules](https://admin.exchange.microsoft.com/#/transportrules)\n* [CISA 7 External Sender Warnings - MS.EXO.7.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo71v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L405)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.08.1",
      "Title": "A DLP solution SHALL be used.",
      "Name": "CISA.MS.EXO.08.1: A DLP solution SHALL be used.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.8.1",
        "CISA.MS.EXO.08.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $cisaDlp = Test-MtCisaDlp\n\n        if ($null -ne $cisaDlp) {\n            $cisaDlp | Should -Be $true -Because \"DLP is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlp.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because DLP is enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because DLP is enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlp.Tests.ps1",
            "Line": "7",
            "LineText": "            $cisaDlp | Should -Be $true -Because \"DLP is enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlp.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:05",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.08.1: A DLP solution SHALL be used.",
        "TestResult": "\nYour tenant does not have [Purview Data Loss Prevention Policies](https://purview.microsoft.com/datalossprevention/policies) enabled.\n\n",
        "TestDescription": "A DLP solution SHALL be used.\n\nRationale: Users may inadvertently disclose sensitive information to unauthorized individuals. A DLP solution may detect the presence of sensitive information in Exchange Online and block access to unauthorized entities.\n\n#### Remediation action:\n\n1. Sign in to the **Microsoft Purview compliance portal**.\n2. Under the **Solutions** section, select **Data loss prevention**.\n3. Select [**Policies**](https://purview.microsoft.com/datalossprevention/policies) from the left menu.\n4. Select **Create policy**.\n5. From the **Categories** list, select **Custom**.\n6. From the **Templates** list, select **Custom policy** and then click **Next**.\n7. Edit the name and description of the policy if desired, then click **Next**.\n8. Under **Choose locations to apply the policy**, set **Status** to **On** for at least the Exchange email, OneDrive accounts, SharePoint sites, Teams chat and channel messages, and Devices locations, then click **Next**.\n9. Under **Define policy settings**, select **Create or customize advanced DLP rules**, and then click **Next**.\n10. Click **Create rule**. Assign the rule an appropriate name and description.\n11. Click **Add condition**, then **Content contains**.\n12. Click **Add**, then **Sensitive info types**.\n13. Add information types that protect information sensitive to the agency.\n\n    At a minimum, the agency should protect:\n    - Credit card numbers\n    - U.S. Individual Taxpayer Identification Numbers (ITIN)\n    - U.S. Social Security Numbers (SSN)\n    - All agency-defined PII and sensitive information\n\n14. Click **Add**.\n15. Under **Actions**, click **Add an action**.\n16. Check **Restrict Access or encrypt the content in Microsoft 365 locations**.\n17. Under this action, select **Block Everyone**.\n18. Under **User notifications**, turn on **Use notifications to inform your users and help educate them on the proper use of sensitive info**.\n19. Under **Microsoft 365 services**, a section that appears after user notifications are turned on, check the box next to **Notify users in Office 365 service with a policy tip**.\n20. Click **Save**, then **Next**.\n21. Select **Turn it on right away**, then click **Next**.\n22. Click **Submit**.\n\n#### Related links\n\n* [Purview admin center - Data loss prevention policies](https://purview.microsoft.com/datalossprevention/policies)\n* [CISA 8 Data Loss Prevention Solutions - MS.EXO.8.1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo81v2)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L439)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.09.3",
      "Title": "Disallowed file types SHALL be determined and enforced.",
      "Name": "CISA.MS.EXO.09.3: Disallowed file types SHALL be determined and enforced.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.9.3",
        "CISA.MS.EXO.09.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaAttachmentFileType\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"preset policies are enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaBlockFileType.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaBlockFileType.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"preset policies are enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaBlockFileType.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.09.3: Disallowed file types SHALL be determined and enforced.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | File Filter Enabled |\n| --- | --- |\n| Default | ✅ Pass |\n",
        "TestDescription": "The attachment filter SHOULD attempt to determine the true file type and assess the file extension.\n\nRationale: Users can change a file extension at the end of a file name (e.g., notepad.exe to notepad.txt) to obscure the actual file type. Verifying the file type and checking that this matches the designated file extension can help detect instances where the file extension was changed.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select [**Preset Security Policies**](https://security.microsoft.com/presetSecurityPolicies).\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 9 Attachment File Type - MS.EXO.9.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo92v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L502)\n* [Microsoft Learn - True type matching in the common attachments filter](https://learn.microsoft.com/en-us/defender-office-365/anti-malware-protection-about#true-type-matching-in-the-common-attachments-filter)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.09.5",
      "Title": "At a minimum, click-to-run files SHOULD be blocked (e.g., .exe, .cmd, and .vbe).",
      "Name": "CISA.MS.EXO.09.5: At a minimum, click-to-run files SHOULD be blocked (e.g., .exe, .cmd, and .vbe).",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.9.5",
        "CISA.MS.EXO.09.5",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaBlockExecutable\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"preset policies are enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaBlockExecutable.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaBlockExecutable.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"preset policies are enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaBlockExecutable.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.09.5: At a minimum, click-to-run files SHOULD be blocked (e.g., .exe, .cmd, and .vbe).",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | File Filter Enabled | Extensions |\n| --- | --- | --- |\n| Default | ✅ Pass | cmd, exe, vbe |\n",
        "TestDescription": "At a minimum, click-to-run files SHOULD be blocked (e.g., .exe, .cmd, and .vbe).\n\nRationale: Malicious attachments often take the form of click-to-run files. Blocking a list of common executable files helps mitigate the risk of adversarial exploitation.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 9 Attachment File Type - MS.EXO.9.5v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo95v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L547)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.1.1",
      "Title": "Automatic forwarding to external domains SHALL be disabled.",
      "Name": "CISA.MS.EXO.1.1: Automatic forwarding to external domains SHALL be disabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.1.1",
        "CISA.MS.EXO.1.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $cisaAutoExternalForwarding = Test-MtCisaAutoExternalForwarding\n\n        if($null -ne $cisaAutoExternalForwarding) {\n            $cisaAutoExternalForwarding | Should -Be $true -Because \"auto forwarding is not enabled for any domains\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAutoExternalForwarding.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.1.1: Automatic forwarding to external domains SHALL be disabled.",
        "TestResult": "\nWell done. Your tenant has [automatic forwarding](https://admin.exchange.microsoft.com/#/remotedomains) disabled for all domains.\n\n| Name | Domain | Automatic forwarding | Test Result |\n| --- | --- | --- | --- |\n| [abc](https://admin.exchange.microsoft.com/#/remotedomains) | abc.com | Not allow automatic forwarding | ✅ Pass |\n| [Default](https://admin.exchange.microsoft.com/#/remotedomains) | * | Not allow automatic forwarding | ✅ Pass |\n| [mytest](https://admin.exchange.microsoft.com/#/remotedomains) | mytest.com | Not allow automatic forwarding | ✅ Pass |\n",
        "TestDescription": "Automatic forwarding to external domains SHALL be disabled.\n\nRationale: Adversaries can use automatic forwarding to gain persistent access to a victim's email. Disabling forwarding to external domains prevents this technique when the adversary is external to the organization but does not impede legitimate internal forwarding.\n\n#### Remediation action:\n\nTo disable automatic forwarding to external domains:\n\n1. Sign in to the **Exchange admin center**.\n2. Select **Mail flow**, then **[Remote domains](https://admin.exchange.microsoft.com/#/remotedomains)**.\n3. Select **Default**.\n4. Under **Email reply types**, select **Edit reply types**.\n5. Clear the checkbox next to **Allow automatic forwarding**, then click **Save**.\n6. Return to **Remote domains** and repeat steps 4 and 5 for each additional remote domain in the list.\n\n#### Related links\n\n* [Exchange admin center - Remote domains](https://admin.exchange.microsoft.com/#/remotedomains)\n* [CISA 1 Automatic Forwarding to External Domains - MS.EXO.1.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo11v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L28)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.10.1",
      "Title": "Emails SHALL be scanned for malware.",
      "Name": "CISA.MS.EXO.10.1: Emails SHALL be scanned for malware.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.10.1",
        "CISA.MS.EXO.10.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaAttachmentFilter\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"malware scanning policy exists.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareScan.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because malware scanning policy exists., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because malware scanning policy exists., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareScan.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"malware scanning policy exists.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareScan.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.10.1: Emails SHALL be scanned for malware.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | File Filter Enabled | Extensions |\n| --- | --- | --- |\n| Default | ✅ Pass | ace, apk, app, appx, ani, & 48 others |\n",
        "TestDescription": "Emails SHALL be filtered by attachment file types.\n\nRationale: Malicious attachments often take the form of click-to-run files. Sharing high risk file types, when necessary, is better left to a means other than email; the dangers of allowing them to be sent over email outweigh any potential benefits. Filtering email attachments based on file types can prevent spread of malware distributed via click-to-run email attachments.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 9 Attachment File Type - MS.EXO.9.1v2](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo91v2)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L487)\n* [Microsoft Learn - Common attachments filter in anti-malware policies](https://learn.microsoft.com/en-us/defender-office-365/anti-malware-protection-about#common-attachments-filter-in-anti-malware-policies)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.10.2",
      "Title": "Emails identified as containing malware SHALL be quarantined or dropped.",
      "Name": "CISA.MS.EXO.10.2: Emails identified as containing malware SHALL be quarantined or dropped.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.10.2",
        "CISA.MS.EXO.10.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaMalwareAction\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"policies exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareAction.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because policies exist., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because policies exist., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareAction.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"policies exist.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareAction.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.10.2: Emails identified as containing malware SHALL be quarantined or dropped.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Quarantine Tag | Result |\n| --- | --- | --- |\n| Default | AdminOnlyAccessPolicy | ✅ Pass |\n",
        "TestDescription": "Emails identified as containing malware SHALL be quarantined or dropped.\n\nRationale: Email can be used as a mechanism for delivering malware. Preventing emails with known malware from reaching user mailboxes helps ensure users cannot interact with those emails.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 10 Malware Scanning - MS.EXO.10.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo102v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L582)\n* [Microsoft Learn - Anatomy of a quarantine policy](https://learn.microsoft.com/en-us/defender-office-365/quarantine-policies#anatomy-of-a-quarantine-policy)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.10.3",
      "Title": "Email scanning SHALL be capable of reviewing emails after delivery.",
      "Name": "CISA.MS.EXO.10.3: Email scanning SHALL be capable of reviewing emails after delivery.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.10.3",
        "CISA.MS.EXO.10.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaMalwareZap\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"malware scanning policy exists.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareZap.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because malware scanning policy exists., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because malware scanning policy exists., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareZap.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"malware scanning policy exists.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMalwareZap.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.10.3: Email scanning SHALL be capable of reviewing emails after delivery.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Result |\n| --- | --- |\n| Default | ✅ Pass |\n",
        "TestDescription": "Email scanning SHALL be capable of reviewing emails after delivery.\n\nRationale: As known malware signatures are updated, it is possible for an email to be retroactively identified as containing malware after delivery. By scanning emails, the number of malware-infected in users' mailboxes can be reduced.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 10 Malware Scanning - MS.EXO.10.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo103v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L597)\n* [Microsoft Learn - Zero-hour auto purge (ZAP) for malware](https://learn.microsoft.com/en-us/defender-office-365/zero-hour-auto-purge#zero-hour-auto-purge-zap-for-email-messages)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.11.1",
      "Title": "Impersonation protection checks SHOULD be used.",
      "Name": "CISA.MS.EXO.11.1: Impersonation protection checks SHOULD be used.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.11.1",
        "CISA.MS.EXO.11.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaImpersonation\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"preset policies are enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaImpersonation.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaImpersonation.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"preset policies are enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaImpersonation.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.11.1: Impersonation protection checks SHOULD be used.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Result |\n| --- | --- |\n| Office365 AntiPhish Default | ❌ Fail |\n",
        "TestDescription": "Impersonation protection checks SHOULD be used.\n\nRationale: Users might not be able to reliably identify phishing emails, especially if the `FROM` address is nearly indistinguishable from that of a known entity. By automatically identifying senders who appear to be impersonating known senders, the risk of a successful phishing attempt can be reduced.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 11 Phishing Protections - MS.EXO.11.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo111v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L617)\n* [Microsoft Learn - Impersonation settings in anti-phishing policies in Microsoft Defender for Office 365](https://learn.microsoft.com/en-us/defender-office-365/anti-phishing-policies-about#impersonation-settings-in-anti-phishing-policies-in-microsoft-defender-for-office-365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.11.2",
      "Title": "User warnings, comparable to the user safety tips included with EOP, SHOULD be displayed.",
      "Name": "CISA.MS.EXO.11.2: User warnings, comparable to the user safety tips included with EOP, SHOULD be displayed.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.11.2",
        "CISA.MS.EXO.11.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaImpersonationTip\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"preset policies are enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaImpersonationTip.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaImpersonationTip.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"preset policies are enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaImpersonationTip.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.11.2: User warnings, comparable to the user safety tips included with EOP, SHOULD be displayed.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Result |\n| --- | --- |\n| Office365 AntiPhish Default | ❌ Fail |\n",
        "TestDescription": "User warnings, comparable to the user safety tips included with EOP, SHOULD be displayed.\n\nRationale: Many tasks are better suited for automated processes, such as identifying unusual characters in the `FROM` address or identifying a first-time sender. User warnings can handle these tasks, reducing the burden on end users and the risk of successful phishing attempts.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 11 Phishing Protections - MS.EXO.11.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo112v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L632)\n* [Microsoft Learn - Impersonation settings in anti-phishing policies in Microsoft Defender for Office 365](https://learn.microsoft.com/en-us/defender-office-365/anti-phishing-policies-about#impersonation-settings-in-anti-phishing-policies-in-microsoft-defender-for-office-365)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.11.3",
      "Title": "The phishing protection solution SHOULD include an AI-based phishing detection tool comparable to EOP Mailbox Intelligence.",
      "Name": "CISA.MS.EXO.11.3: The phishing protection solution SHOULD include an AI-based phishing detection tool comparable to EOP Mailbox Intelligence.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.11.3",
        "CISA.MS.EXO.11.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaMailboxIntelligence\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"preset policies are enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMailboxIntelligence.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMailboxIntelligence.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"preset policies are enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMailboxIntelligence.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.11.3: The phishing protection solution SHOULD include an AI-based phishing detection tool comparable to EOP Mailbox Intelligence.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Result |\n| --- | --- |\n| Office365 AntiPhish Default | ❌ Fail |\n",
        "TestDescription": "The phishing protection solution SHOULD include an AI-based phishing detection tool comparable to EOP Mailbox Intelligence.\n\nRationale: Phishing attacks can result in unauthorized data disclosure and unauthorized access. Using AI-based phishing detection tools to improve the detection rate of phishing attempts helps reduce the risk of successful phishing attacks.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 11 Phishing Protections - MS.EXO.11.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo113v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L647)\n* [Microsoft Learn - Mailbox intelligence impersonation protection](https://learn.microsoft.com/en-us/defender-office-365/anti-phishing-policies-about#mailbox-intelligence-impersonation-protection)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.12.1",
      "Title": "IP allow lists SHOULD NOT be created.",
      "Name": "CISA.MS.EXO.12.1: IP allow lists SHOULD NOT be created.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.12.1",
        "CISA.MS.EXO.12.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $cisaAntiSpamAllowList = Test-MtCisaAntiSpamAllowList\n\n        if ($null -ne $cisaAntiSpamAllowList) {\n            $cisaAntiSpamAllowList | Should -Be $true -Because \"no anti-spam policy allow IPs.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAntiSpamAllowList.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because no anti-spam policy allow IPs., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because no anti-spam policy allow IPs., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAntiSpamAllowList.Tests.ps1",
            "Line": "7",
            "LineText": "            $cisaAntiSpamAllowList | Should -Be $true -Because \"no anti-spam policy allow IPs.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAntiSpamAllowList.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.12.1: IP allow lists SHOULD NOT be created.",
        "TestResult": "\nYour tenant has [Anti-spam IP allow lists](https://security.microsoft.com/antispam).\n\n* Default\n  * 10.10.10.10\n",
        "TestDescription": "IP allow lists SHOULD NOT be created.\n\nRationale: Messages sent from IP addresses on an allow list bypass important security mechanisms, including spam filtering and sender authentication checks. Avoiding use of IP allow lists prevents potential threats from circumventing security mechanisms.\n\n#### Remediation action:\n\nTo modify the connection filters, follow the instructions found in Use the Microsoft 365 Defender portal to modify the default connection filter policy.\n1. Sign in to **Microsoft 365 Defender portal**.\n2. From the left-hand menu, find **Email & collaboration** and select **Policies and Rules**.\n3. Select **Threat Policies** from the list of policy names.\n4. Under **Policies**, select [**Anti-spam**](https://security.microsoft.com/antispam).\n5. Select **Connection filter policy (Default)**.\n6. Click **Edit connection filter policy**.\n7. Ensure no addresses are specified under **Always allow messages from the following IP addresses or address range**.\n\n#### Related links\n\n* [Defender admin center - Anti-spam policies](https://security.microsoft.com/antispam)\n* [CISA 12 IP Allow Lists - MS.EXO.12.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo121v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L683)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.12.2",
      "Title": "Safe lists SHOULD NOT be enabled.",
      "Name": "CISA.MS.EXO.12.2: Safe lists SHOULD NOT be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.12.2",
        "CISA.MS.EXO.12.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $cisaAntiSpamSafeList = Test-MtCisaAntiSpamSafeList\n\n        if($null -ne $cisaAntiSpamSafeList) {\n            $cisaAntiSpamSafeList | Should -Be $true -Because \"Safe Lists should be disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAntiSpamSafeList.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.12.2: Safe lists SHOULD NOT be enabled.",
        "TestResult": "\nWell done. [Safe List](https://security.microsoft.com/antispam) is disabled in your tenant.",
        "TestDescription": "Safe lists SHOULD NOT be enabled.\n\nRationale: Messages sent from allowed safe list addresses bypass important security mechanisms, including spam filtering and sender authentication checks. Avoiding use of safe lists prevents potential threats from circumventing security mechanisms. While blocking all malicious senders is not feasible, blocking specific known, malicious IP addresses may reduce the threat from specific senders.\n\n#### Remediation action:\n\nTo modify the connection filters, follow the instructions found in Use the Microsoft 365 Defender portal to modify the default connection filter policy.\n1. Sign in to **Microsoft 365 Defender portal**.\n2. From the left-hand menu, find **Email & collaboration** and select **Policies and Rules**.\n3. Select **Threat Policies** from the list of policy names.\n4. Under **Policies**, select [**Anti-spam**](https://security.microsoft.com/antispam).\n5. Select **Connection filter policy (Default)**.\n6. Click **Edit connection filter policy**.\n8. Ensure **Turn on safe list** is not selected.\n\n#### Related links\n\n* [Defender admin center - Anti-spam policies](https://security.microsoft.com/antispam)\n* [CISA 12 IP Allow Lists - MS.EXO.12.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo122v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L710)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.13.1",
      "Title": "Mailbox auditing SHALL be enabled.",
      "Name": "CISA.MS.EXO.13.1: Mailbox auditing SHALL be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.13.1",
        "CISA.MS.EXO.13.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $cisaMailboxAuditing = Test-MtCisaMailboxAuditing\n\n        if($null -ne $cisaMailboxAuditing) {\n            $cisaMailboxAuditing | Should -Be $true -Because \"mailbox auditing is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaMailboxAuditing.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.13.1: Mailbox auditing SHALL be enabled.",
        "TestResult": "\nWell done. Your tenant has mailbox auditing enabled.\n\n✅ Pass",
        "TestDescription": "Mailbox auditing SHALL be enabled.\n\nRationale: Exchange Online user accounts can be compromised or misused. Enabling mailbox auditing provides a valuable source of information to detect and respond to mailbox misuse.\n\n#### Remediation action:\n\nMailbox auditing can be managed from the [Exchange Online PowerShell module](https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-mailboxes?view=o365-worldwide). Follow the instructions listed on Manage mailbox auditing in Office 365.\n1. To enable mailbox auditing by default for your organization via PowerShell:\n2. Connect to the Exchange Online PowerShell.\n3. Run the following command:\n    `Set-OrganizationConfig –AuditDisabled $false`\n\n#### Related links\n\n* [Microsoft Learn - Mailbox Auditing](https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-mailboxes?view=o365-worldwide)\n* [CISA 13 Mailbox Auditing - MS.EXO.13.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo131v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L741)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.14.1",
      "Title": "A spam filter SHALL be enabled.",
      "Name": "CISA.MS.EXO.14.1: A spam filter SHALL be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.14.1",
        "CISA.MS.EXO.14.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaSpamFilter\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"spam filter enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamFilter.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because spam filter enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because spam filter enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamFilter.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"spam filter enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamFilter.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.14.1: A spam filter SHALL be enabled.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Spam Action | High Confidence Spam Action | Bulk Spam Action | Phish Spam Action |\n| --- | --- | --- | --- | --- |\n| Default | MoveToJmf | MoveToJmf | MoveToJmf | MoveToJmf |\n",
        "TestDescription": "A spam filter SHALL be enabled.\n\nRationale: Spam is a constant threat as junk mail can reduce user productivity, fill up mailboxes unnecessarily, and in some cases include malicious links or attachments. Filtering out spam reduces user workload burden, prevents junk mail congestion, and reduces potentially malicious content exposure.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select [**Preset Security Policies**](https://security.microsoft.com/presetSecurityPolicies).\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 14 Inbound Anti-Spam Protections - MS.EXO.14.1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo141v2)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L753)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.14.2",
      "Title": "Spam and high confidence spam SHALL be moved to either the junk email folder or the quarantine folder.",
      "Name": "CISA.MS.EXO.14.2: Spam and high confidence spam SHALL be moved to either the junk email folder or the quarantine folder.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.14.2",
        "CISA.MS.EXO.14.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaSpamAction\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"spam filter enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamAction.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because spam filter enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because spam filter enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamAction.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"spam filter enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamAction.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.14.2: Spam and high confidence spam SHALL be moved to either the junk email folder or the quarantine folder.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Spam Action | High Confidence Spam Action |\n| --- | --- | --- |\n| Default | ✅ Pass | ✅ Pass |\n",
        "TestDescription": "Spam and high confidence spam SHALL be moved to either the junk email folder or the quarantine folder.\n\nRationale: Spam is a constant threat as junk mail can reduce user productivity, fill up mailboxes unnecessarily, and in some cases include malicious links or attachments. Moving spam messages to a separate junk or quarantine folder helps users filter out spam while still giving them the ability to review messages, as needed, in case a message is filtered incorrectly.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select [**Preset Security Policies**](https://security.microsoft.com/presetSecurityPolicies).\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 14 Inbound Anti-Spam Protections - MS.EXO.14.2](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo142v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L768)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.14.3",
      "Title": "Allowed domains SHALL NOT be added to inbound anti-spam protection policies.",
      "Name": "CISA.MS.EXO.14.3: Allowed domains SHALL NOT be added to inbound anti-spam protection policies.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.14.3",
        "CISA.MS.EXO.14.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaSpamBypass\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"spam filter enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamBypass.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because spam filter enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because spam filter enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamBypass.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"spam filter enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamBypass.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.14.3: Allowed domains SHALL NOT be added to inbound anti-spam protection policies.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Policy Result | Allowed Domains |\n| --- | --- | --- |\n| Default | ✅ Pass |  |\n",
        "TestDescription": "Allowed domains SHALL NOT be added to inbound anti-spam protection policies.\n\nRationale: Legitimate emails may be incorrectly filtered by spam protections. Adding allowed senders is an acceptable method of combating these false positives. Allowing an entire domain, especially a common domain like office.com, however, provides for a large number of potentially unknown users to bypass spam protections.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select [**Preset Security Policies**](https://security.microsoft.com/presetSecurityPolicies).\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 14 Inbound Anti-Spam Protections - MS.EXO.14.3](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo143v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L783)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.15.1",
      "Title": "URL comparison with a block-list SHOULD be enabled.",
      "Name": "CISA.MS.EXO.15.1: URL comparison with a block-list SHOULD be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.15.1",
        "CISA.MS.EXO.15.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaSafeLink\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"safe link enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLink.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because safe link enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because safe link enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLink.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"safe link enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLink.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.15.1: URL comparison with a block-list SHOULD be enabled.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Policy Result |\n| --- | --- |\n| Built-In Protection Policy | ✅ Pass |\n",
        "TestDescription": "URL comparison with a block-list SHOULD be enabled.\n\nRationale: Users may be directed to malicious websites via links in email. Blocking access to known, malicious URLs can prevent users from accessing known malicious websites.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under either **Standard protection** or **Strict protection**, select **Manage protection settings**.\n6. Select **Next** until you reach the **Apply Defender for Office 365 protection** page.\n7. On the **Apply Defender for Office 365 protection** page, select **All recipients**.\n8. (Optional) Under **Exclude these recipients**, add **Users** and **Groups** to be exempted from the preset policies.\n9. Select **Next** on each page until the **Review and confirm your changes** page.\n10. On the **Review and confirm your changes** page, select **Confirm**.\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 15 Link Protection - MS.EXO.15.1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo151v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L813)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.15.2",
      "Title": "Direct download links SHOULD be scanned for malware.",
      "Name": "CISA.MS.EXO.15.2: Direct download links SHOULD be scanned for malware.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.15.2",
        "CISA.MS.EXO.15.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaSafeLinkDownloadScan\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"safe link scan enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLinkDownloadScan.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because safe link scan enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because safe link scan enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLinkDownloadScan.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"safe link scan enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLinkDownloadScan.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.15.2: Direct download links SHOULD be scanned for malware.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Policy Result |\n| --- | --- |\n| Built-In Protection Policy | ✅ Pass |\n",
        "TestDescription": "Direct download links SHOULD be scanned for malware.\n\nRationale: URLs in emails may direct users to download and run malware. Scanning direct download links in real-time for known malware and blocking access can prevent users from infecting their devices.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under either **Standard protection** or **Strict protection**, select **Manage protection settings**.\n6. Select **Next** until you reach the **Apply Defender for Office 365 protection** page.\n7. On the **Apply Defender for Office 365 protection** page, select **All recipients**.\n8. (Optional) Under **Exclude these recipients**, add **Users** and **Groups** to be exempted from the preset policies.\n9. Select **Next** on each page until the **Review and confirm your changes** page.\n10. On the **Review and confirm your changes** page, select **Confirm**.\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 15 Link Protection - MS.EXO.15.2](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo152v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L828)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.15.3",
      "Title": "User click tracking SHOULD be enabled.",
      "Name": "CISA.MS.EXO.15.3: User click tracking SHOULD be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.15.3",
        "CISA.MS.EXO.15.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaSafeLinkClickTracking\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"safe link click tracking enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLinkClickTracking.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because safe link click tracking enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because safe link click tracking enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLinkClickTracking.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"safe link click tracking enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSafeLinkClickTracking.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.15.3: User click tracking SHOULD be enabled.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | Policy Result |\n| --- | --- |\n| Built-In Protection Policy | ✅ Pass |\n",
        "TestDescription": "User click tracking SHOULD be enabled.\n\nRationale: Users may click on malicious links in emails, leading to compromise or unauthorized data disclosure. Enabling user click tracking lets agencies know if a malicious link may have been visited after the fact to help tailor a response to a potential incident.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under either **Standard protection** or **Strict protection**, select **Manage protection settings**.\n6. Select **Next** until you reach the **Apply Defender for Office 365 protection** page.\n7. On the **Apply Defender for Office 365 protection** page, select **All recipients**.\n8. (Optional) Under **Exclude these recipients**, add **Users** and **Groups** to be exempted from the preset policies.\n9. Select **Next** on each page until the **Review and confirm your changes** page.\n10. On the **Review and confirm your changes** page, select **Confirm**.\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 15 Link Protection - MS.EXO.15.3](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo153v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L843)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.16.1",
      "Title": "Alerts SHALL be enabled.",
      "Name": "CISA.MS.EXO.16.1: Alerts SHALL be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.16.1",
        "CISA.MS.EXO.16.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaExoAlert\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"alerts enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaExoAlert.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:15",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.16.1: Alerts SHALL be enabled.",
        "TestResult": "\nWell done. Your tenant has [alerts configured](https://security.microsoft.com/alertpoliciesv2).\n\n| Alert Name | Alert Result |\n| --- | --- |\n| Suspicious Email Forwarding Activity | ✅ Pass |\n| A potentially malicious URL click was detected | ✅ Pass |\n| Tenant restricted from sending email | ✅ Pass |\n| Messages have been delayed | ✅ Pass |\n| Tenant restricted from sending unprovisioned email | ✅ Pass |\n| Suspicious connector activity | ✅ Pass |\n| Suspicious email sending patterns detected | ✅ Pass |\n",
        "TestDescription": "At a minimum, the following alerts SHALL be enabled:\na. Suspicious email sending patterns detected.\nb. Suspicious Connector Activity.\nc. Suspicious Email Forwarding Activity.\nd. Messages have been delayed.\ne. Tenant restricted from sending unprovisioned email.\nf. Tenant restricted from sending email.\ng. A potentially malicious URL click was detected.\n\nRationale: Potentially malicious or service impacting events may go undetected without a means of detecting these events. Setting up a mechanism to alert administrators to events listed above draws attention to them to help minimize impact to users and the agency.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. Under **Email & collaboration**, select **Policies & rules**.\n3. Select (**Alert Policy**)[https://security.microsoft.com/alertpoliciesv2].\n4. Select the checkbox next to each alert to enable as determined by the agency and at a minimum those referenced in the [CISA M365 Security Configuration Baseline for Exchange Online](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo161v1) which are:\n    a. Suspicious email sending patterns detected.\n    b. Suspicious connector activity.\n    c. Suspicious Email Forwarding Activity.\n    d. Messages have been delayed.\n    e. Tenant restricted from sending unprovisioned email.\n    f. Tenant restricted from sending email.\n    g. A potentially malicious URL click was detected.\n5. Click the pencil icon from the top menu.\n6. Select the **Enable selected policies** action from the **Bulk actions** menu.\n\n#### Related links\n\n* [Defender admin center - Alert policy](https://security.microsoft.com/alertpoliciesv2)\n* [CISA 16 Alerts - MS.EXO.16.1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo161v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L863)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.17.1",
      "Title": "Microsoft Purview Audit (Standard) logging SHALL be enabled.",
      "Name": "CISA.MS.EXO.17.1: Microsoft Purview Audit (Standard) logging SHALL be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.17.1",
        "CISA.MS.EXO.17.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaAuditLog\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"safe link enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAuditLog.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because safe link enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because safe link enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAuditLog.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"safe link enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAuditLog.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:03",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.17.1: Microsoft Purview Audit (Standard) logging SHALL be enabled.",
        "TestResult": "\nYour tenant does not have [unified audit log enabled](https://purview.microsoft.com/audit/auditsearch).",
        "TestDescription": "Microsoft Purview Audit (Standard) logging SHALL be enabled.\n\nRationale: Responding to incidents without detailed information about activities that took place slows response actions. Enabling Microsoft Purview Audit (Standard) helps ensure agencies have visibility into user actions. Furthermore, Microsoft Purview Audit (Standard) is required for government agencies by OMB M-21-31 (referred to therein by its former name, Unified Audit Logs).\n\n#### Remediation action:\n\nTo enable auditing via the Microsoft Purview compliance portal:\n1. Sign in to the **Microsoft Purview compliance portal**.\n2. Under **Solutions**, select [**Audit**](https://purview.microsoft.com/audit/auditsearch).\n3. If auditing is not enabled, a banner is displayed to notify the administrator to start recording user and admin activity.\n4. Click the **Start recording user and admin activity**.\n\n#### Related links\n\n* [Purview portal - Audit search](https://purview.microsoft.com/audit/auditsearch)\n* [CISA 17 Audit Logging - MS.EXO.17.1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo171v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L898)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.17.2",
      "Title": "Microsoft Purview Audit (Premium) logging SHALL be enabled.",
      "Name": "CISA.MS.EXO.17.2: Microsoft Purview Audit (Premium) logging SHALL be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.17.2",
        "CISA.MS.EXO.17.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaAuditLogPremium\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAuditLogPremium.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.17.2: Microsoft Purview Audit (Premium) logging SHALL be enabled.",
        "TestResult": "\nWell done. Your tenant has [SearchQueryInitiated audit log enabled](https://purview.microsoft.com/audit/auditsearch).\n\n| Mailbox | SearchQueryInitiated |\n| --- | --- |\n| AdeleV@pora.onmicrosoft.com | ❌ Fail |\n| AlexW@elapora.com | ❌ Fail |\n| annaj@elapora.com | ❌ Fail |\n| bagula@elapora.com | ❌ Fail |\n| DiegoS@elapora.com | ❌ Fail |\n| DiscoverySearchMailbox{D919BA05-46A6-415f-80AD-7E09334BB852}@pora.onmicrosoft.com | ❌ Fail |\n| GradyA@elapora.com | ❌ Fail |\n| HenriettaM@pora.onmicrosoft.com | ❌ Fail |\n| IsaiahL@elapora.com | ❌ Fail |\n| JohannaL@pora.onmicrosoft.com | ❌ Fail |\n| john1@elapora.com | ❌ Fail |\n| JoniS@pora.onmicrosoft.com | ❌ Fail |\n| joshua@elapora.com | ❌ Fail |\n| LeeG@pora.onmicrosoft.com | ❌ Fail |\n| LidiaH@pora.onmicrosoft.com | ❌ Fail |\n| LynneR@pora.onmicrosoft.com | ❌ Fail |\n| MeganB@elapora.com | ❌ Fail |\n| merill@elapora.com | ❌ Fail |\n| MiriamG@pora.onmicrosoft.com | ❌ Fail |\n| NestorW@pora.onmicrosoft.com | ❌ Fail |\n| PattiF@pora.onmicrosoft.com | ❌ Fail |\n| PradeepG@pora.onmicrosoft.com | ❌ Fail |\n",
        "TestDescription": "Microsoft Purview Audit (Premium) logging SHALL be enabled.\n\nRationale: Standard logging may not include relevant details necessary for visibility into user actions during an incident. Enabling Microsoft Purview Audit (Premium) captures additional event types not included with Standard. Furthermore, it is required for government agencies by OMB M-21-13 (referred to therein by its former name, Unified Audit Logs w/Advanced Features).\n\n#### Remediation action:\n\nTo set up Microsoft Purview Audit (Premium), see [Set up Microsoft Purview Audit (Premium) | Microsoft Learn](https://learn.microsoft.com/en-us/purview/audit-premium-setup?view=o365-worldwide).\n\n#### Related links\n\n* [Purview portal - Audit search](https://purview.microsoft.com/audit/auditsearch)\n* [CISA 17 Audit Logging - MS.EXO.17.2](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo172v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L913)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.17.3",
      "Title": "Audit logs SHALL be maintained for at least the minimum duration dictated by OMB M-21-31 (Appendix C).",
      "Name": "CISA.MS.EXO.17.3: Audit logs SHALL be maintained for at least the minimum duration dictated by OMB M-21-31 (Appendix C).",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.17.3",
        "CISA.MS.EXO.17.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaAuditLogRetention\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAuditLogRetention.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAuditLogRetention.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAuditLogRetention.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:03",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.17.3: Audit logs SHALL be maintained for at least the minimum duration dictated by OMB M-21-31 (Appendix C).",
        "TestResult": "\nYour tenant does not have [Exchange Online audit retention enabled](https://purview.microsoft.com/audit/auditpolicies).",
        "TestDescription": "Audit logs SHALL be maintained for at least the minimum duration dictated by OMB M-21-31 (Appendix C).\n\nRationale: Audit logs may no longer be available when needed if they are not retained for a sufficient time. Increased log retention time gives an agency the necessary visibility to investigate incidents that occurred some time ago. OMB M-21-13, Appendix C, Table 5 specifically calls out Unified Audit Logs in the Cloud Azure log category.\n\n#### Remediation action:\n\nTo create one or more custom audit retention policies, if the default retention policy is not sufficient for agency needs, follow [Create an audit log retention policy](https://learn.microsoft.com/en-us/purview/audit-log-retention-policies?view=o365-worldwide&tabs=microsoft-purview-portal#create-an-audit-log-retention-policy) instructions. Ensure the duration selected in the retention policies is at least one year, in accordance with OMB M-21-31.\n\n#### Related links\n\n* [Purview portal - Audit policies](https://purview.microsoft.com/audit/auditpolicies)\n* [CISA 17 Audit Logging - MS.EXO.17.3](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo173v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L928)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.2.1",
      "Title": "A list of approved IP addresses for sending mail SHALL be maintained.",
      "Name": "CISA.MS.EXO.2.1: A list of approved IP addresses for sending mail SHALL be maintained.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.2.1",
        "CISA.MS.EXO.2.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $cisaSpfRestriction = Test-MtCisaSpfRestriction\n\n        if ($null -ne $cisaSpfRestriction) {\n            $cisaSpfRestriction | Should -Be $true -Because \"SPF record should restrict authorized senders.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpfRestriction.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because SPF record should restrict authorized senders., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because SPF record should restrict authorized senders., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpfRestriction.Tests.ps1",
            "Line": "6",
            "LineText": "            $cisaSpfRestriction | Should -Be $true -Because \"SPF record should restrict authorized senders.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpfRestriction.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.2.1: A list of approved IP addresses for sending mail SHALL be maintained.",
        "TestResult": "\nYour tenant's domains do not restrict authorized senders with SPF fully. Ensure all domain's SPF records end in '-all'.\n\n| Domain | Result | Reason | Addresses |\n| --- | --- | --- | --- |\n| elapora.com | ❌ Fail | Last directive is not '-all' |  |\n| pora.mail.onmicrosoft.com | ❌ Fail | Last directive is not '-all' |  |\n| pora.onmicrosoft.com | ❌ Fail | Last directive is not '-all' |  |\n",
        "TestDescription": "A list of approved IP addresses for sending mail SHALL be maintained.\n\nRationale: Failing to maintain an accurate list of authorized IP addresses may result in spoofed email messages or failure to deliver legitimate messages when SPF is enabled. Maintaining such a list helps ensure that unauthorized servers sending spoofed messages can be detected, and permits message delivery from legitimate senders.\n\n#### Remediation action:\n\n* Identify any approved senders specific to your agency.\n* Perform regular review of SPF record and update as necessary.\n* Additionally, see [External DNS records required for SPF](https://learn.microsoft.com/en-us/microsoft-365/enterprise/external-domain-name-system-records?view=o365-worldwide#external-dns-records-required-for-spf) for inclusions required for Microsoft to send email on behalf of your domain.\n\n#### Related links\n\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\n* [CISA 2 Sender Policy Framework - MS.EXO.2.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo21v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L58)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.2.2",
      "Title": "An SPF policy SHALL be published for each domain, designating only these addresses as approved senders.",
      "Name": "CISA.MS.EXO.2.2: An SPF policy SHALL be published for each domain, designating only these addresses as approved senders.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.2.2",
        "CISA.MS.EXO.2.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $cisaSpfDirective = Test-MtCisaSpfDirective\n\n        if ($null -ne $cisaSpfDirective) {\n            $cisaSpfDirective | Should -Be $true -Because \"SPF record should restrict authorized senders.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpfDirective.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because SPF record should restrict authorized senders., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because SPF record should restrict authorized senders., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpfDirective.Tests.ps1",
            "Line": "6",
            "LineText": "            $cisaSpfDirective | Should -Be $true -Because \"SPF record should restrict authorized senders.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpfDirective.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.2.2: An SPF policy SHALL be published for each domain, designating only these addresses as approved senders.",
        "TestResult": "\nYour tenant's domains do not restrict authorized senders with SPF fully. Ensure authorized senders are specified.\n\n| Domain | Result | Reason | Directives |\n| --- | --- | --- | --- |\n| elapora.com | ❌ Fail | No mechanism targets |  |\n| pora.mail.onmicrosoft.com | 🗄️ Skip | coexistence domain |  |\n| pora.onmicrosoft.com | ❌ Fail | No mechanism targets |  |\n",
        "TestDescription": "An SPF policy SHALL be published for each domain, designating only these addresses as approved senders.\n\nRationale: An adversary may modify the `FROM` field of an email such that it appears to be a legitimate email sent by an agency, facilitating phishing attacks. Publishing an SPF policy for each agency domain mitigates forged `FROM` fields by providing a means for recipients to detect emails spoofed in this way. SPF is required for FCEB departments and agencies by Binding Operational Directive (BOD) 18-01, \"Enhance Email and Web Security\".\n\nCoexistence domains related to Hybrid Configuration Wizard (HCW) are skipped.\nProduction use of coexistence domains is discouraged, and additional controls, such as transport rules, should be used to restrict their use.\n\n#### Remediation action:\n\nSPF is not configured through the Exchange admin center, but rather via DNS records hosted by the agency's domain. Thus, the exact steps needed to set up SPF varies from agency to agency. See [Add or edit an SPF TXT record to help prevent email spam (Outlook, Exchange Online) | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/admin/get-help-with-domains/create-dns-records-at-any-dns-hosting-provider?view=o365-worldwide#add-or-edit-an-spf-txt-record-to-help-prevent-email-spam-outlook-exchange-online) for more details.\n\nTo test your SPF configuration, consider using a web-based tool, such as those listed under [How can I validate SPF records for my domain? | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/admin/setup/domains-faq?view=o365-worldwide#how-can-i-validate-spf-records-for-my-domain). Additionally, SPF records can be requested using the PowerShell tool `Resolve-DnsName`. For example:\n\n`Resolve-DnsName example.onmicrosoft.com txt`\n\nIf SPF is configured, you will see a response resembling `v=spf1 include:spf.protection.outlook.com -all` returned; though by necessity, the contents of the SPF policy may vary by agency. In this example, the SPF policy indicates the IP addresses listed by the policy for \"spf.protection.outlook.com\" are the only approved senders for \"example.onmicrosoft.com.\" These IPs can be determined via an additional SPF lookup, this time for \"spf.protection.outlook.com.\" Ensure the IP addresses listed as approved senders for your domain are those identified for MS.EXO.2.1v1. [See SPF TXT record syntax for Microsoft 365 | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/email-authentication-anti-spoofing?view=o365-worldwide#spf-txt-record-syntax-for-microsoft-365) for a more in-depth discussion of SPF record syntax.\n\n#### Related links\n\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\n* [CISA 2 Sender Policy Framework - MS.EXO.2.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo22v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L75)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.4.1",
      "Title": "A DMARC policy SHALL be published for every second-level domain.",
      "Name": "CISA.MS.EXO.4.1: A DMARC policy SHALL be published for every second-level domain.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.4.1",
        "CISA.MS.EXO.4.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $cisaDmarcRecordExist = Test-MtCisaDmarcRecordExist\n\n        if ($null -ne $cisaDmarcRecordExist) {\n            $cisaDmarcRecordExist | Should -Be $true -Because \"DMARC record should exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDmarcRecordExist.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because DMARC record should exist., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because DMARC record should exist., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDmarcRecordExist.Tests.ps1",
            "Line": "6",
            "LineText": "            $cisaDmarcRecordExist | Should -Be $true -Because \"DMARC record should exist.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDmarcRecordExist.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.4.1: A DMARC policy SHALL be published for every second-level domain.",
        "TestResult": "\nYour tenant's second level domains do not have a DMARC record.\n\n| Domain | Result | Reason | Targets |\n| --- | --- | --- | --- |\n| elapora.com | ❌ Fail | Failure to obtain record | Aggregate Reports:  |\n| elapora.com | ❌ Fail | Failure to obtain record | Forensic Reports:  |\n| onmicrosoft.com | 🗄️ Skip | Coexistence domain ||\n",
        "TestDescription": "A DMARC policy SHALL be published for every second-level domain.\n\nRationale: Without a DMARC policy available for each domain, recipients may improperly handle SPF and DKIM failures, possibly enabling spoofed emails to reach end users' mailboxes. Publishing DMARC records at the second-level domain protects the second-level domains and all subdomains.\n\n#### Remediation action:\n\nDMARC is not configured through the Exchange admin center, but rather via DNS records hosted by the agency's domain. As such, implementation varies depending on how an agency manages its DNS records. See [Form the DMARC TXT record for your domain | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/email-authentication-dmarc-configure?view=o365-worldwide#step-4-form-the-dmarc-txt-record-for-your-domain) for Microsoft guidance.\n\nA DMARC record published at the second-level domain will protect all subdomains. In other words, a DMARC record published for `example.com` will protect both `a.example.com` and `b.example.com`, but a separate record would need to be published for `c.example.gov`.\n\nTo test your DMARC configuration, consider using one of many publicly available web-based tools. Additionally, DMARC records can be requested using the PowerShell tool `Resolve-DnsName`. For example:\n\n`Resolve-DnsName _dmarc.example.com txt`\n\nIf DMARC is configured, a response resembling `v=DMARC1; p=reject; pct=100; rua=mailto:reports@dmarc.cyber.dhs.gov, mailto:reports@example.com; ruf=mailto:reports@example.com` will be returned, though by necessity, the contents of the record will vary by agency. In this example, the policy indicates all emails failing the SPF/DKIM checks are to be rejected and aggregate reports sent to reports@dmarc.cyber.dhs.gov and reports@example.com. Failure reports will be sent to reports@example.com.\n\n#### Related links\n\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\n* [CISA 4 Domain-Based Message Authentication, Reporting, and Conformance (DMARC) - MS.EXO.4.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo41v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L147)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.4.2",
      "Title": "The DMARC message rejection option SHALL be p=reject.",
      "Name": "CISA.MS.EXO.4.2: The DMARC message rejection option SHALL be p=reject.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.4.2",
        "CISA.MS.EXO.4.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $cisaDmarcRecordReject = Test-MtCisaDmarcRecordReject\n\n        if ($null -ne $cisaDmarcRecordReject) {\n            $cisaDmarcRecordReject | Should -Be $true -Because \"DMARC record policy should be reject.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDmarcRecordReject.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because DMARC record policy should be reject., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because DMARC record policy should be reject., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDmarcRecordReject.Tests.ps1",
            "Line": "6",
            "LineText": "            $cisaDmarcRecordReject | Should -Be $true -Because \"DMARC record policy should be reject.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDmarcRecordReject.Tests.ps1: line 6\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.4.2: The DMARC message rejection option SHALL be p=reject.",
        "TestResult": "\nYour tenant's domains do not have a DMARC record with reject policy.\n\n| Domain | Result | Reason | Policy | Subdomain Poliy |\n| --- | --- | --- | --- | --- |\n| onmicrosoft.com | ❌ Fail | Failure to obtain record |  |  |\n| pora.mail.onmicrosoft.com | ❌ Fail | Failure to obtain record |  |  |\n| onmicrosoft.com | ❌ Fail | Failure to obtain record |  |  |\n| pora.onmicrosoft.com | ❌ Fail | Failure to obtain record |  |  |\n| elapora.com | ❌ Fail | Failure to obtain record |  |  |\n",
        "TestDescription": "The DMARC message rejection option SHALL be p=reject.\n\nRationale: Of the three policy options (i.e., none, quarantine, and reject), reject provides the strongest protection. Reject is the level of protection required by BOD 18-01 for FCEB departments and agencies.\n\n#### Remediation action:\n\n* See MS.EXO.4.1v1 Instructions for an overview of how to publish and check a DMARC record.\n* Ensure the record published includes p=reject.\n\n#### Related links\n\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\n* [CISA 4 Domain-Based Message Authentication, Reporting, and Conformance (DMARC) - MS.EXO.4.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo42v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L176)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.5.1",
      "Title": "SMTP AUTH SHALL be disabled.",
      "Name": "CISA.MS.EXO.5.1: SMTP AUTH SHALL be disabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.5.1",
        "CISA.MS.EXO.5.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $cisaSmtpAuthentication = Test-MtCisaSmtpAuthentication\n\n        if ($null -ne $cisaSmtpAuthentication) {\n            $cisaSmtpAuthentication | Should -Be $true -Because \"SMTP Authentication is disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSmtpAuthentication.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.5.1: SMTP AUTH SHALL be disabled.",
        "TestResult": "\nWell done. Your tenant has [SMTP Authentication](https://admin.exchange.microsoft.com/#/settings) disabled.",
        "TestDescription": "SMTP AUTH SHALL be disabled.\n\nRationale: SMTP AUTH is not used or needed by modern email clients. Therefore, disabling it as the global default conforms to the principle of least functionality.\n\n#### Remediation action:\n\n1. To disable SMTP AUTH for the organization:\n2. Sign in to the **Exchange admin center**.\n3. On the left hand pane, select [**Settings**](https://admin.exchange.microsoft.com/#/settings); then from the settings list, select **Mail Flow**.\n4. Make sure the setting **Turn off SMTP AUTH protocol for your organization** is checked.\n\n#### Related links\n\n* [Exchange admin center - Settings](https://admin.exchange.microsoft.com/#/settings)\n* [CISA 5 Simple Mail Transfer Protocol Authentication - MS.EXO.5.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo51v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L306)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.8.2",
      "Title": "The DLP solution SHALL protect personally identifiable information (PII) and sensitive information, as defined by the agency.",
      "Name": "CISA.MS.EXO.8.2: The DLP solution SHALL protect personally identifiable information (PII) and sensitive information, as defined by the agency.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.8.2",
        "CISA.MS.EXO.8.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $cisaDlpPii = Test-MtCisaDlpPii\n\n        if ($null -ne $cisaDlpPii) {\n            $cisaDlpPii | Should -Be $true -Because \"DLP protects sensitive information.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlpPii.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because DLP protects sensitive information., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because DLP protects sensitive information., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlpPii.Tests.ps1",
            "Line": "7",
            "LineText": "            $cisaDlpPii | Should -Be $true -Because \"DLP protects sensitive information.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlpPii.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:06",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.8.2: The DLP solution SHALL protect personally identifiable information (PII) and sensitive information, as defined by the agency.",
        "TestResult": "\nYour tenant does not have [Purview Data Loss Prevention Policies](https://purview.microsoft.com/datalossprevention/policies) enabled with the Sensitive Info Type of All Full Names.\n\n",
        "TestDescription": "The DLP solution SHALL protect personally identifiable information (PII) and sensitive information, as defined by the agency.\n\n> Reference your organization's policy defining PII.\n\nRationale: Users may inadvertently share sensitive information with others who should not have access to it. Data loss prevention policies provide a way for agencies to detect and prevent unauthorized disclosures.\n\n#### Remediation action:\n\n1. Sign in to the **Microsoft Purview compliance portal**.\n2. Under the **Solutions** section, select **Data loss prevention**.\n3. Select [**Policies**](https://purview.microsoft.com/datalossprevention/policies) from the left menu.\n4. Select **Create policy**.\n5. From the **Categories** list, select **Custom**.\n6. From the **Templates** list, select **Custom policy** and then click **Next**.\n7. Edit the name and description of the policy if desired, then click **Next**.\n8. Under **Choose locations to apply the policy**, set **Status** to **On** for at least the Exchange email, OneDrive accounts, SharePoint sites, Teams chat and channel messages, and Devices locations, then click **Next**.\n9. Under **Define policy settings**, select **Create or customize advanced DLP rules**, and then click **Next**.\n10. Click **Create rule**. Assign the rule an appropriate name and description.\n11. Click **Add condition**, then **Content contains**.\n12. Click **Add**, then **Sensitive info types**.\n13. Add information types that protect information sensitive to the agency.\n\n    At a minimum, the agency should protect:\n    - Credit card numbers\n    - U.S. Individual Taxpayer Identification Numbers (ITIN)\n    - U.S. Social Security Numbers (SSN)\n    - All agency-defined PII and sensitive information\n\n14. Click **Add**.\n15. Under **Actions**, click **Add an action**.\n16. Check **Restrict Access or encrypt the content in Microsoft 365 locations**.\n17. Under this action, select **Block Everyone**.\n18. Under **User notifications**, turn on **Use notifications to inform your users and help educate them on the proper use of sensitive info**.\n19. Under **Microsoft 365 services**, a section that appears after user notifications are turned on, check the box next to **Notify users in Office 365 service with a policy tip**.\n20. Click **Save**, then **Next**.\n21. Select **Turn it on right away**, then click **Next**.\n22. Click **Submit**.\n\n#### Related links\n\n* [Purview admin center - Data loss prevention policies](https://purview.microsoft.com/datalossprevention/policies)\n* [CISA 8 Data Loss Prevention Solutions - MS.EXO.8.2](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo82v2)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L438)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.8.4",
      "Title": "At a minimum, the DLP solution SHALL restrict sharing credit card numbers, U.S. Individual Taxpayer Identification Numbers (ITIN), and U.S. Social Security numbers (SSN) via email.",
      "Name": "CISA.MS.EXO.8.4: At a minimum, the DLP solution SHALL restrict sharing credit card numbers, U.S. Individual Taxpayer Identification Numbers (ITIN), and U.S. Social Security numbers (SSN) via email.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.8.4",
        "CISA.MS.EXO.8.4",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $cisa = Test-MtCisaDlpBaselineRule\n\n        if ($null -ne $cisa) {\n            $cisa | Should -Be $true -Because \"baseline DLP rules are in use.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlpBaselineRule.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because baseline DLP rules are in use., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because baseline DLP rules are in use., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlpBaselineRule.Tests.ps1",
            "Line": "7",
            "LineText": "            $cisa | Should -Be $true -Because \"baseline DLP rules are in use.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlpBaselineRule.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:02",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.8.4: At a minimum, the DLP solution SHALL restrict sharing credit card numbers, U.S. Individual Taxpayer Identification Numbers (ITIN), and U.S. Social Security numbers (SSN) via email.",
        "TestResult": "\nYour tenant does not have [Purview Data Loss Prevention Policies](https://purview.microsoft.com/datalossprevention/policies) enabled with the Sensitive Info Type of credit card numbers, U.S. Individual Taxpayer Identification Numbers (ITIN), and U.S. Social Security numbers (SSN).\n\nRequired Rules:\n\n| Credit Card Number | U.S. Social Security Number | U.S. Individual Taxpayer Identification Number |\n| --- | --- | --- |\n| ❌ Fail | ❌ Fail | ❌ Fail |\n\nRule Relationships:\n\n| Status | Policy | Rule |\n| --- | --- | --- |\n",
        "TestDescription": "At a minimum, the DLP solution SHALL restrict sharing credit card numbers, U.S. Individual Taxpayer Identification Numbers (ITIN), and U.S. Social Security numbers (SSN) via email.\n\n> Reference your organization's policy defining restricted information.\n\nRationale: Users may inadvertently share sensitive information with others who should not have access to it. Data loss prevention policies provide a way for agencies to detect and prevent unauthorized disclosures.\n\n#### Remediation action:\n\n1. Sign in to the **Microsoft Purview compliance portal**.\n2. Under the **Solutions** section, select **Data loss prevention**.\n3. Select [**Policies**](https://purview.microsoft.com/datalossprevention/policies) from the left menu.\n4. Select **Create policy**.\n5. From the **Categories** list, select **Custom**.\n6. From the **Templates** list, select **Custom policy** and then click **Next**.\n7. Edit the name and description of the policy if desired, then click **Next**.\n8. Under **Choose locations to apply the policy**, set **Status** to **On** for at least the Exchange email, OneDrive accounts, SharePoint sites, Teams chat and channel messages, and Devices locations, then click **Next**.\n9. Under **Define policy settings**, select **Create or customize advanced DLP rules**, and then click **Next**.\n10. Click **Create rule**. Assign the rule an appropriate name and description.\n11. Click **Add condition**, then **Content contains**.\n12. Click **Add**, then **Sensitive info types**.\n13. Add information types that protect information sensitive to the agency.\n\n    At a minimum, the agency should protect:\n    - Credit card numbers\n    - U.S. Individual Taxpayer Identification Numbers (ITIN)\n    - U.S. Social Security Numbers (SSN)\n    - All agency-defined PII and sensitive information\n\n14. Click **Add**.\n15. Under **Actions**, click **Add an action**.\n16. Check **Restrict Access or encrypt the content in Microsoft 365 locations**.\n17. Under this action, select **Block Everyone**.\n18. Under **User notifications**, turn on **Use notifications to inform your users and help educate them on the proper use of sensitive info**.\n19. Under **Microsoft 365 services**, a section that appears after user notifications are turned on, check the box next to **Notify users in Office 365 service with a policy tip**.\n20. Click **Save**, then **Next**.\n21. Select **Turn it on right away**, then click **Next**.\n22. Click **Submit**.\n\n#### Related links\n\n* [Purview admin center - Data loss prevention policies](https://purview.microsoft.com/datalossprevention/policies)\n* [CISA 8 Data Loss Prevention Solutions - MS.EXO.8.4](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo84v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L468)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.9.1",
      "Title": "Emails SHALL be filtered by attachment file types.",
      "Name": "CISA.MS.EXO.9.1: Emails SHALL be filtered by attachment file types.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.9.1",
        "CISA.MS.EXO.9.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaAttachmentFilter\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"policies exist.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAttachmentFilter.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because policies exist., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because policies exist., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAttachmentFilter.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"policies exist.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAttachmentFilter.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.9.1: Emails SHALL be filtered by attachment file types.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | File Filter Enabled | Extensions |\n| --- | --- | --- |\n| Default | ✅ Pass | ace, apk, app, appx, ani, & 48 others |\n",
        "TestDescription": "Emails SHALL be filtered by attachment file types.\n\nRationale: Malicious attachments often take the form of click-to-run files. Sharing high risk file types, when necessary, is better left to a means other than email; the dangers of allowing them to be sent over email outweigh any potential benefits. Filtering email attachments based on file types can prevent spread of malware distributed via click-to-run email attachments.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 9 Attachment File Type - MS.EXO.9.1v2](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo91v2)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L487)\n* [Microsoft Learn - Common attachments filter in anti-malware policies](https://learn.microsoft.com/en-us/defender-office-365/anti-malware-protection-about#common-attachments-filter-in-anti-malware-policies)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.9.2",
      "Title": "The attachment filter SHOULD attempt to determine the true file type and assess the file extension.",
      "Name": "CISA.MS.EXO.9.2: The attachment filter SHOULD attempt to determine the true file type and assess the file extension.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.9.2",
        "CISA.MS.EXO.9.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaAttachmentFileType\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"preset policies are enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAttachmentFileType.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because preset policies are enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAttachmentFileType.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"preset policies are enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaAttachmentFileType.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.9.2: The attachment filter SHOULD attempt to determine the true file type and assess the file extension.",
        "TestResult": "\nYour tenant does not have [standard and strict preset security policies enabled](https://security.microsoft.com/presetSecurityPolicies).\n\n| Policy | Status |\n| --- | --- |\n| Standard | ❌ Fail |\n| Strict | ❌ Fail |\n\n| Policy Name | File Filter Enabled |\n| --- | --- |\n| Default | ✅ Pass |\n",
        "TestDescription": "The attachment filter SHOULD attempt to determine the true file type and assess the file extension.\n\nRationale: Users can change a file extension at the end of a file name (e.g., notepad.exe to notepad.txt) to obscure the actual file type. Verifying the file type and checking that this matches the designated file extension can help detect instances where the file extension was changed.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select [**Preset Security Policies**](https://security.microsoft.com/presetSecurityPolicies).\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 9 Attachment File Type - MS.EXO.9.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo92v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L502)\n* [Microsoft Learn - True type matching in the common attachments filter](https://learn.microsoft.com/en-us/defender-office-365/anti-malware-protection-about#true-type-matching-in-the-common-attachments-filter)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.SHAREPOINT.1.1",
      "Title": "External sharing for SharePoint SHALL be limited to Existing guests or Only People in your organization.",
      "Name": "CISA.MS.SHAREPOINT.1.1: External sharing for SharePoint SHALL be limited to Existing guests or Only People in your organization.",
      "HelpUrl": "",
      "Tag": [
        "MS.SHAREPOINT",
        "MS.SHAREPOINT.1.1",
        "CISA.MS.SHAREPOINT.1.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-Test-MtCisaSpoSharing\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"external sharing is limited.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/spo/Test-MtCisaSpoSharing.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because external sharing is limited., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because external sharing is limited., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/spo/Test-MtCisaSpoSharing.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"external sharing is limited.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/spo/Test-MtCisaSpoSharing.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.SHAREPOINT.1.1: External sharing for SharePoint SHALL be limited to Existing guests or Only People in your organization.",
        "TestResult": "\nYour tenant does not restrict SharePoint Online sharing.\n\n* externalUserAndGuestSharing\n",
        "TestDescription": "External sharing for SharePoint SHALL be limited to Existing guests or Only People in your organization.\n\nRationale: Sharing information outside the organization via SharePoint increases the risk of unauthorized access. By limiting external sharing, administrators decrease the risk of access to information.\n\n#### Remediation action:\n\n1. Sign in to the [SharePoint admin center](https://go.microsoft.com/fwlink/?linkid=2185219).\n2. Select Policies > Sharing.\n3. Adjust external sharing slider for SharePoint to Existing guests or Only people in your organization.\n\n> ⚠️ WARNING: This will break existing sharing.\n\n4. Select Save.\n\n#### Related links\n\n* [CISA 1 External Sharing - MS.SHAREPOINT.1.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/sharepoint.md#mssharepoint11v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/SharepointConfig.rego#L68)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.SHAREPOINT.1.3",
      "Title": "External sharing SHALL be restricted to approved external domains and/or users in approved security groups per interagency collaboration needs.",
      "Name": "CISA.MS.SHAREPOINT.1.3: External sharing SHALL be restricted to approved external domains and/or users in approved security groups per interagency collaboration needs.",
      "HelpUrl": "",
      "Tag": [
        "MS.SHAREPOINT",
        "MS.SHAREPOINT.1.3",
        "CISA.MS.SHAREPOINT.1.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = Test-MtCisaSpoSharingAllowedDomain\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"external sharing is limited.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/spo/Test-MtCisaSpoSharingAllowedDomain.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because external sharing is limited., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because external sharing is limited., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/cisa/spo/Test-MtCisaSpoSharingAllowedDomain.Tests.ps1",
            "Line": "7",
            "LineText": "            $result | Should -Be $true -Because \"external sharing is limited.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/spo/Test-MtCisaSpoSharingAllowedDomain.Tests.ps1: line 7\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.SHAREPOINT.1.3: External sharing SHALL be restricted to approved external domains and/or users in approved security groups per interagency collaboration needs.",
        "TestResult": "\nYour tenant does not restrict SharePoint Online sharing to specific domains.",
        "TestDescription": "External sharing SHALL be restricted to approved external domains and/or users in approved security groups per interagency collaboration needs.\n\nRationale: By limiting sharing to domains or approved security groups used for interagency collaboration purposes, administrators help prevent sharing with unknown organizations and individuals.\n\n#### Remediation action:\n\nThis policy is only applicable if the external sharing slider on the admin page is set to any value other than Only People in your organization.\n1. Sign in to the [SharePoint admin center](https://go.microsoft.com/fwlink/?linkid=2185219).\n2. Select Policies > Sharing.\n3. Expand More external sharing settings.\n4. Select Limit external sharing by domain.\n5. Select Add domains.\n6. Add each approved external domain users are allowed to share files with.\n7. Select Manage security groups\n8. Add each approved security group. Members of these groups will be allowed to share files externally.\n9. Select Save.\n\n#### Related links\n\n* [CISA 1 External Sharing - MS.SHAREPOINT.1.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/sharepoint.md#mssharepoint13v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/SharepointConfig.rego#L130)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CTSO.001",
      "Title": "SharePoint Online access requires MFA",
      "Name": "CTSO.001: SharePoint Online access requires MFA",
      "HelpUrl": "",
      "Tag": [],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $userId = (Get-MgUser -UserId 'DiegoS@elapora.com').Id\n        $sharePointAppId = '67ad5377-2d78-4ac2-a867-6300cda00e85'\n\n        $policiesEnforced = Test-MtConditionalAccessWhatIf -UserId $userId `\n            -IncludeApplications $sharePointAppId `\n\n        $policiesEnforced.grantControls.builtInControls | Should -Contain \"mfa\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Custom/Test-WhatIf.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "The 'Get-MgUser' command was found in the module 'Microsoft.Graph.Users', but the module could not be loaded due to the following error: [Could not load file or assembly 'Microsoft.Graph.Authentication, Version=2.20.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Assembly with same name is already loaded]\nFor more information, run 'Import-Module Microsoft.Graph.Users'.",
            "CommandName": "Get-MgUser",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "The 'Get-MgUser' command was found in the module 'Microsoft.Graph.Users', but the module could not be loaded due to the following error: [Could not load file or assembly 'Microsoft.Graph.Authentication, Version=2.20.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Assembly with same name is already loaded]\nFor more information, run 'Import-Module Microsoft.Graph.Users'.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": "System.Management.Automation.CmdletInvocationException: Could not load file or assembly 'Microsoft.Graph.Authentication, Version=2.20.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Assembly with same name is already loaded\n ---> System.IO.FileLoadException: Could not load file or assembly 'Microsoft.Graph.Authentication, Version=2.20.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. Assembly with same name is already loaded\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadBinaryModule(PSModuleInfo parentModule, String moduleName, String fileName, Assembly assemblyToLoad, String moduleBase, SessionState ss, ImportModuleOptions options, ManifestProcessingFlags manifestProcessingFlags, String prefix, Boolean& found, String shortModuleName, Boolean disableFormatUpdates)\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModule(PSModuleInfo parentModule, String fileName, String moduleBase, String prefix, SessionState ss, Object privateData, ImportModuleOptions& options, ManifestProcessingFlags manifestProcessingFlags, Boolean& found, Boolean& moduleFileFound)\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModuleNamedInManifest(PSModuleInfo parentModule, ModuleSpecification moduleSpecification, String moduleBase, Boolean searchModulePath, String prefix, SessionState ss, ImportModuleOptions options, ManifestProcessingFlags manifestProcessingFlags, Object privateData, Boolean& found, String shortModuleName, Nullable`1 manifestLanguageMode)\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModuleManifest(String moduleManifestPath, ExternalScriptInfo manifestScriptInfo, Hashtable data, Hashtable localizedData, ManifestProcessingFlags manifestProcessingFlags, Version minimumVersion, Version maximumVersion, Version requiredVersion, Nullable`1 requiredModuleGuid, ImportModuleOptions& options, Boolean& containedErrors)\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadModule(PSModuleInfo parentModule, String fileName, String moduleBase, String prefix, SessionState ss, Object privateData, ImportModuleOptions& options, ManifestProcessingFlags manifestProcessingFlags, Boolean& found, Boolean& moduleFileFound)\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadUsingExtensions(PSModuleInfo parentModule, String moduleName, String fileBaseName, String extension, String moduleBase, String prefix, SessionState ss, ImportModuleOptions options, ManifestProcessingFlags manifestProcessingFlags, Boolean& found, Boolean& moduleFileFound)\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadUsingMultiVersionModuleBase(String moduleBase, ManifestProcessingFlags manifestProcessingFlags, ImportModuleOptions importModuleOptions, Boolean& found)\n   at Microsoft.PowerShell.Commands.ModuleCmdletBase.LoadUsingModulePath(PSModuleInfo parentModule, IEnumerable`1 modulePath, String name, SessionState ss, ImportModuleOptions options, ManifestProcessingFlags manifestProcessingFlags, PSModuleInfo& module)\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ImportModule_LocallyViaName(ImportModuleOptions importModuleOptions, String name)\n   at Microsoft.PowerShell.Commands.ImportModuleCommand.ProcessRecord()\n   at System.Management.Automation.CommandProcessor.ProcessRecord()\n   --- End of inner exception stack trace ---\n   at System.Management.Automation.Runspaces.PipelineBase.Invoke(IEnumerable input)\n   at System.Management.Automation.PowerShell.Worker.ConstructPipelineAndDoWork(Runspace rs, Boolean performSyncInvoke)\n   at System.Management.Automation.PowerShell.CoreInvokeHelper[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\n   at System.Management.Automation.PowerShell.CoreInvoke[TInput,TOutput](PSDataCollection`1 input, PSDataCollection`1 output, PSInvocationSettings settings)\n   at System.Management.Automation.PowerShell.Invoke[T]()\n   at System.Management.Automation.CommandDiscovery.AutoloadSpecifiedModule(String moduleName, ExecutionContext context, SessionStateEntryVisibility visibility, Exception& exception)",
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\n   at <ScriptBlock>(Closure, FunctionContext)"
          },
          "TargetObject": "Get-MgUser",
          "CategoryInfo": {
            "Category": 13,
            "Activity": "",
            "Reason": "CommandNotFoundException",
            "TargetName": "Get-MgUser",
            "TargetType": "String"
          },
          "FullyQualifiedErrorId": "CouldNotAutoloadMatchingModule",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 4,
            "OffsetInLine": 20,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/GitHub/maester/tests/Custom/Test-WhatIf.Tests.ps1",
            "Line": "        $userId = (Get-MgUser -UserId 'DiegoS@elapora.com').Id\n",
            "Statement": "Get-MgUser",
            "PositionMessage": "At /Users/merill/GitHub/maester/tests/Custom/Test-WhatIf.Tests.ps1:4 char:20\n+         $userId = (Get-MgUser -UserId 'DiegoS@elapora.com').Id\n+                    ~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/GitHub/maester/tests/Custom",
            "PSCommandPath": "/Users/merill/GitHub/maester/tests/Custom/Test-WhatIf.Tests.ps1",
            "InvocationName": "Get-MgUser",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, /Users/merill/GitHub/maester/tests/Custom/Test-WhatIf.Tests.ps1: line 4\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Contoso.ConditionalAccess",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "EIDSCA.AF01",
      "Title": "Authentication Method - FIDO2 security key - State.",
      "Name": "EIDSCA.AF01: Authentication Method - FIDO2 security key - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\n            .state -eq 'enabled'\n        #>\n        Test-MtEidscaControl -CheckId AF01 | Should -Be 'enabled'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AF01: Authentication Method - FIDO2 security key - State. See https://maester.dev/docs/tests/EIDSCA.AF01",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')**\n",
        "TestDescription": "Whether the FIDO2 security keys is enabled in the tenant.\n\nenabled\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\n.state -eq 'enabled'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AF02",
      "Title": "Authentication Method - FIDO2 security key - Allow self-service set up.",
      "Name": "EIDSCA.AF02: Authentication Method - FIDO2 security key - Allow self-service set up.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF02"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\n            .isSelfServiceRegistrationAllowed -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId AF02 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AF02: Authentication Method - FIDO2 security key - Allow self-service set up. See https://maester.dev/docs/tests/EIDSCA.AF02",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')**\n",
        "TestDescription": "Allows users to register a FIDO key through the MySecurityInfo portal, even if enabled by Authentication Methods policy.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\n.isSelfServiceRegistrationAllowed -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AF03",
      "Title": "Authentication Method - FIDO2 security key - Enforce attestation.",
      "Name": "EIDSCA.AF03: Authentication Method - FIDO2 security key - Enforce attestation.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF03"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\n            .isAttestationEnforced -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId AF03 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "308",
            "LineText": "        Test-MtEidscaControl -CheckId AF03 | Should -Be 'true'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 308\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AF03: Authentication Method - FIDO2 security key - Enforce attestation. See https://maester.dev/docs/tests/EIDSCA.AF03",
        "TestResult": "\nYour tenant is configured as **False**.\n\nThe recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')**\n",
        "TestDescription": "Requires the FIDO security key metadata to be published and verified with the FIDO Alliance Metadata Service, and also pass Microsoft's additional set of validation testing.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\n.isAttestationEnforced -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AF04",
      "Title": "Authentication Method - FIDO2 security key - Enforce key restrictions.",
      "Name": "EIDSCA.AF04: Authentication Method - FIDO2 security key - Enforce key restrictions.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF04"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\n            .keyRestrictions.isEnforced -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId AF04 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "317",
            "LineText": "        Test-MtEidscaControl -CheckId AF04 | Should -Be 'true'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 317\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AF04: Authentication Method - FIDO2 security key - Enforce key restrictions. See https://maester.dev/docs/tests/EIDSCA.AF04",
        "TestResult": "\nYour tenant is configured as **False**.\n\nThe recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')**\n",
        "TestDescription": "Manages if registration of FIDO2 keys should be restricted.\n\nRestrict usage of FIDO2 from unauthorized vendors or platforms\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\n.keyRestrictions.isEnforced -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "Low",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AG01",
      "Title": "Authentication Method - General Settings - Manage migration.",
      "Name": "EIDSCA.AG01: Authentication Method - General Settings - Manage migration.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AG01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AG01"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\"\n            .policyMigrationState -in @('migrationComplete', '')\n        #>\n        Test-MtEidscaControl -CheckId AG01 | Should -BeIn @('migrationComplete', '')\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "Message": "Cannot validate argument on parameter 'Severity'. The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.",
            "ParameterName": "Severity",
            "ParameterType": "string",
            "TypeSpecified": "string",
            "ErrorId": "ParameterArgumentValidationError",
            "Line": 38,
            "Offset": 66,
            "CommandInvocation": "System.Management.Automation.InvocationInfo",
            "ErrorRecord": "Cannot validate argument on parameter 'Severity'. The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": "System.Management.Automation.ValidationMetadataException: The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.\n   at System.Management.Automation.ValidateSetAttribute.ValidateElement(Object element)\n   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)",
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)\n   at System.Management.Automation.PSScriptCmdlet.RunClause(Action`1 clause, Object dollarUnderbar, Object inputToProcess)\n   at System.Management.Automation.CommandProcessorBase.Complete()"
          },
          "TargetObject": null,
          "CategoryInfo": {
            "Category": 6,
            "Activity": "Test-MtEidscaAG01",
            "Reason": "ParameterBindingValidationException",
            "TargetName": "",
            "TargetType": ""
          },
          "FullyQualifiedErrorId": "ParameterArgumentValidationError,Test-MtEidscaAG01",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": "Test-MtEidscaAG01",
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 28,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1",
            "Line": "    & \"Test-MtEidsca$CheckId\"\n",
            "Statement": "& \"Test-MtEidsca$CheckId\"",
            "PositionMessage": "At /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1:28 char:5\n+     & \"Test-MtEidsca$CheckId\"\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/GitHub/maester/powershell/public/eidsca",
            "PSCommandPath": "/Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1",
            "InvocationName": "&",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Test-MtEidscaAG01, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaAG01.ps1: line 38\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 189\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "EIDSCA.AG02",
      "Title": "Authentication Method - General Settings - Report suspicious activity - State.",
      "Name": "EIDSCA.AG02: Authentication Method - General Settings - Report suspicious activity - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AG02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AG02"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\"\n            .reportSuspiciousActivitySettings.state -eq 'enabled'\n        #>\n        Test-MtEidscaControl -CheckId AG02 | Should -Be 'enabled'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nString lengths are both 7.\nStrings differ at index 0.\nExpected: 'enabled'\nBut was:  'default'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nString lengths are both 7.\nStrings differ at index 0.\nExpected: 'enabled'\nBut was:  'default'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "198",
            "LineText": "        Test-MtEidscaControl -CheckId AG02 | Should -Be 'enabled'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 198\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AG02: Authentication Method - General Settings - Report suspicious activity - State. See https://maester.dev/docs/tests/EIDSCA.AG02",
        "TestResult": "\nYour tenant is configured as **default**.\n\nThe recommended value is **'enabled'** for **policies/authenticationMethodsPolicy**\n",
        "TestDescription": "Allows users to report suspicious activities if they receive an authentication request that they did not initiate. This control is available when using the Microsoft Authenticator app and voice calls. Reporting suspicious activity will set the user's risk to high. If the user is subject to risk-based Conditional Access policies, they may be blocked.\n\nAllows to integrate report of fraud attempt by users to identity protection: Users who report an MFA prompt as suspicious are set to High User Risk. Administrators can use risk-based policies to limit access for these users, or enable self-service password reset (SSPR) for users to remediate problems on their own.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\n.reportSuspiciousActivitySettings.state -eq 'enabled'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [Get authenticationMethodsPolicy - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/authenticationmethodspolicy-get)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AuthMethodsSettings)\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AG03",
      "Title": "Authentication Method - General Settings - Report suspicious activity - Included users/groups.",
      "Name": "EIDSCA.AG03: Authentication Method - General Settings - Report suspicious activity - Included users/groups.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AG03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AG03"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\"\n            .reportSuspiciousActivitySettings.includeTarget.id -eq 'all_users'\n        #>\n        Test-MtEidscaControl -CheckId AG03 | Should -Be 'all_users'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AG03: Authentication Method - General Settings - Report suspicious activity - Included users/groups. See https://maester.dev/docs/tests/EIDSCA.AG03",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'all_users'** for **policies/authenticationMethodsPolicy**\n",
        "TestDescription": "Object Id or scope of users which will be included to report suspicious activities if they receive an authentication request that they did not initiate.\n\nApply this feature to all users.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\n.reportSuspiciousActivitySettings.includeTarget.id -eq 'all_users'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [Get authenticationMethodsPolicy - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/authenticationmethodspolicy-get)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AuthMethodsSettings)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AM01",
      "Title": "Authentication Method - Microsoft Authenticator - State.",
      "Name": "EIDSCA.AM01: Authentication Method - Microsoft Authenticator - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\n            .state -eq 'enabled'\n        #>\n        Test-MtEidscaControl -CheckId AM01 | Should -Be 'enabled'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AM01: Authentication Method - Microsoft Authenticator - State. See https://maester.dev/docs/tests/EIDSCA.AM01",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\n",
        "TestDescription": "Whether the Authenticator App is enabled in the tenant.\n\nenabled\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\n.state -eq 'enabled'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AM02",
      "Title": "Authentication Method - Microsoft Authenticator - Allow use of Microsoft Authenticator OTP.",
      "Name": "EIDSCA.AM02: Authentication Method - Microsoft Authenticator - Allow use of Microsoft Authenticator OTP.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM02"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\n            .isSoftwareOathEnabled -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId AM02 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AM02: Authentication Method - Microsoft Authenticator - Allow use of Microsoft Authenticator OTP. See https://maester.dev/docs/tests/EIDSCA.AM02",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\n",
        "TestDescription": "Defines if users can use the OTP code generated by the Authenticator App.\n\ntrue\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\n.isSoftwareOathEnabled -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AM03",
      "Title": "Authentication Method - Microsoft Authenticator - Require number matching for push notifications.",
      "Name": "EIDSCA.AM03: Authentication Method - Microsoft Authenticator - Require number matching for push notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM03"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\n            .featureSettings.numberMatchingRequiredState.state -eq 'enabled'\n        #>\n        Test-MtEidscaControl -CheckId AM03 | Should -Be 'enabled'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AM03: Authentication Method - Microsoft Authenticator - Require number matching for push notifications. See https://maester.dev/docs/tests/EIDSCA.AM03",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\n",
        "TestDescription": "Defines if number matching is required for MFA notifications.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\n.featureSettings.numberMatchingRequiredState.state -eq 'enabled'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AM04",
      "Title": "Authentication Method - Microsoft Authenticator - Included users/groups of number matching for push notifications.",
      "Name": "EIDSCA.AM04: Authentication Method - Microsoft Authenticator - Included users/groups of number matching for push notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM04"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\n            .featureSettings.numberMatchingRequiredState.includeTarget.id -eq 'all_users'\n        #>\n        Test-MtEidscaControl -CheckId AM04 | Should -Be 'all_users'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AM04: Authentication Method - Microsoft Authenticator - Included users/groups of number matching for push notifications. See https://maester.dev/docs/tests/EIDSCA.AM04",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'all_users'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\n",
        "TestDescription": "Object Id or scope of users which will be showing number matching in the Authenticator App.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\n.featureSettings.numberMatchingRequiredState.includeTarget.id -eq 'all_users'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AM06",
      "Title": "Authentication Method - Microsoft Authenticator - Show application name in push and passwordless notifications.",
      "Name": "EIDSCA.AM06: Authentication Method - Microsoft Authenticator - Show application name in push and passwordless notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM06",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM06"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\n            .featureSettings.displayAppInformationRequiredState.state -eq 'enabled'\n        #>\n        Test-MtEidscaControl -CheckId AM06 | Should -Be 'enabled'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AM06: Authentication Method - Microsoft Authenticator - Show application name in push and passwordless notifications. See https://maester.dev/docs/tests/EIDSCA.AM06",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\n",
        "TestDescription": "Determines whether the user's Authenticator app will show them the client app they are signing into.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\n.featureSettings.displayAppInformationRequiredState.state -eq 'enabled'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AM07",
      "Title": "Authentication Method - Microsoft Authenticator - Included users/groups to show application name in push and passwordless notifications.",
      "Name": "EIDSCA.AM07: Authentication Method - Microsoft Authenticator - Included users/groups to show application name in push and passwordless notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM07",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM07"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\n            .featureSettings.displayAppInformationRequiredState.includeTarget.id -eq 'all_users'\n        #>\n        Test-MtEidscaControl -CheckId AM07 | Should -Be 'all_users'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AM07: Authentication Method - Microsoft Authenticator - Included users/groups to show application name in push and passwordless notifications. See https://maester.dev/docs/tests/EIDSCA.AM07",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'all_users'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\n",
        "TestDescription": "Object Id or scope of users which will be showing app information in the Authenticator App.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\n.featureSettings.displayAppInformationRequiredState.includeTarget.id -eq 'all_users'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AM09",
      "Title": "Authentication Method - Microsoft Authenticator - Show geographic location in push and passwordless notifications.",
      "Name": "EIDSCA.AM09: Authentication Method - Microsoft Authenticator - Show geographic location in push and passwordless notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM09",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM09"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\n            .featureSettings.displayLocationInformationRequiredState.state -eq 'enabled'\n        #>\n        Test-MtEidscaControl -CheckId AM09 | Should -Be 'enabled'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AM09: Authentication Method - Microsoft Authenticator - Show geographic location in push and passwordless notifications. See https://maester.dev/docs/tests/EIDSCA.AM09",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\n",
        "TestDescription": "Determines whether the user's Authenticator app will show them the geographic location of where the authentication request originated from.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\n.featureSettings.displayLocationInformationRequiredState.state -eq 'enabled'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AM10",
      "Title": "Authentication Method - Microsoft Authenticator - Included users/groups to show geographic location in push and passwordless notifications.",
      "Name": "EIDSCA.AM10: Authentication Method - Microsoft Authenticator - Included users/groups to show geographic location in push and passwordless notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM10",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM10"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\n            .featureSettings.displayLocationInformationRequiredState.includeTarget.id -eq 'all_users'\n        #>\n        Test-MtEidscaControl -CheckId AM10 | Should -Be 'all_users'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AM10: Authentication Method - Microsoft Authenticator - Included users/groups to show geographic location in push and passwordless notifications. See https://maester.dev/docs/tests/EIDSCA.AM10",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'all_users'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\n",
        "TestDescription": "Object Id or scope of users which will be showing geographic location in the Authenticator App.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\n.featureSettings.displayLocationInformationRequiredState.includeTarget.id -eq 'all_users'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AP01",
      "Title": "Default Authorization Settings - Enabled Self service password reset for administrators.",
      "Name": "EIDSCA.AP01: Default Authorization Settings - Enabled Self service password reset for administrators.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP01"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .allowedToUseSSPR -eq 'false'\n        #>\n        Test-MtEidscaControl -CheckId AP01 | Should -Be 'false'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "Message": "Cannot validate argument on parameter 'Severity'. The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.",
            "ParameterName": "Severity",
            "ParameterType": "string",
            "TypeSpecified": "string",
            "ErrorId": "ParameterArgumentValidationError",
            "Line": 41,
            "Offset": 66,
            "CommandInvocation": "System.Management.Automation.InvocationInfo",
            "ErrorRecord": "Cannot validate argument on parameter 'Severity'. The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": "System.Management.Automation.ValidationMetadataException: The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.\n   at System.Management.Automation.ValidateSetAttribute.ValidateElement(Object element)\n   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)",
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)\n   at System.Management.Automation.PSScriptCmdlet.RunClause(Action`1 clause, Object dollarUnderbar, Object inputToProcess)\n   at System.Management.Automation.CommandProcessorBase.Complete()"
          },
          "TargetObject": null,
          "CategoryInfo": {
            "Category": 6,
            "Activity": "Test-MtEidscaAP01",
            "Reason": "ParameterBindingValidationException",
            "TargetName": "",
            "TargetType": ""
          },
          "FullyQualifiedErrorId": "ParameterArgumentValidationError,Test-MtEidscaAP01",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": "Test-MtEidscaAP01",
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 28,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1",
            "Line": "    & \"Test-MtEidsca$CheckId\"\n",
            "Statement": "& \"Test-MtEidsca$CheckId\"",
            "PositionMessage": "At /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1:28 char:5\n+     & \"Test-MtEidsca$CheckId\"\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/GitHub/maester/powershell/public/eidsca",
            "PSCommandPath": "/Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1",
            "InvocationName": "&",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Test-MtEidscaAP01, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaAP01.ps1: line 41\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 14\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "EIDSCA.AP04",
      "Title": "Default Authorization Settings - Guest invite restrictions.",
      "Name": "EIDSCA.AP04: Default Authorization Settings - Guest invite restrictions.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP04"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .allowInvitesFrom -in @('adminsAndGuestInviters','none')\n        #>\n        Test-MtEidscaControl -CheckId AP04 | Should -BeIn @('adminsAndGuestInviters','none')\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected collection @('adminsAndGuestInviters', 'none') to contain 'adminsGuestInvitersAndAllMembers', but it was not found.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected collection @('adminsAndGuestInviters', 'none') to contain 'adminsGuestInvitersAndAllMembers', but it was not found.",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "23",
            "LineText": "        Test-MtEidscaControl -CheckId AP04 | Should -BeIn @('adminsAndGuestInviters','none')",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8048\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 23\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AP04: Default Authorization Settings - Guest invite restrictions. See https://maester.dev/docs/tests/EIDSCA.AP04",
        "TestResult": "\nYour tenant is configured as **adminsGuestInvitersAndAllMembers**.\n\nThe recommended value is one of the following values **@('adminsAndGuestInviters','none')** for **policies/authorizationPolicy**\n",
        "TestDescription": "Manages controls who can invite guests to your directory to collaborate on resources secured by your Entra ID (Azure AD), such as SharePoint sites or Azure resources.\n\nCISA SCuBA 2.18: Only users with the Guest Inviter role SHOULD be able to invite guest users\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\n.allowInvitesFrom -in @('adminsAndGuestInviters','none')\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AllowlistPolicyBlade)\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AP05",
      "Title": "Default Authorization Settings - Sign-up for email based subscription.",
      "Name": "EIDSCA.AP05: Default Authorization Settings - Sign-up for email based subscription.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP05",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP05"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .allowedToSignUpEmailBasedSubscriptions -eq 'false'\n        #>\n        Test-MtEidscaControl -CheckId AP05 | Should -Be 'false'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   4\nStrings differ at index 0.\nExpected: 'false'\nBut was:  'True'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   4\nStrings differ at index 0.\nExpected: 'false'\nBut was:  'True'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "32",
            "LineText": "        Test-MtEidscaControl -CheckId AP05 | Should -Be 'false'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 32\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AP05: Default Authorization Settings - Sign-up for email based subscription. See https://maester.dev/docs/tests/EIDSCA.AP05",
        "TestResult": "\nYour tenant is configured as **True**.\n\nThe recommended value is **'false'** for **policies/authorizationPolicy**\n",
        "TestDescription": "Indicates whether users can sign up for email based subscriptions.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\n.allowedToSignUpEmailBasedSubscriptions -eq 'false'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\n\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AP06",
      "Title": "Default Authorization Settings - User can join the tenant by email validation.",
      "Name": "EIDSCA.AP06: Default Authorization Settings - User can join the tenant by email validation.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP06",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP06"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .allowEmailVerifiedUsersToJoinOrganization -eq 'false'\n        #>\n        Test-MtEidscaControl -CheckId AP06 | Should -Be 'false'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   4\nStrings differ at index 0.\nExpected: 'false'\nBut was:  'True'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   4\nStrings differ at index 0.\nExpected: 'false'\nBut was:  'True'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "41",
            "LineText": "        Test-MtEidscaControl -CheckId AP06 | Should -Be 'false'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 41\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AP06: Default Authorization Settings - User can join the tenant by email validation. See https://maester.dev/docs/tests/EIDSCA.AP06",
        "TestResult": "\nYour tenant is configured as **True**.\n\nThe recommended value is **'false'** for **policies/authorizationPolicy**\n",
        "TestDescription": "Controls whether users can join the tenant by email validation. To join, the user must have an email address in a domain which matches one of the verified domains in the tenant.\n\n[Self-service sign up for email-verified users - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/enterprise-users/directory-self-service-signup)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\n.allowEmailVerifiedUsersToJoinOrganization -eq 'false'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\n\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AP07",
      "Title": "Default Authorization Settings - Guest user access.",
      "Name": "EIDSCA.AP07: Default Authorization Settings - Guest user access.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP07",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP07"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .guestUserRoleId -eq '2af84b1e-32c8-42b7-82bc-daa82404023b'\n        #>\n        Test-MtEidscaControl -CheckId AP07 | Should -Be '2af84b1e-32c8-42b7-82bc-daa82404023b'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AP07: Default Authorization Settings - Guest user access. See https://maester.dev/docs/tests/EIDSCA.AP07",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'2af84b1e-32c8-42b7-82bc-daa82404023b'** for **policies/authorizationPolicy**\n",
        "TestDescription": "Represents role templateId for the role that should be granted to guest user.\n\nCISA SCuBA 2.18: Guest users SHOULD have limited access to Entra ID (Azure AD) directory objects.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\n.guestUserRoleId -eq '2af84b1e-32c8-42b7-82bc-daa82404023b'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AllowlistPolicyBlade)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AP08",
      "Title": "Default Authorization Settings - User consent policy assigned for applications.",
      "Name": "EIDSCA.AP08: Default Authorization Settings - User consent policy assigned for applications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP08",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP08"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .permissionGrantPolicyIdsAssignedToDefaultUserRole -clike 'ManagePermissionGrantsForSelf*' -eq 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\n        #>\n        Test-MtEidscaControl -CheckId AP08 | Should -Be 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 56\nActual length:   59\nStrings differ at index 54.\nExpected: 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\nBut was:  'ManagePermissionGrantsForSelf.microsoft-user-default-legacy'\n           ------------------------------------------------------^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 56\nActual length:   59\nStrings differ at index 54.\nExpected: 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\nBut was:  'ManagePermissionGrantsForSelf.microsoft-user-default-legacy'\n           ------------------------------------------------------^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "59",
            "LineText": "        Test-MtEidscaControl -CheckId AP08 | Should -Be 'ManagePermissionGrantsForSelf.microsoft-user-default-low'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 59\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AP08: Default Authorization Settings - User consent policy assigned for applications. See https://maester.dev/docs/tests/EIDSCA.AP08",
        "TestResult": "\nYour tenant is configured as **ManagePermissionGrantsForSelf.microsoft-user-default-legacy**.\n\nThe recommended value is **'ManagePermissionGrantsForSelf.microsoft-user-default-low'** for **policies/authorizationPolicy**\n",
        "TestDescription": "Defines if user consent to apps is allowed, and if it is, which app consent policy (permissionGrantPolicy) governs the permissions.\n\nMicrosoft recommends to allow to user consent for apps from verified publisher for selected permissions. CISA SCuBA 2.7 defines that all Non-Admin Users SHALL Be Prevented From Providing Consent To Third-Party Applications.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\n.permissionGrantPolicyIdsAssignedToDefaultUserRole -clike 'ManagePermissionGrantsForSelf*' -eq 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserManagementMenuBlade/~/UserSettings)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AP09",
      "Title": "Default Authorization Settings - Allow user consent on risk-based apps.",
      "Name": "EIDSCA.AP09: Default Authorization Settings - Allow user consent on risk-based apps.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP09",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP09"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .allowUserConsentForRiskyApps -eq 'false'\n        #>\n        Test-MtEidscaControl -CheckId AP09 | Should -Be 'false'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AP09: Default Authorization Settings - Allow user consent on risk-based apps. See https://maester.dev/docs/tests/EIDSCA.AP09",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'false'** for **policies/authorizationPolicy**\n",
        "TestDescription": "Indicates whether user consent for risky apps is allowed. For example, consent requests for newly registered multi-tenant apps that are not publisher verified and require non-basic permissions are considered risky.\n\n[Configure risk-based step-up consent - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/manage-apps/configure-risk-based-step-up-consent)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\n.allowUserConsentForRiskyApps -eq 'false'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AP10",
      "Title": "Default Authorization Settings - Default User Role Permissions - Allowed to create Apps.",
      "Name": "EIDSCA.AP10: Default Authorization Settings - Default User Role Permissions - Allowed to create Apps.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP10",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP10"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .defaultUserRolePermissions.allowedToCreateApps -eq 'false'\n        #>\n        Test-MtEidscaControl -CheckId AP10 | Should -Be 'false'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AP10: Default Authorization Settings - Default User Role Permissions - Allowed to create Apps. See https://maester.dev/docs/tests/EIDSCA.AP10",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'false'** for **policies/authorizationPolicy**\n",
        "TestDescription": "Controls if non-admin users may register custom-developed applications for use within this directory.\n\nCISA SCuBA 2.6: Only Administrators SHALL Be Allowed To Register Third-Party Applications\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\n.defaultUserRolePermissions.allowedToCreateApps -eq 'false'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserManagementMenuBlade/~/UserSettings)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AP14",
      "Title": "Default Authorization Settings - Default User Role Permissions - Allowed to read other users.",
      "Name": "EIDSCA.AP14: Default Authorization Settings - Default User Role Permissions - Allowed to read other users.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP14",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP14"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\n            .defaultUserRolePermissions.allowedToReadOtherUsers -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId AP14 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "Message": "Cannot validate argument on parameter 'Severity'. The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.",
            "ParameterName": "Severity",
            "ParameterType": "string",
            "TypeSpecified": "string",
            "ErrorId": "ParameterArgumentValidationError",
            "Line": 38,
            "Offset": 66,
            "CommandInvocation": "System.Management.Automation.InvocationInfo",
            "ErrorRecord": "Cannot validate argument on parameter 'Severity'. The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": "System.Management.Automation.ValidationMetadataException: The argument \"Informational\" does not belong to the set \"Critical,High,Medium,Low,Info,\" specified by the ValidateSet attribute. Supply an argument that is in the set and then try the command again.\n   at System.Management.Automation.ValidateSetAttribute.ValidateElement(Object element)\n   at System.Management.Automation.ParameterBinderBase.BindParameter(CommandParameterInternal parameter, CompiledCommandParameter parameterMetadata, ParameterBindingFlags flags)",
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)\n   at System.Management.Automation.PSScriptCmdlet.RunClause(Action`1 clause, Object dollarUnderbar, Object inputToProcess)\n   at System.Management.Automation.CommandProcessorBase.Complete()"
          },
          "TargetObject": null,
          "CategoryInfo": {
            "Category": 6,
            "Activity": "Test-MtEidscaAP14",
            "Reason": "ParameterBindingValidationException",
            "TargetName": "",
            "TargetType": ""
          },
          "FullyQualifiedErrorId": "ParameterArgumentValidationError,Test-MtEidscaAP14",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": "Test-MtEidscaAP14",
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 28,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1",
            "Line": "    & \"Test-MtEidsca$CheckId\"\n",
            "Statement": "& \"Test-MtEidsca$CheckId\"",
            "PositionMessage": "At /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1:28 char:5\n+     & \"Test-MtEidsca$CheckId\"\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/GitHub/maester/powershell/public/eidsca",
            "PSCommandPath": "/Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1",
            "InvocationName": "&",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Test-MtEidscaAP14, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaAP14.ps1: line 38\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 86\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "EIDSCA.AS04",
      "Title": "Authentication Method - SMS - Use for sign-in.",
      "Name": "EIDSCA.AS04: Authentication Method - SMS - Use for sign-in.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AS04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AS04"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Sms')\"\n            .includeTargets.isUsableForSignIn -eq 'false'\n        #>\n        Test-MtEidscaControl -CheckId AS04 | Should -Be 'false'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AS04: Authentication Method - SMS - Use for sign-in. See https://maester.dev/docs/tests/EIDSCA.AS04",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'false'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Sms')**\n",
        "TestDescription": "Determines if users can use this authentication method to sign in to Microsoft Entra ID. true if users can use this method for primary authentication, otherwise false.\n\nAvoid to use SMS as primary sign in factor (instead of a password) and consider to implement a MFA or passwordless option also for your special user groups, such as front-line workers.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Sms')\n.includeTargets.isUsableForSignIn -eq 'false'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Sms')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [phoneAuthenticationMethod resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/phoneauthenticationmethod)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AT01",
      "Title": "Authentication Method - Temporary Access Pass - State.",
      "Name": "EIDSCA.AT01: Authentication Method - Temporary Access Pass - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AT01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AT01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')\"\n            .state -eq 'enabled'\n        #>\n        Test-MtEidscaControl -CheckId AT01 | Should -Be 'enabled'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AT01: Authentication Method - Temporary Access Pass - State. See https://maester.dev/docs/tests/EIDSCA.AT01",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')**\n",
        "TestDescription": "Whether the Temporary Access Pass is enabled in the tenant.\n\nUse Temporary Access Pass for secure onboarding users (initial password replacement) and enforce MFA for registering security information in Conditional Access Policy.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')\n.state -eq 'enabled'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [temporaryAccessPassAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/temporaryaccesspassauthenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AT02",
      "Title": "Authentication Method - Temporary Access Pass - One-time.",
      "Name": "EIDSCA.AT02: Authentication Method - Temporary Access Pass - One-time.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AT02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AT02"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')\"\n            .isUsableOnce -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId AT02 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "354",
            "LineText": "        Test-MtEidscaControl -CheckId AT02 | Should -Be 'true'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 354\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AT02: Authentication Method - Temporary Access Pass - One-time. See https://maester.dev/docs/tests/EIDSCA.AT02",
        "TestResult": "\nYour tenant is configured as **False**.\n\nThe recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')**\n",
        "TestDescription": "Determines whether the pass is limited to a one-time use.\n\nAvoid to allow reusable passes and restrict usage to one-time use (if applicable)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')\n.isUsableOnce -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [temporaryAccessPassAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/temporaryaccesspassauthenticationmethodconfiguration)\n\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AV01",
      "Title": "Authentication Method - Voice call - State.",
      "Name": "EIDSCA.AV01: Authentication Method - Voice call - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AV01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AV01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Voice')\"\n            .state -eq 'disabled'\n        #>\n        Test-MtEidscaControl -CheckId AV01 | Should -Be 'disabled'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AV01: Authentication Method - Voice call - State. See https://maester.dev/docs/tests/EIDSCA.AV01",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'disabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Voice')**\n",
        "TestDescription": "Whether the Voice call is enabled in the tenant.\n\nChoose authentication methods with number matching (Authenticator) \n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Voice')\n.state -eq 'disabled'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Voice')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.CP03",
      "Title": "Default Settings - Consent Policy Settings - Block user consent for risky apps.",
      "Name": "EIDSCA.CP03: Default Settings - Consent Policy Settings - Block user consent for risky apps.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CP03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CP03"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'BlockUserConsentForRiskyApps' | select-object -expand value -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId CP03 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.CP03: Default Settings - Consent Policy Settings - Block user consent for risky apps. See https://maester.dev/docs/tests/EIDSCA.CP03",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'true'** for **settings**\n",
        "TestDescription": "Defines whether user consent will be blocked when a risky request is detected\n\n[Configure risk-based step-up consent - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/manage-apps/configure-risk-based-step-up-consent)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'BlockUserConsentForRiskyApps' | select-object -expand value -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.CP04",
      "Title": "Default Settings - Consent Policy Settings - Users can request admin consent to apps they are unable to consent to.",
      "Name": "EIDSCA.CP04: Default Settings - Consent Policy Settings - Users can request admin consent to apps they are unable to consent to.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CP04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CP04"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'EnableAdminConsentRequests' | select-object -expand value -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId CP04 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'false'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'false'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "114",
            "LineText": "        Test-MtEidscaControl -CheckId CP04 | Should -Be 'true'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 114\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.CP04: Default Settings - Consent Policy Settings - Users can request admin consent to apps they are unable to consent to. See https://maester.dev/docs/tests/EIDSCA.CP04",
        "TestResult": "\nYour tenant is configured as **false**.\n\nThe recommended value is **'true'** for **settings**\n",
        "TestDescription": "If this option is set to enabled, then users request admin consent to any app that requires access to data they do not have the permission to grant. If this option is set to disabled, then users must contact their admin to request to consent in order to use the apps they need.\n\nCISA SCuBA 2.7: Non-Admin Users SHALL Be Prevented From Providing Consent To Third-Party Applications.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'EnableAdminConsentRequests' | select-object -expand value -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.CR01",
      "Title": "Consent Framework - Admin Consent Request - Policy to enable or disable admin consent request feature.",
      "Name": "EIDSCA.CR01: Consent Framework - Admin Consent Request - Policy to enable or disable admin consent request feature.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CR01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR01"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\"\n            .isEnabled -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId CR01 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "384",
            "LineText": "        Test-MtEidscaControl -CheckId CR01 | Should -Be 'true'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 384\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.CR01: Consent Framework - Admin Consent Request - Policy to enable or disable admin consent request feature. See https://maester.dev/docs/tests/EIDSCA.CR01",
        "TestResult": "\nYour tenant is configured as **False**.\n\nThe recommended value is **'true'** for **policies/adminConsentRequestPolicy**\n",
        "TestDescription": "Defines if admin consent request feature is enabled or disabled\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\n.isEnabled -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/adminConsentRequestPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [adminConsentRequestPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/adminconsentrequestpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.PR01",
      "Title": "Default Settings - Password Rule Settings - Password Protection - Mode.",
      "Name": "EIDSCA.PR01: Default Settings - Password Rule Settings - Password Protection - Mode.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR01"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'BannedPasswordCheckOnPremisesMode' | select-object -expand value -eq 'Enforce'\n        #>\n        Test-MtEidscaControl -CheckId PR01 | Should -Be 'Enforce'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 7\nActual length:   5\nStrings differ at index 0.\nExpected: 'Enforce'\nBut was:  'Audit'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 7\nActual length:   5\nStrings differ at index 0.\nExpected: 'Enforce'\nBut was:  'Audit'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "124",
            "LineText": "        Test-MtEidscaControl -CheckId PR01 | Should -Be 'Enforce'",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 124\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.PR01: Default Settings - Password Rule Settings - Password Protection - Mode. See https://maester.dev/docs/tests/EIDSCA.PR01",
        "TestResult": "\nYour tenant is configured as **Audit**.\n\nThe recommended value is **'Enforce'** for **settings**\n",
        "TestDescription": "If set to Enforce, users will be prevented from setting banned passwords and the attempt will be logged. If set to Audit, the attempt will only be logged.\n\n[Microsoft Entra Password Protection - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/authentication/concept-password-ban-bad-on-premises)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'BannedPasswordCheckOnPremisesMode' | select-object -expand value -eq 'Enforce'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.PR02",
      "Title": "Default Settings - Password Rule Settings - Password Protection - Enable password protection on Windows Server Active Directory.",
      "Name": "EIDSCA.PR02: Default Settings - Password Rule Settings - Password Protection - Enable password protection on Windows Server Active Directory.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR02"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'EnableBannedPasswordCheckOnPremises' | select-object -expand value -eq 'True'\n        #>\n        Test-MtEidscaControl -CheckId PR02 | Should -Be 'True'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.PR02: Default Settings - Password Rule Settings - Password Protection - Enable password protection on Windows Server Active Directory. See https://maester.dev/docs/tests/EIDSCA.PR02",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'True'** for **settings**\n",
        "TestDescription": "If set to Yes, password protection is turned on for Active Directory domain controllers when the appropriate agent is installed.\n\n[Azure identity &amp; access security best practices - Microsoft Learn](https://learn.microsoft.com/en-us/azure/security/fundamentals/identity-management-best-practices#enable-password-management)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'EnableBannedPasswordCheckOnPremises' | select-object -expand value -eq 'True'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.PR03",
      "Title": "Default Settings - Password Rule Settings - Enforce custom list.",
      "Name": "EIDSCA.PR03: Default Settings - Password Rule Settings - Enforce custom list.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR03"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'EnableBannedPasswordCheck' | select-object -expand value -eq 'True'\n        #>\n        Test-MtEidscaControl -CheckId PR03 | Should -Be 'True'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.PR03: Default Settings - Password Rule Settings - Enforce custom list. See https://maester.dev/docs/tests/EIDSCA.PR03",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'True'** for **settings**\n",
        "TestDescription": "When enabled, the words in the list below are used in the banned password system to prevent easy-to-guess passwords.\n\n[Password protection in Microsoft Entra ID - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/authentication/concept-password-ban-bad#global-banned-password-list)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'EnableBannedPasswordCheck' | select-object -expand value -eq 'True'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.PR05",
      "Title": "Default Settings - Password Rule Settings - Smart Lockout - Lockout duration in seconds.",
      "Name": "EIDSCA.PR05: Default Settings - Password Rule Settings - Smart Lockout - Lockout duration in seconds.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR05",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR05"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'LockoutDurationInSeconds' | select-object -expand value -ge '60'\n        #>\n        Test-MtEidscaControl -CheckId PR05 | Should -BeGreaterOrEqual '60'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.PR05: Default Settings - Password Rule Settings - Smart Lockout - Lockout duration in seconds. See https://maester.dev/docs/tests/EIDSCA.PR05",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is greater than or equal to **'60'** for **settings**\n",
        "TestDescription": "The minimum length in seconds of each lockout. If an account locks repeatedly, this duration increases.\n\n[Prevent attacks using smart lockout - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/authentication/howto-password-smart-lockout)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'LockoutDurationInSeconds' | select-object -expand value -ge '60'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.PR06",
      "Title": "Default Settings - Password Rule Settings - Smart Lockout - Lockout threshold.",
      "Name": "EIDSCA.PR06: Default Settings - Password Rule Settings - Smart Lockout - Lockout threshold.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR06",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR06"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'LockoutThreshold' | select-object -expand value -le '10'\n        #>\n        Test-MtEidscaControl -CheckId PR06 | Should -BeLessOrEqual '10'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.PR06: Default Settings - Password Rule Settings - Smart Lockout - Lockout threshold. See https://maester.dev/docs/tests/EIDSCA.PR06",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is less than or equal to **'10'** for **settings**\n",
        "TestDescription": "How many failed sign-ins are allowed on an account before its first lockout. If the first sign-in after a lockout also fails, the account locks out again.\n\n[Prevent attacks using smart lockout - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/authentication/howto-password-smart-lockout)\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'LockoutThreshold' | select-object -expand value -le '10'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\n\n",
        "SkippedReason": null,
        "Severity": "High",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.ST08",
      "Title": "Default Settings - Classification and M365 Groups - M365 groups - Allow Guests to become Group Owner.",
      "Name": "EIDSCA.ST08: Default Settings - Classification and M365 Groups - M365 groups - Allow Guests to become Group Owner.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.ST08",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.ST08"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'AllowGuestsToBeGroupOwner' | select-object -expand value -eq 'false'\n        #>\n        Test-MtEidscaControl -CheckId ST08 | Should -Be 'false'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.ST08: Default Settings - Classification and M365 Groups - M365 groups - Allow Guests to become Group Owner. See https://maester.dev/docs/tests/EIDSCA.ST08",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'false'** for **settings**\n",
        "TestDescription": "Indicating whether or not a guest user can be an owner of groups, manage\n\nCISA SCuBA 2.18: Guest users SHOULD have limited access to Entra ID (Azure AD) directory objects\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'AllowGuestsToBeGroupOwner' | select-object -expand value -eq 'false'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.ST09",
      "Title": "Default Settings - Classification and M365 Groups - M365 groups - Allow Guests to have access to groups content.",
      "Name": "EIDSCA.ST09: Default Settings - Classification and M365 Groups - M365 groups - Allow Guests to have access to groups content.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.ST09",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.ST09"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'AllowGuestsToAccessGroups' | select-object -expand value -eq 'True'\n        #>\n        Test-MtEidscaControl -CheckId ST09 | Should -Be 'True'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.ST09: Default Settings - Classification and M365 Groups - M365 groups - Allow Guests to have access to groups content. See https://maester.dev/docs/tests/EIDSCA.ST09",
        "TestResult": "\nWell done. The configuration in your tenant and recommended value is **'True'** for **settings**\n",
        "TestDescription": "Indicating whether or not a guest user can have access to Microsoft 365 groups content. This setting does not require an Entra ID Premium P1 license.\n\nManages if guest accounts can access resources through Microsoft 365 Group membership and could break collaboration if you disable it.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'AllowGuestsToAccessGroups' | select-object -expand value -eq 'True'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n\n\n",
        "SkippedReason": null,
        "Severity": "Medium",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1001",
      "Title": "At least one Conditional Access policy is configured with device compliance.",
      "Name": "MT.1001: At least one Conditional Access policy is configured with device compliance.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1001",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1001"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaDeviceComplianceExists | Should -Be $true -Because \"there is no policy which requires device compliances\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1001: At least one Conditional Access policy is configured with device compliance. See https://maester.dev/docs/tests/MT.1001",
        "TestResult": "These conditional access policies enforce the use of a compliant device :\n\n  - [Device compliance #1](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2965e1d4-6146-41a5-abae-5219abf7d68f?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestDescription": "\nIt is recommended to have at least one conditional access policy that enforces the use of a compliant device.\n\nSee [Require a compliant device, Microsoft Entra hybrid joined device, or MFA - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-compliant-device)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1002",
      "Title": "App management restrictions on applications and service principals is configured and enabled.",
      "Name": "MT.1002: App management restrictions on applications and service principals is configured and enabled.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1002",
      "Tag": [
        "Maester",
        "App",
        "Security",
        "All",
        "MT.1002"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        Test-MtAppManagementPolicyEnabled | Should -Be $true -Because \"an app policy for workload identities should be defined to enforce strong credentials instead of passwords and a maximum expiry period (e.g. credential should be renewed every six months)\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-AppManagementPolicies.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1002: App management restrictions on applications and service principals is configured and enabled. See https://maester.dev/docs/tests/MT.1002",
        "TestResult": "Well done. Your tenant has an app management policy enabled.",
        "TestDescription": "By default Microsoft Entra ID allows service principals and applications to be configured with weak credentials.\n\nThis can include\n\n- client secrets instead of certificates\n- secrets and certificates with long expiry (e.g. 10 year)\n\n## How to fix\n\nUsing shorter expiry periods and certificates instead of secrets can help reduce the risk of credentials being compromised and used by an attacker.\n\nThe sample policy below can be used to enforce credential configurations on apps and service principals.\n\n```powershell\nImport-Module Microsoft.Graph.Identity.SignIns\n\n$params = @{\nisEnabled = $true\napplicationRestrictions = @{\n    passwordCredentials = @(\n    @{\n        restrictionType = \"passwordAddition\"\n        maxLifetime = $null\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2021-01-01T10:37:00Z\")\n    }\n    @{\n        restrictionType = \"passwordLifetime\"\n        maxLifetime = \"P365D\"\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2017-01-01T10:37:00Z\")\n    }\n    @{\n        restrictionType = \"symmetricKeyAddition\"\n        maxLifetime = $null\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2021-01-01T10:37:00Z\")\n    }\n    @{\n        restrictionType = \"customPasswordAddition\"\n        maxLifetime = $null\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2015-01-01T10:37:00Z\")\n    }\n    @{\n        restrictionType = \"symmetricKeyLifetime\"\n        maxLifetime = \"P365D\"\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2015-01-01T10:37:00Z\")\n    }\n    )\n    keyCredentials = @(\n    @{\n        restrictionType = \"asymmetricKeyLifetime\"\n        maxLifetime = \"P365D\"\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2015-01-01T10:37:00Z\")\n    }\n    )\n}\n}\n\nUpdate-MgPolicyDefaultAppManagementPolicy -BodyParameter $params\n```\n\n## Learn more\n\n- [Tenant App Management Policy - Microsoft Graph Reference](https://learn.microsoft.com/graph/api/resources/tenantappmanagementpolicy?view=graph-rest-1.0)\n- [What are Workload ID Premium features, and which are free?](https://learn.microsoft.com/en-us/entra/workload-id/workload-identities-faqs#what-are-workload-id-premium-features-and-which-are-free)\n- [Microsoft Entra application management policies API overview](https://learn.microsoft.com/en-us/graph/api/resources/applicationauthenticationmethodpolicy?view=graph-rest-1.0#requirements)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1003",
      "Title": "At least one Conditional Access policy is configured with All Apps.",
      "Name": "MT.1003: At least one Conditional Access policy is configured with All Apps.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1003",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1003"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaAllAppsExists -SkipCheckAllUsers | Should -Be $true -Because \"there is no policy scoped to All Apps\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1003: At least one Conditional Access policy is configured with All Apps. See https://maester.dev/docs/tests/MT.1003",
        "TestResult": "These conditional access policies target all cloud apps:\n\n  - [MFA - All users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/474ddef4-5620-4e7a-8976-6e9b095b2675?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/4086128c-3850-48ac-8962-e19a956828bd?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Device compliance #1](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2965e1d4-6146-41a5-abae-5219abf7d68f?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Guest-Meferna-Woodgrove-PhishingResistantAuthStrength](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/0f0a0c1c-41b0-4c18-ae20-d02492d03737?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Block Device Code](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/db2153a1-40a2-457f-917c-c280b204b5cd?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CISA SCuBA.MS.AAD.2.3: Users detected as high risk SHALL be blocked.](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/94c7d8d0-5c8c-460d-8ace-364374250893?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestDescription": "\n  Microsoft recommends creating at least one conditional access policy targetting all cloud apps and ideally all users.\n\n  See [Plan a Conditional Access deployment - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/plan-conditional-access#apply-conditional-access-policies-to-every-app)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1004",
      "Title": "At least one Conditional Access policy is configured with All Apps and All Users.",
      "Name": "MT.1004: At least one Conditional Access policy is configured with All Apps and All Users.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1004",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1004"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaAllAppsExists | Should -Be $true -Because \"there is no policy scoped to All Apps and All Users\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1004: At least one Conditional Access policy is configured with All Apps and All Users. See https://maester.dev/docs/tests/MT.1004",
        "TestResult": "These conditional access policies target all cloud apps and all users:\n\n  - [MFA - All users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/474ddef4-5620-4e7a-8976-6e9b095b2675?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/4086128c-3850-48ac-8962-e19a956828bd?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Block Device Code](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/db2153a1-40a2-457f-917c-c280b204b5cd?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CISA SCuBA.MS.AAD.2.3: Users detected as high risk SHALL be blocked.](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/94c7d8d0-5c8c-460d-8ace-364374250893?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestDescription": "\n  Microsoft recommends creating at least one conditional access policy targetting all cloud apps and ideally all users.\n\n  See [Plan a Conditional Access deployment - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/plan-conditional-access#apply-conditional-access-policies-to-every-app)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1005",
      "Title": "All Conditional Access policies are configured to exclude at least one emergency/break glass account or group.",
      "Name": "MT.1005: All Conditional Access policies are configured to exclude at least one emergency/break glass account or group.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1005",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1005"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaEmergencyAccessExists | Should -Be $true -Because \"there is no emergency access account or group present in all enabled policies\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no emergency access account or group present in all enabled policies, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no emergency access account or group present in all enabled policies, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "12",
            "LineText": "        Test-MtCaEmergencyAccessExists | Should -Be $true -Because \"there is no emergency access account or group present in all enabled policies\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 12\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1005: All Conditional Access policies are configured to exclude at least one emergency/break glass account or group. See https://maester.dev/docs/tests/MT.1005",
        "TestResult": "\nAutomatically detected emergency access user: Merill Fernando (513f3db2-044c-41be-af14-431bf88a2b3e)\n\nThese conditional access policies don't have the emergency access user excluded:\n\n  - [SharePoint - DLP Unmanaged devices](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2fb9f832-9af7-4ad9-8468-30035ad62a7e)\n  - [ACSC - L2](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/dd4e567d-47ae-4d1f-acaa-6d4ff1cd14e4)\n  - [O365](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/31181d5c-dd6b-4679-aea2-e6f0ad30757a)\n  - [Register device](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/c9d0080b-86e0-464a-9e25-8ca4e186fb5a)\n  - [nestedgroup count](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/9e6a9793-e3ae-451e-9011-0a9bbbcfdc9b)\n  - [App Protect - Mobiles :Disabled: This policy caused outage on Android devices for Outlook users. Needs further investigation to identify root cause.](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/5a5ee06f-4164-4112-9960-fe0903c2ccee)\n  - [MFA CA Policy](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/e589544c-0c92-432e-86ae-4e4ef103eac8)\n  - [Force Password Change](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/5848211d-96f2-40ae-92a4-af1aa8f48572)\n  - [No persistence](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/ff9b569d-329f-4d8b-a984-b8da833e19ea)\n  - [Require multifactor authentication for Microsoft admin portals](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/db73ea6f-4017-4b04-97e9-c5f6fedec0d0)\n  - [j-test admin](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/6c0ef46a-3b58-43a9-b451-7464a16d91d7)\n  - [Device compliancy](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/206c9071-89d7-4b57-adaf-87f78a4bd7f5)\n  - [Device compliance #1](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2965e1d4-6146-41a5-abae-5219abf7d68f)\n  - [Guest 10 hr MFA](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/bcc1a12e-c68d-419e-a6c4-6d4bdfa8bfc8)\n  - [Guest-Meferna-Woodgrove-PhishingResistantAuthStrength](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/0f0a0c1c-41b0-4c18-ae20-d02492d03737)\n  - [Unmanaged Device - Admin Portal Block](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/b86b671e-e018-46a2-a518-fb653c08ac33)\n  - [AzMfa Test (Require MFA for Az Portal)](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/afd8693b-f802-4b5a-bb40-e8b1d952dd99)\n  - [NewphishingCA](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/3fe49849-5ab6-4717-a22d-aa42536eb560)\n  - [mytest2](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/c2f265b0-a106-45fc-aa6d-f1da74110854)\n  - [Block DCF](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/b5ff217b-3d84-4581-bd92-5d8f8b8bab6a)\n  - [testdevicereg21872](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/620a9c5c-09c4-4558-a0fe-7fc8b3540992)\n",
        "TestDescription": "It is recommended to have at least one emergency/break glass account or account group excluded from all conditional access policies.\nThis allows for emergency access to the tenant in case of a misconfiguration or other issues.\n\nSee [Manage emergency access accounts in Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/entra/identity/role-based-access-control/security-emergency-access)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1006",
      "Title": "At least one Conditional Access policy is configured to require MFA for admins.",
      "Name": "MT.1006: At least one Conditional Access policy is configured to require MFA for admins.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1006",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1006"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaMfaForAdmin | Should -Be $true -Because \"there is no policy that requires MFA for admins\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1006: At least one Conditional Access policy is configured to require MFA for admins. See https://maester.dev/docs/tests/MT.1006",
        "TestResult": "\n\nThe following conditional access policies require multi-factor authentication for admins:\n\n  - [MFA - All users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/474ddef4-5620-4e7a-8976-6e9b095b2675)\n  - [Require password change for high-risk users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/ddbc3bb1-3749-474f-b8c3-0d997118b24b)\n",
        "TestDescription": "This test checks if the tenant has at least one conditional access policy requiring MFA for admins.\nThe following roles are considered as admin roles:\n\n- Global Administrator\n- Application Administrator\n- Authentication Administrator\n- Billing Administrator\n- Cloud Application Administrator\n- Conditional Access Administrator\n- Exchange Administrator\n- Helpdesk Administrator\n- Password Administrator\n- Privileged Authentication Administrator\n- Privileged Role Administrator\n- Security Administrator\n- SharePoint Administrator\n- User Administrator\n\nSee [Require MFA for administrators - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-admin-mfa)\"\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1007",
      "Title": "At least one Conditional Access policy is configured to require MFA for all users.",
      "Name": "MT.1007: At least one Conditional Access policy is configured to require MFA for all users.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1007",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1007"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaMfaForAllUsers | Should -Be $true -Because \"there is no policy that requires MFA for all users\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1007: At least one Conditional Access policy is configured to require MFA for all users. See https://maester.dev/docs/tests/MT.1007",
        "TestResult": "\nThe following conditional access policies require multi-factor authentication for all users:\n\n  - [MFA - All users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/474ddef4-5620-4e7a-8976-6e9b095b2675)\n",
        "TestDescription": "This test checks if the tenant has at least one conditional access policy requiring MFA for all users.\n\nSee [Require MFA for all users - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-all-users-mfa)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1008",
      "Title": "At least one Conditional Access policy is configured to require MFA for Azure management.",
      "Name": "MT.1008: At least one Conditional Access policy is configured to require MFA for Azure management.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1008",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1008"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaMfaForAdminManagement | Should -Be $true -Because \"there is no policy that requires MFA for Azure management\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1008: At least one Conditional Access policy is configured to require MFA for Azure management. See https://maester.dev/docs/tests/MT.1008",
        "TestResult": "The following conditional access policies require multi-factor authentication for azure management:\n\n  - [MFA - All users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/474ddef4-5620-4e7a-8976-6e9b095b2675)\n  - [Require password change for high-risk users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/ddbc3bb1-3749-474f-b8c3-0d997118b24b)\n",
        "TestDescription": "\nMicrosoft recommends requiring MFA for Azure Management.\n\nSee [Require MFA for administrators - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-admin-mfa)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1009",
      "Title": "At least one Conditional Access policy is configured to block other legacy authentication.",
      "Name": "MT.1009: At least one Conditional Access policy is configured to block other legacy authentication.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1009",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1009"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaBlockLegacyOtherAuthentication | Should -Be $true -Because \"there is no policy that blocks legacy authentication\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1009: At least one Conditional Access policy is configured to block other legacy authentication. See https://maester.dev/docs/tests/MT.1009",
        "TestResult": "These conditional access policies block legacy authentication for other clients :\n\n  - [Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/4086128c-3850-48ac-8962-e19a956828bd?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestDescription": "\nLegacy authentication is an unsecure method to authenticate. This function checks if the tenant has at least one\nconditional access policy that blocks legacy authentication.\n\nSee [Block legacy authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-block-legacy)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1010",
      "Title": "At least one Conditional Access policy is configured to block legacy authentication for Exchange ActiveSync.",
      "Name": "MT.1010: At least one Conditional Access policy is configured to block legacy authentication for Exchange ActiveSync.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1010",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1010"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaBlockLegacyExchangeActiveSyncAuthentication | Should -Be $true -Because \"there is no policy that blocks legacy authentication for Exchange ActiveSync\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1010: At least one Conditional Access policy is configured to block legacy authentication for Exchange ActiveSync. See https://maester.dev/docs/tests/MT.1010",
        "TestResult": "These conditional access policies block legacy authentication for Exchange Active Sync:\n\n  - [Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/4086128c-3850-48ac-8962-e19a956828bd?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestDescription": "\nLegacy authentication is an unsecure method to authenticate. This function checks if the tenant has at least one\nconditional access policy that blocks legacy authentication.\n\nSee [Block legacy authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-block-legacy)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1011",
      "Title": "At least one Conditional Access policy is configured to secure security info registration only from a trusted location.",
      "Name": "MT.1011: At least one Conditional Access policy is configured to secure security info registration only from a trusted location.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1011",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1011"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaSecureSecurityInfoRegistration | Should -Be $true -Because \"there is no policy that secures security info registration\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that secures security info registration, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that secures security info registration, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "30",
            "LineText": "        Test-MtCaSecureSecurityInfoRegistration | Should -Be $true -Because \"there is no policy that secures security info registration\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 30\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1011: At least one Conditional Access policy is configured to secure security info registration only from a trusted location. See https://maester.dev/docs/tests/MT.1011",
        "TestResult": "\nNo conditional access policy securing security info registration.",
        "TestDescription": "Checks if the tenant has at least one conditional access policy securing security info registration.\n\nSee [Securing security info registration - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-registration)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1012",
      "Title": "At least one Conditional Access policy is configured to require MFA for risky sign-ins.",
      "Name": "MT.1012: At least one Conditional Access policy is configured to require MFA for risky sign-ins.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1012",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1012"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaMfaForRiskySignIn | Should -Be $true -Because \"there is no policy that requires MFA for risky sign-ins\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that requires MFA for risky sign-ins, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that requires MFA for risky sign-ins, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "33",
            "LineText": "        Test-MtCaMfaForRiskySignIn | Should -Be $true -Because \"there is no policy that requires MFA for risky sign-ins\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 33\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1012: At least one Conditional Access policy is configured to require MFA for risky sign-ins. See https://maester.dev/docs/tests/MT.1012",
        "TestResult": "\nNo conditional access policy requires multi-factor authentication for risky sign-ins.",
        "TestDescription": "Checks if the tenant has at least one conditional access policy requiring multifactor authentication for risky sign-ins.\n\nSee [Sign-in risk-based multifactor authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-risk)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1013",
      "Title": "At least one Conditional Access policy is configured to require new password when user risk is high.",
      "Name": "MT.1013: At least one Conditional Access policy is configured to require new password when user risk is high.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1013",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1013"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaRequirePasswordChangeForHighUserRisk | Should -Be $true -Because \"there is no policy that requires new password when user risk is high\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1013: At least one Conditional Access policy is configured to require new password when user risk is high. See https://maester.dev/docs/tests/MT.1013",
        "TestResult": "\nThe following conditional access policies require password change for risky users\n\n  - [Require password change for high-risk users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/ddbc3bb1-3749-474f-b8c3-0d997118b24b)\n",
        "TestDescription": "Checks if the tenant has at least one conditional access policy requiring password change for high user risk.\n\nSee [User risk-based password change - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-risk-user)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1014",
      "Title": "At least one Conditional Access policy is configured to require compliant or Entra hybrid joined devices for admins.",
      "Name": "MT.1014: At least one Conditional Access policy is configured to require compliant or Entra hybrid joined devices for admins.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1014",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1014"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaDeviceComplianceAdminsExists | Should -Be $true -Because \"there is no policy that requires compliant or Entra hybrid joined devices for admins\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that requires compliant or Entra hybrid joined devices for admins, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that requires compliant or Entra hybrid joined devices for admins, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "39",
            "LineText": "        Test-MtCaDeviceComplianceAdminsExists | Should -Be $true -Because \"there is no policy that requires compliant or Entra hybrid joined devices for admins\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 39\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1014: At least one Conditional Access policy is configured to require compliant or Entra hybrid joined devices for admins. See https://maester.dev/docs/tests/MT.1014",
        "TestResult": "There was no conditional access policy requiring compliant or Microsoft Entra hybrid joined device for administrators.",
        "TestDescription": "\nMicrosoft recommends requiring device compliance for administrators that are members of the following roles:\n\n* Global administrator\n* Application administrator\n* Authentication Administrator\n* Billing administrator\n* Cloud application administrator\n* Conditional Access administrator\n* Exchange administrator\n* Helpdesk administrator\n* Password administrator\n* Privileged authentication administrator\n* Privileged Role Administrator\n* Security administrator\n* SharePoint administrator\n* User administrator\n\nSee [Require compliant or Microsoft Entra hybrid joined device for administrators - Microsoft Learn](https://aka.ms/CATemplatesAdminDevices)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1015",
      "Title": "At least one Conditional Access policy is configured to block access for unknown or unsupported device platforms.",
      "Name": "MT.1015: At least one Conditional Access policy is configured to block access for unknown or unsupported device platforms.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1015",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1015"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaBlockUnknownOrUnsupportedDevicePlatform | Should -Be $true -Because \"there is no policy that blocks access for unknown or unsupported device platforms\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that blocks access for unknown or unsupported device platforms, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that blocks access for unknown or unsupported device platforms, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "42",
            "LineText": "        Test-MtCaBlockUnknownOrUnsupportedDevicePlatform | Should -Be $true -Because \"there is no policy that blocks access for unknown or unsupported device platforms\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 42\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1015: At least one Conditional Access policy is configured to block access for unknown or unsupported device platforms. See https://maester.dev/docs/tests/MT.1015",
        "TestResult": "There was no conditional access policy blocking access for unknown or unsupported device platforms.",
        "TestDescription": "\nMicrosoft recommends blocking access for unknown or unsupported device platforms.\n\nSee [Block access for unknown or unsupported device platform - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-policy-unknown-unsupported-device)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1016",
      "Title": "At least one Conditional Access policy is configured to require MFA for guest access.",
      "Name": "MT.1016: At least one Conditional Access policy is configured to require MFA for guest access.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1016",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1016"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaMfaForGuest | Should -Be $true -Because \"there is no policy that requires MFA for guest access\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1016: At least one Conditional Access policy is configured to require MFA for guest access. See https://maester.dev/docs/tests/MT.1016",
        "TestResult": "\nThe following conditional access policies require multi-factor authentication for guest accounts:\n\n  - [MFA - All users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/474ddef4-5620-4e7a-8976-6e9b095b2675)\n",
        "TestDescription": "This check verifies if there is at least one conditional access policy that requires multifactor authentication for all guest accounts.\n\nSee [Require multifactor authentication for guest access - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-policy-guest-mfa)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1017",
      "Title": "At least one Conditional Access policy is configured to enforce non persistent browser session for non-corporate devices.",
      "Name": "MT.1017: At least one Conditional Access policy is configured to enforce non persistent browser session for non-corporate devices.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1017",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1017"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaEnforceNonPersistentBrowserSession | Should -Be $true -Because \"there is no policy that enforces non persistent browser session for non-corporate devices\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that enforces non persistent browser session for non-corporate devices, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that enforces non persistent browser session for non-corporate devices, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "48",
            "LineText": "        Test-MtCaEnforceNonPersistentBrowserSession | Should -Be $true -Because \"there is no policy that enforces non persistent browser session for non-corporate devices\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 48\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1017: At least one Conditional Access policy is configured to enforce non persistent browser session for non-corporate devices. See https://maester.dev/docs/tests/MT.1017",
        "TestResult": "There was no conditional access policy enforcing non persistent browser session for non-corporate devices.",
        "TestDescription": "\nMicrosoft recommends disabling browser persistence for users accessing the tenant from a unmanaged device.\n\nSee [Require reauthentication and disable browser persistence - Microsoft Learn](https://aka.ms/CATemplatesBrowserSession)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1018",
      "Title": "At least one Conditional Access policy is configured to enforce sign-in frequency for non-corporate devices.",
      "Name": "MT.1018: At least one Conditional Access policy is configured to enforce sign-in frequency for non-corporate devices.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1018",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1018"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaEnforceSignInFrequency | Should -Be $true -Because \"there is no policy that enforces sign-in frequency for non-corporate devices\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that enforces sign-in frequency for non-corporate devices, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that enforces sign-in frequency for non-corporate devices, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "51",
            "LineText": "        Test-MtCaEnforceSignInFrequency | Should -Be $true -Because \"there is no policy that enforces sign-in frequency for non-corporate devices\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 51\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1018: At least one Conditional Access policy is configured to enforce sign-in frequency for non-corporate devices. See https://maester.dev/docs/tests/MT.1018",
        "TestResult": "There was no conditional access policy enforcing sign-in frequency for non-corporate devices.",
        "TestDescription": "\nMicrosoft recommends disabling browser persistence for users accessing the tenant from a unmanaged device.\n\nSee [Require reauthentication and disable browser persistence - Microsoft Learn](https://aka.ms/CATemplatesBrowserSession)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1019",
      "Title": "At least one Conditional Access policy is configured to enable application enforced restrictions.",
      "Name": "MT.1019: At least one Conditional Access policy is configured to enable application enforced restrictions.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1019",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1019"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaApplicationEnforcedRestriction | Should -Be $true -Because \"there is no policy that enables application enforced restrictions\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that enables application enforced restrictions, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that enables application enforced restrictions, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "54",
            "LineText": "        Test-MtCaApplicationEnforcedRestriction | Should -Be $true -Because \"there is no policy that enables application enforced restrictions\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 54\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1019: At least one Conditional Access policy is configured to enable application enforced restrictions. See https://maester.dev/docs/tests/MT.1019",
        "TestResult": "There was no conditional access policy enforcing restrictions for unmanaged devices.",
        "TestDescription": "\nMicrosoft recommends blocking or limiting access to SharePoint, OneDrive, and Exchange content from unmanaged devices.\n\nSee [Use application enforced restrictions for unmanaged devices - Microsoft Learn](https://aka.ms/CATemplatesAppRestrictions)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1020",
      "Title": "All Conditional Access policies are configured to exclude directory synchronization accounts or do not scope them.",
      "Name": "MT.1020: All Conditional Access policies are configured to exclude directory synchronization accounts or do not scope them.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1020",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1020"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaExclusionForDirectorySyncAccount | Should -Be $true -Because \"there is no policy that excludes directory synchronization accounts\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that excludes directory synchronization accounts, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that excludes directory synchronization accounts, but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "57",
            "LineText": "        Test-MtCaExclusionForDirectorySyncAccount | Should -Be $true -Because \"there is no policy that excludes directory synchronization accounts\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 57\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1020: All Conditional Access policies are configured to exclude directory synchronization accounts or do not scope them. See https://maester.dev/docs/tests/MT.1020",
        "TestResult": "The following conditional access policies are scoped to all users but don't exclude the directory synchronization accounts:\n\n  - [AzMfa Test (Require MFA for Az Portal)](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/afd8693b-f802-4b5a-bb40-e8b1d952dd99?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Block Device Code](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/db2153a1-40a2-457f-917c-c280b204b5cd?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CISA SCuBA.MS.AAD.2.3: Users detected as high risk SHALL be blocked.](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/94c7d8d0-5c8c-460d-8ace-364374250893?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Device compliance #1](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2965e1d4-6146-41a5-abae-5219abf7d68f?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Guest-Meferna-Woodgrove-PhishingResistantAuthStrength](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/0f0a0c1c-41b0-4c18-ae20-d02492d03737?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [MFA - All users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/474ddef4-5620-4e7a-8976-6e9b095b2675?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [Require password change for high-risk users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/ddbc3bb1-3749-474f-b8c3-0d997118b24b?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [testdevicereg21872](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/620a9c5c-09c4-4558-a0fe-7fc8b3540992?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestDescription": "It is recommended to exclude directory synchronization accounts from all conditional access policies scoped to all cloud apps.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1022",
      "Title": "All users utilizing a P1 license should be licensed.",
      "Name": "MT.1022: All users utilizing a P1 license should be licensed.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1022",
      "Tag": [
        "Entra",
        "License",
        "MT.1022"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n            $LicenseReport = Test-MtCaLicenseUtilization -License \"P1\"\n            $LicenseReport.TotalLicensesUtilized | Should -BeLessOrEqual $LicenseReport.EntitledLicenseCount -Because \"this is the maximium number of user that can utilize a P1 license\"\n        ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1022: All users utilizing a P1 license should be licensed. See https://maester.dev/docs/tests/MT.1022",
        "TestResult": "Total users entitled for Entra ID P1: **25**\n\nTotal P1 licenses utilized: **3**",
        "TestDescription": "This test checks the utilization of Entra ID P1 licenses in the tenant.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1023",
      "Title": "All users utilizing a P2 license should be licensed.",
      "Name": "MT.1023: All users utilizing a P2 license should be licensed.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1023",
      "Tag": [
        "Entra",
        "License",
        "MT.1023"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n            $LicenseReport = Test-MtCaLicenseUtilization -License \"P2\"\n            $LicenseReport.TotalLicensesUtilized | Should -BeLessOrEqual $LicenseReport.EntitledLicenseCount -Because \"this is the maximium number of user that can utilize a P2 license\"\n        ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1023: All users utilizing a P2 license should be licensed. See https://maester.dev/docs/tests/MT.1023",
        "TestResult": "Total users entitled for Entra ID P2: **25**\n\nTotal P2 licenses utilized: **0**",
        "TestDescription": "This test checks the utilization of Entra ID P2 licenses in the tenant.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.4",
      "Title": "Entra Recommendation - Enable self-service password reset",
      "Name": "MT.1024.4: Entra Recommendation - Enable self-service password reset",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "selfServicePasswordReset"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.4: Entra Recommendation - Enable self-service password reset",
        "TestResult": "You have 0 of  users who don't have self-service password reset enabled. \n\n➡️ Open [Recommendation - Enable self-service password reset](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. Follow our [step-by-step guidance to enable self-service password reset](https://docs.microsoft.com/azure/active-directory/authentication/tutorial-enable-sspr).\n\n2. If you have users that are synced from on-premises Microsoft Entra Connect using Microsoft Entra Connect, you may also need to enable the password writeback feature. [For more information, see this article](https://docs.microsoft.com/azure/active-directory/authentication/tutorial-enable-sspr-writeback?WT.mc_id=Portal-Microsoft_AAD_IAM).",
        "TestDescription": "With self-service password reset in Microsoft Entra ID, users no longer need to engage helpdesk to reset passwords. This feature works well with Microsoft Entra ID dynamically banned passwords, which prevents easily guessable passwords from being used.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.5",
      "Title": "Entra Recommendation - Use least privileged administrative roles",
      "Name": "MT.1024.5: Entra Recommendation - Use least privileged administrative roles ",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "roleOverlap"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.5: Entra Recommendation - Use least privileged administrative roles ",
        "TestResult": "You currently have 5 users with privileged administrative roles. \n\n➡️ Open [Recommendation - Use least privileged administrative roles ](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. Identify the users in your organization with a persistent global administrator role assigned. Go to Microsoft Entra ID > Roles and administrators and select the Global administrator role in the table. Identify the global admins you want to reassign to a different role. [Go to Roles and administrators in Microsoft Entra ID](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RolesAndAdministrators).\n\n2. Assign these users to roles where they can complete necessary tasks with the least amount of privilege required. For example, if a user is primarily responsible for Exchange Online administration, they should be assigned that role instead of global administrator. Be sure to have at least two global admins designated to allow for full access to the network if one of the accounts is locked out or compromised. [Check out this overview of available limited administrative roles](https://docs.microsoft.com/azure/active-directory/roles/delegate-by-task).\n\n3. After these persistent global admins have been reassigned new roles, return to Roles and administrators and select the Global administrator role. Select the users that no longer need persistent access and then click Remove. [Go to Roles and administrators in Microsoft Entra ID](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RolesAndAdministrators).\n\n4. Emergency access accounts: If the only other global admin accounts your organization has set up are for \"break-glass\" scenarios, which are ineligible for role reassignment, we recommend that you set the status of this action to “Dismissed” or “Risk accepted”. [Learn more about emergency access accounts](https://docs.microsoft.com/azure/active-directory/roles/security-emergency-access).",
        "TestDescription": "Ensure that your administrators can accomplish their work with the least amount of privilege assigned to their account. Assigning users roles like Password Administrator or Exchange Online Administrator, instead of Global Administrator, reduces the likelihood of a global administrative privileged account being breached.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.6",
      "Title": "Entra Recommendation - Designate more than one global admin",
      "Name": "MT.1024.6: Entra Recommendation - Designate more than one global admin",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "oneAdmin"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.6: Entra Recommendation - Designate more than one global admin",
        "TestResult": "You currently have 7 global admins.\n\n➡️ Open [Recommendation - Designate more than one global admin](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. Assign more than one user a global administrator role in your organization. Go to Microsoft Entra ID > Roles and administrators and select the Global administrator role in the table. Then click Add assignments. [Go to the Global administrator role in Microsoft Entra ID](https://portal.azure.com/#blade/Microsoft_Azure_PIMCommon/UserRolesViewModelMenuBlade/members/roleObjectId/62e90394-69f5-4237-9190-012177145e10/roleId/62e90394-69f5-4237-9190-012177145e10/roleTemplateId/62e90394-69f5-4237-9190-012177145e10/roleName/Global%20administrator/isRoleCustom//resourceScopeId/%2F/resourceId/26497ce3-3756-4f53-ac9d-f4d438ca62e7).",
        "TestDescription": "Having more than one global administrator helps if you’re unable to fulfill the needs or obligations of your organization. It's important to have a delegate or an emergency access account that someone from your team can access if necessary. It also allows admins the ability to monitor each other for signs of a breach.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.7",
      "Title": "Entra Recommendation - Enable password hash sync if hybrid",
      "Name": "MT.1024.7: Entra Recommendation - Enable password hash sync if hybrid",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "passwordHashSync"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Password hash synchronization is one of the sign-in methods used to accomplish hybrid identity. Microsoft Entra Connect synchronizes a hash of the hash of a user's password from an on-premises Microsoft Entra Connect instance to a cloud-based Microsoft Entra Connect cloud sync instance. Password hash synchronization helps by reducing the number of passwords your users need to maintain to just one. Enabling password hash synchronization also allows for leaked credential reporting., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Password hash synchronization is one of the sign-in methods used to accomplish hybrid identity. Microsoft Entra Connect synchronizes a hash of the hash of a user's password from an on-premises Microsoft Entra Connect instance to a cloud-based Microsoft Entra Connect cloud sync instance. Password hash synchronization helps by reducing the number of passwords your users need to maintain to just one. Enabling password hash synchronization also allows for leaked credential reporting., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.7: Entra Recommendation - Enable password hash sync if hybrid",
        "TestResult": "You have disabled password hash sync.\n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Enable password hash sync if hybrid](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. To use password hash synchronization in your organization, you need to install Microsoft Entra Connect and configure directory synchronization between your on-premises Microsoft Entra Connect instance and your Microsoft Entra Connect cloud sync instance. [Follow these steps to enable password hash synchronization](https://docs.microsoft.com/azure/active-directory/hybrid/how-to-connect-password-hash-synchronization#enable-password-hash-synchronization).",
        "TestDescription": "Password hash synchronization is one of the sign-in methods used to accomplish hybrid identity. Microsoft Entra Connect synchronizes a hash of the hash of a user's password from an on-premises Microsoft Entra Connect instance to a cloud-based Microsoft Entra Connect cloud sync instance. Password hash synchronization helps by reducing the number of passwords your users need to maintain to just one. Enabling password hash synchronization also allows for leaked credential reporting.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.9",
      "Title": "Entra Recommendation - Ensure all users can complete multifactor authentication",
      "Name": "MT.1024.9: Entra Recommendation - Ensure all users can complete multifactor authentication",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "mfaRegistrationV2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Multifactor authentication (MFA) helps protect devices and data that are accessible to these users. Adding more authentication methods, such as the Microsoft Authenticator app or a phone number, increases the level of protection if one factor is compromised., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Multifactor authentication (MFA) helps protect devices and data that are accessible to these users. Adding more authentication methods, such as the Microsoft Authenticator app or a phone number, increases the level of protection if one factor is compromised., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.9: Entra Recommendation - Ensure all users can complete multifactor authentication",
        "TestResult": "You have 45 of 59 users that aren’t registered with MFA. \n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Ensure all users can complete multifactor authentication](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2) in the Entra admin portal.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ✅ Pass | [PattiF@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [hamisik@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [nousagelocation@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [jackief@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [annaj@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [JohannaL@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [NestorW@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [wilnar@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [bagula@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [HenriettaM@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [unlicensed@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [JoniS@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [LeeG@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [roif@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [merillf_gmail.com#EXT#@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [GradyA@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [PradeepG@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [faizam@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [usernonick@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [Sync_DC1_d8475d81663f@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [RheaS@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [LynneR@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [tegran@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [LidiaH@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [yakupm@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [MiriamG@pora.onmicrosoft.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [jane@elapora.com]() | 06/20/2024 08:07:02 | \n| ✅ Pass | [emergency@elapora.com]() | 11/09/2024 08:10:41 | \n| ✅ Pass | [tyler@elapora.com]() | 02/07/2025 08:14:49 | \n| ✅ Pass | [merill@elapora.com]() | 03/09/2025 08:14:07 | \n| ✅ Pass | [sophia.rodriguez@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [michael.wong@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [jessica.taylor@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [olivia.patel@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [emma.johnson@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [james.thompson@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [david.kim@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [sarah.mitchell@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [ryan.chen@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [daniel.nguyen@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [AdeleV@pora.onmicrosoft.com]() | 03/21/2025 08:17:23 | \n| ✅ Pass | [simon.burn@elapora.com]() | 04/03/2025 08:20:42 | \n| ✅ Pass | [richard.wilkings@elapora.com]() | 04/03/2025 08:20:42 | \n| ✅ Pass | [aitest2@elapora.com]() | 04/03/2025 08:20:42 | \n| ✅ Pass | [shobalak_outlook.com#EXT#@pora.onmicrosoft.com]() | 04/03/2025 08:20:42 | \n| ✅ Pass | [aitest1@elapora.com]() | 04/03/2025 08:20:42 | \n| ❌ Fail | [richard.wilkings@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [LidiaH@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [merillf_gmail.com#EXT#@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [wilnar@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [JohannaL@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [jane@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [ryan.chen@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [hamisik@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [olivia.patel@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [bagula@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [james.thompson@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [merill@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [unlicensed@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [RheaS@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [sarah.mitchell@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [tegran@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [daniel.nguyen@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [JoniS@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [david.kim@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [faizam@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [roif@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [yakupm@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [NestorW@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [PattiF@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [sophia.rodriguez@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [PradeepG@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [usernonick@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [LynneR@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [emma.johnson@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [annaj@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [aitest1@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [michael.wong@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [jackief@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [HenriettaM@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [ann@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [LeeG@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [aitest2@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [shobalak_outlook.com#EXT#@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [nousagelocation@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [jessica.taylor@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [Sync_DC1_d8475d81663f@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [MiriamG@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [emergency@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [simon.burn@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [tyler@elapora.com]() | 04/17/2025 08:17:37 | \n\n\n#### Remediation actions:\n\n1. We provide step-by-step guidance to select and enable the right MFA method for your organization in the Microsoft 365 admin center. [Go to the Microsoft 365 MFA wizard](https://admin.microsoft.com/adminportal/home?Q=SecureScore\" \\l \"/featureexplorer/security/ConditionalAccess).\n\n2. If you would like to perform the implementation yourself, first check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n3. If you’ve invested in Microsoft Entra ID Premium P1 or P2 licenses, you can create a Conditional Access policy from scratch or by using a template. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-registration).\n\n4. If you would like to perform the implementation yourself and you’re using Microsoft Entra ID Free, turn on security defaults. Note: Security defaults and Conditional Access can’t be used side by side. [Enable security defaults](https://docs.microsoft.com/azure/active-directory/fundamentals/concept-fundamentals-security-defaults).\n\n5. Keep track of your user’s progress of registering authentication methods by going to Microsoft Entra ID > Security > Authentication methods > User registration details (requires Microsoft Entra ID Premium P1 or P2 licenses). [Go to User registration details](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/UserRegistrationDetails).\n\n6. Use registration campaign to nudge users to set up specific authentication methods by going to Microsoft Entra ID > Protection > Authentication methods > Registration campaign. [Go to registration campaign](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/RegistrationCampaign/fromNav/Identity).",
        "TestDescription": "Multifactor authentication (MFA) helps protect devices and data that are accessible to these users. Adding more authentication methods, such as the Microsoft Authenticator app or a phone number, increases the level of protection if one factor is compromised.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.10",
      "Title": "Entra Recommendation - Do not allow users to grant consent to unreliable applications",
      "Name": "MT.1024.10: Entra Recommendation - Do not allow users to grant consent to unreliable applications",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "integratedApps"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because To reduce the risk of malicious applications attempting to trick users into granting them access to your organization's data, we recommend that you allow user consent only for applications that have been published by a verified publisher., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because To reduce the risk of malicious applications attempting to trick users into granting them access to your organization's data, we recommend that you allow user consent only for applications that have been published by a verified publisher., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.10: Entra Recommendation - Do not allow users to grant consent to unreliable applications",
        "TestResult": "You have no user consent policy in place.\n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Do not allow users to grant consent to unreliable applications](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. Go to Microsoft Entra ID > Enterprise applications > Consent and permissions. [Go to Consent and permissions](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/UserSettings).\n\n2. Select “Allow user consent for apps from verified publishers, for selected permissions (Recommended)” to follow Microsoft’s best practice. [Learn more](https://docs.microsoft.com/azure/active-directory/manage-apps/consent-and-permissions-overview).\n\n3. Configure the low-impact permissions that users are allowed to consent to. Click “Select permissions to classify as low impact”. [Learn more](https://docs.microsoft.com/azure/active-directory/manage-apps/configure-permission-classifications?tabs=azure-portal).\n\n4. Optionally, you can help your users to consent to apps that require admin consent by setting up the admin consent workflow. This step is recommended but not required to get full score. [Learn how to configure the admin consent workflow](https://docs.microsoft.com/azure/active-directory/manage-apps/configure-admin-consent-workflow).",
        "TestDescription": "To reduce the risk of malicious applications attempting to trick users into granting them access to your organization's data, we recommend that you allow user consent only for applications that have been published by a verified publisher.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.11",
      "Title": "Entra Recommendation - Enable policy to block legacy authentication",
      "Name": "MT.1024.11: Entra Recommendation - Enable policy to block legacy authentication",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "blockLegacyAuthentication"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Today, most compromising sign-in attempts come from legacy authentication. Older office clients such as Office 2010 don’t support modern authentication and use legacy protocols such as IMAP, SMTP, and POP3. Legacy authentication doesn’t support multifactor authentication (MFA). Even if an MFA policy is configured in your environment, bad actors can bypass these enforcements through legacy protocols., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Today, most compromising sign-in attempts come from legacy authentication. Older office clients such as Office 2010 don’t support modern authentication and use legacy protocols such as IMAP, SMTP, and POP3. Legacy authentication doesn’t support multifactor authentication (MFA). Even if an MFA policy is configured in your environment, bad actors can bypass these enforcements through legacy protocols., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.11: Entra Recommendation - Enable policy to block legacy authentication",
        "TestResult": "You have 2 of 59 users that don’t have legacy authentication blocked. \n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Enable policy to block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication) in the Entra admin portal.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ✅ Pass | [emergency@elapora.com]() | 04/03/2025 08:20:42 | \n| ❌ Fail | [merill@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [emergency@elapora.com]() | 04/17/2025 08:17:37 | \n\n\n#### Remediation actions:\n\n1. We provide step-by-step guidance to select and enable the right method to block legacy authentication for your organization in the Microsoft 365 admin center (part of the MFA wizard). [Go to the Microsoft 365 MFA wizard](https://admin.microsoft.com/adminportal/home?Q=SecureScore#/featureexplorer/security/ConditionalAccess).\n\n2. If you would like to perform the implementation yourself, first check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n3. If you’ve invested in Microsoft Entra ID Premium P1 or P2 licenses, you can create a Conditional Access policy from scratch or by using a template. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-block-legacy).\n\n4. If you would like to perform the implementation yourself and you’re using Microsoft Entra ID Free, turn on security defaults. Note: Security defaults and Conditional Access can’t be used side by side. [Enable security defaults](https://docs.microsoft.com/azure/active-directory/fundamentals/concept-fundamentals-security-defaults).",
        "TestDescription": "Today, most compromising sign-in attempts come from legacy authentication. Older office clients such as Office 2010 don’t support modern authentication and use legacy protocols such as IMAP, SMTP, and POP3. Legacy authentication doesn’t support multifactor authentication (MFA). Even if an MFA policy is configured in your environment, bad actors can bypass these enforcements through legacy protocols.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.12",
      "Title": "Entra Recommendation - Require multifactor authentication for administrative roles",
      "Name": "MT.1024.12: Entra Recommendation - Require multifactor authentication for administrative roles",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "adminMFAV2"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Requiring multifactor authentication (MFA) for administrative roles makes it harder for attackers to access accounts. Administrative roles have higher permissions than typical users. If any of those accounts are compromised, your entire organization is exposed. At a minimum, protect the following roles: Global administrator, Authentication administrator, Billing administrator, Conditional Access administrator, Exchange administrator, Helpdesk administrator, Security administrator, SharePoint administrator, User administrator., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Requiring multifactor authentication (MFA) for administrative roles makes it harder for attackers to access accounts. Administrative roles have higher permissions than typical users. If any of those accounts are compromised, your entire organization is exposed. At a minimum, protect the following roles: Global administrator, Authentication administrator, Billing administrator, Conditional Access administrator, Exchange administrator, Helpdesk administrator, Security administrator, SharePoint administrator, User administrator., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.12: Entra Recommendation - Require multifactor authentication for administrative roles",
        "TestResult": "You have 5 of 9 users with administrative roles that aren’t registered and protected with MFA.\n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Require multifactor authentication for administrative roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2) in the Entra admin portal.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ✅ Pass | [merillf_gmail.com#EXT#@pora.onmicrosoft.com]() | 05/23/2024 08:10:57 | \n| ✅ Pass | [emergency@elapora.com]() | 11/09/2024 08:10:41 | \n| ✅ Pass | [tyler@elapora.com]() | 02/07/2025 08:14:49 | \n| ✅ Pass | [merill@elapora.com]() | 03/09/2025 08:14:07 | \n| ✅ Pass | [AdeleV@pora.onmicrosoft.com]() | 03/21/2025 08:17:23 | \n| ❌ Fail | [emergency@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [merill@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [merillf_gmail.com#EXT#@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [ann@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [tyler@elapora.com]() | 04/17/2025 08:17:37 | \n\n\n#### Remediation actions:\n\n1. We provide step-by-step guidance to select and enable the right MFA method for your organization in the Microsoft 365 admin center. [Go to the Microsoft 365 MFA wizard](https://admin.microsoft.com/adminportal/home?Q=SecureScore#/featureexplorer/security/ConditionalAccess).\n\n2. If you would like to perform the implementation yourself, first check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n3. If you’ve invested in Microsoft Entra ID Premium P1 or P2 licenses, you can create a Conditional Access policy from scratch or by using a template. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-admin-mfa).\n\n4. If you would like to perform the implementation yourself and you’re using Microsoft Entra ID Free, turn on security defaults. Note: Security defaults and Conditional Access can’t be used side by side. [Enable security defaults](https://docs.microsoft.com/azure/active-directory/fundamentals/concept-fundamentals-security-defaults).\n\n5. Keep track of your admin’s progress of registering authentication methods by going to Microsoft Entra ID > Security > Authentication methods > User registration details (requires Microsoft Entra ID Premium P1 or P2 licenses). [Go to User registration details](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/UserRegistrationDetails).",
        "TestDescription": "Requiring multifactor authentication (MFA) for administrative roles makes it harder for attackers to access accounts. Administrative roles have higher permissions than typical users. If any of those accounts are compromised, your entire organization is exposed. At a minimum, protect the following roles: Global administrator, Authentication administrator, Billing administrator, Conditional Access administrator, Exchange administrator, Helpdesk administrator, Security administrator, SharePoint administrator, User administrator.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.14",
      "Title": "Entra Recommendation - Renew expiring application credentials",
      "Name": "MT.1024.14: Entra Recommendation - Renew expiring application credentials",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "applicationCredentialExpiry"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.14: Entra Recommendation - Renew expiring application credentials",
        "TestResult": "Your tenant has applications with credentials that will expire soon.\n\n➡️ Open [Recommendation - Renew expiring application credentials](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. From the impacted resources table, click on “More details” to see and note the ID of the credential.[]().\n\n2. Click the “Update credential” link to navigate to the Application registration blade.[]().\n\n3. Navigate to the Certificates & Secrets section of the app registration.[]().\n\n4. Pick the credential type that you want to rotate and navigate to either Certificates or Client Secret tab and follow the prompts to add a new credential of that type.[]().\n\n5. Once the certificate or secret is successfully added, update the service code to ensure it works with the new credential.[]().\n\n6. Use the Microsoft Entra sign-in logs to validate that the Key ID of the credential matches the one that was recently added.[]().\n\n7. After validating the new credential, navigate back to App registrations > Certificates and Secrets for the app and remove the old credential.[]().",
        "TestDescription": "Renewing an application’s credentials prior to their expiry date is crucial for maintaining uninterrupted operations and minimizing the risk of any downtime resulting from outdated credentials.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.15",
      "Title": "Entra Recommendation - Remove unused credentials from applications",
      "Name": "MT.1024.15: Entra Recommendation - Remove unused credentials from applications",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "staleAppCreds"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Removing unused application credentials helps reduce the attack surface area and helps declutter the app portfolio of a tenant., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Removing unused application credentials helps reduce the attack surface area and helps declutter the app portfolio of a tenant., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.15: Entra Recommendation - Remove unused credentials from applications",
        "TestResult": "Your tenant has applications with credentials which have not been used in more than 30 days.\n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Remove unused credentials from applications](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds) in the Entra admin portal.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ✅ Pass | [SumoLogic](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/144df581-a0c9-4280-9739-0c3612ab9ccf/appId/1b6c36b2-f2b1-43d3-b74f-8d52c44fc9c1) | 08/29/2024 10:01:29 | \n| ✅ Pass | [SumoLogic](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/144df581-a0c9-4280-9739-0c3612ab9ccf/appId/1b6c36b2-f2b1-43d3-b74f-8d52c44fc9c1) | 08/29/2024 10:01:29 | \n| ✅ Pass | [AWS Single-Account Access](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/dc89bf5d-83e8-4419-9162-3b9280a85755/appId/091edd89-b342-4bb5-9144-82fe6c913987) | 08/29/2024 10:01:29 | \n| ✅ Pass | [AWS Single-Account Access](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/dc89bf5d-83e8-4419-9162-3b9280a85755/appId/091edd89-b342-4bb5-9144-82fe6c913987) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Saml test entity id](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/d589a2e6-4a78-4cdd-901b-f574dc7880db/appId/6590313e-1c00-4c07-be28-72858e837a52) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Saml test entity id](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/d589a2e6-4a78-4cdd-901b-f574dc7880db/appId/6590313e-1c00-4c07-be28-72858e837a52) | 08/29/2024 10:01:29 | \n| ✅ Pass | [test](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/31e80a1b-3faa-4ce9-9794-2b77f61f20f7/appId/8ae2b566-71f5-467e-8960-cfe8da3a2cfa) | 08/29/2024 10:01:29 | \n| ✅ Pass | [test](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/31e80a1b-3faa-4ce9-9794-2b77f61f20f7/appId/8ae2b566-71f5-467e-8960-cfe8da3a2cfa) | 08/29/2024 10:01:29 | \n| ❌ Fail | [SumoLogic](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/144df581-a0c9-4280-9739-0c3612ab9ccf/appId/1b6c36b2-f2b1-43d3-b74f-8d52c44fc9c1) | 04/17/2025 10:05:37 | \n\n\n#### Remediation actions:\n\n1. From the ‘Impacted resources’ table, select ‘More details’ to identify the Credential ID and the Origin of the credential.[]().\n\n2. Select ‘Update credential’ to go directly to the Application or Service principal area.[]().\n\n3. If the Origin of the credential is an application, select ‘Certificates & secrets’ then locate the unused credential and remove it.[]().\n\n4. If the Origin of the credential is a service principal, go to ‘Identity’ > ‘Enterprise applications’ > ‘Single sign-on’ > ‘SAML certificates’ then locate the unused credential and remove it.[]().\n\n5. In the instance where the origin of the credential in the recommendation is marked as service principal but there are no SAML certificates, you can use the Microsoft Graph API to query specific properties and remove the credential from the Service Principal. For more information, see [Recommendation to remove unused apps](https://go.microsoft.com/fwlink/?linkid=2285918).",
        "TestDescription": "Removing unused application credentials helps reduce the attack surface area and helps declutter the app portfolio of a tenant.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.16",
      "Title": "Entra Recommendation - Remove unused applications",
      "Name": "MT.1024.16: Entra Recommendation - Remove unused applications",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "staleApps"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Removing unused applications helps reduce the attack surface area and helps declutter the app portfolio of a tenant., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Removing unused applications helps reduce the attack surface area and helps declutter the app portfolio of a tenant., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.16: Entra Recommendation - Remove unused applications",
        "TestResult": "This recommendation will surface if your tenant has applications that have not been used for over 90 days. Applications that were created but never used, client applications which have not been issued a token or resource apps that have not been a target of a token request, will show under this recommendation.\n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Remove unused applications](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_staleApps) in the Entra admin portal.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ✅ Pass | [Google Cloud / G Suite Connector by Microsoft](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/12bb770c-850b-423c-acac-2c9762bd5ee9) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Assessment app](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/173f3b0c-8987-43af-bd21-3783b755ab98) | 08/29/2024 10:01:29 | \n| ✅ Pass | [AWS Single-Account Access](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/091edd89-b342-4bb5-9144-82fe6c913987) | 08/29/2024 10:01:29 | \n| ✅ Pass | [mobile app](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3e3698b4-f52a-4e05-a639-cf791d198f03) | 08/29/2024 10:01:29 | \n| ✅ Pass | [PnPPowerShell](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/1d93462e-0f39-4e4c-898a-b6b1df5fa997) | 08/29/2024 10:01:29 | \n| ✅ Pass | [BlazorMultiDemo](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/2e311a1d-f5c0-41c6-b866-77af3289871e) | 08/29/2024 10:01:29 | \n| ✅ Pass | [AppRolePimTestChildApp](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3cc4d46f-39a7-4da0-980d-620341db8101) | 08/29/2024 10:01:29 | \n| ✅ Pass | [test](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/4f50c653-dae4-44e7-ae2e-a081cce1f830) | 08/29/2024 10:01:29 | \n| ✅ Pass | [My Doc Gen](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/e580347d-d0aa-4aa1-9113-5daa0bb1c805) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Saml test entity id](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/6590313e-1c00-4c07-be28-72858e837a52) | 08/29/2024 10:01:29 | \n| ✅ Pass | [test public client](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/79a0c604-f215-4c52-8fbe-641d08aa7937) | 08/29/2024 10:01:29 | \n| ✅ Pass | [SharePoint Version App](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/2bb68591-782c-4c64-9415-bdf9414ae400) | 08/29/2024 10:01:29 | \n| ✅ Pass | [WebApplication3](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/bcdb1ed5-9470-41e6-821b-1fc42ae94cfb) | 08/29/2024 10:01:29 | \n| ✅ Pass | [ServiceNow](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ecbbb1c8-ef06-48c4-9211-9ffbfbc24b94) | 08/29/2024 10:01:29 | \n| ✅ Pass | [test demo](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d734d232-25cb-4a20-9937-589f74707926) | 08/29/2024 10:01:29 | \n| ✅ Pass | [test](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c823a25d-fe94-494c-91f6-c7d51bf2df82) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Microsoft Graph PowerShell - Used by Team Incredibles](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/2935f660-810c-41ff-b9ad-168cc649e36f) | 08/29/2024 10:01:29 | \n| ✅ Pass | [ASPNET-Tutorial](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/059da61d-d02e-40ee-8140-6842d5819f18) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Box](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/cd9b6959-7da0-4af1-ac5e-4036be679d06) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Azure AD SAML Toolkit](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/6f5ed68c-9fad-4d78-bf88-2b16bbe16338) | 08/29/2024 10:01:29 | \n| ✅ Pass | [TestAAD](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/beb68935-f55b-478f-b7a6-b61424a0754c) | 08/29/2024 10:01:29 | \n| ✅ Pass | [graph-developer-proxy-samples](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3658d9e9-dc87-4345-b59b-184febcf6781) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Sumo Logic](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/86b3e44d-492a-40bb-846d-72ec4d3c45f0) | 08/29/2024 10:01:29 | \n| ✅ Pass | [WebApplication3_20210211261232](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ac49e193-bd5f-40fe-b4ff-e62136419388) | 08/29/2024 10:01:29 | \n| ✅ Pass | [SumoLogic](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/1b6c36b2-f2b1-43d3-b74f-8d52c44fc9c1) | 08/29/2024 10:01:29 | \n| ✅ Pass | [CachingSampleApp](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3d6835ff-f7f4-4a83-adb5-67ccdd934717) | 08/29/2024 10:01:29 | \n| ✅ Pass | [spatest](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/29f30b71-ee1f-4759-9cef-c9205fa97c8c) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Graph Filter](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c94b2f6c-f4c2-4ab3-8d1a-6971b2c7e975) | 08/29/2024 10:01:29 | \n| ✅ Pass | [MyMobile](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/2d66cc83-3d41-4704-b060-8791f49fd7dc) | 08/29/2024 10:01:29 | \n| ✅ Pass | [My simple app](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ac96c48c-170b-4dd2-98cb-d0d3b2b1ba44) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Workday](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/aa94c951-f6e4-4bc0-bcf2-285399beb643) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Maester DevOps Account - GitHub - Secret (demo)](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d0dc5f0a-bf75-41a4-9272-d5ec2345c963) | 08/29/2024 10:01:29 | \n| ✅ Pass | [WingtipToys App](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/56a89db1-6ed2-4171-88f6-b4f7597dbce3) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Atlassian Cloud](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3a689936-1313-4b8e-be76-931e46da03fa) | 08/29/2024 10:01:29 | \n| ✅ Pass | [groupreg](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/eae40c30-b994-41a1-986f-3c7ffcf9d475) | 08/29/2024 10:01:29 | \n| ✅ Pass | [samlclaim](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/1d2c143c-4985-4572-915f-f16873879d24) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Docusign](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/712ec6bf-1d33-4d13-b6cc-e28b30751435) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Postman](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/7fb37b38-ce4f-4675-9263-0cd3404b4925) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Maester DevOps Account - GitHub](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/f050a85f-390b-4d43-85a0-2196b706bfd6) | 08/29/2024 10:01:29 | \n| ✅ Pass | [test](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/8ae2b566-71f5-467e-8960-cfe8da3a2cfa) | 08/29/2024 10:01:29 | \n| ✅ Pass | [WebApplication4](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/b2d1f868-27ee-4ecd-ae81-0ee96b028605) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Entry Kiosk](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/b903f17a-87b0-460b-9978-962c812e4f98) | 08/29/2024 10:01:29 | \n| ✅ Pass | [SAP Analytics Cloud](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/88bb9c21-2b67-4e09-aa64-a05453aa24fd) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Salesforce](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/1a2a1d4c-1d76-44ec-95f4-3ed5345423a9) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Demo](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/f864cc86-0f4f-4861-9583-2580817e4f88) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Test API PS add crede](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/93bbd7d8-a127-4370-ab85-c3fcf6a5ebeb) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Automation](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/dc7d83b5-d38b-4488-8952-7abf02e71590) | 08/29/2024 10:01:29 | \n| ✅ Pass | [RemixTest](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d4588485-154e-4b32-935f-31ceaf993cdc) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Cool New for Telstra](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d77611ee-5051-4383-9af3-5ba3627306a7) | 08/29/2024 10:01:29 | \n| ✅ Pass | [aad-extensions-app. Do not modify. Used by AAD for storing user data.](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d211b2a1-0c5e-4be8-a40a-46033a0b6df2) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Dropbox Business](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/f76d7d98-02ee-4e62-9345-36016a72e664) | 08/29/2024 10:01:29 | \n| ✅ Pass | [InfinityDemo - Sample](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/20f152d5-856c-449d-aa07-81f5e510dfa7) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Graph PowerShell - Privileged Perms](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c5338ce0-3e9e-4895-8f49-5e176836a348) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Workday](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c5f30d9b-59a2-4b24-a5b3-a8d14e420497) | 08/29/2024 10:01:29 | \n| ✅ Pass | [AppRolePimAutomationTestParentAcc19Feb22](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/b650c3c1-3395-40bb-8471-2a6a8b76d8a9) | 08/29/2024 10:01:29 | \n| ✅ Pass | [My idPowerToys](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/cedf636f-98aa-41bc-8262-d30a6d1ce376) | 08/29/2024 10:01:29 | \n| ✅ Pass | [spa test](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3f94a971-3133-4ccb-981d-093024494bed) | 08/29/2024 10:01:29 | \n| ✅ Pass | [MyZtA[[](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d159fcf5-a613-435b-8195-8add3cdf4bff) | 08/29/2024 10:01:29 | \n| ✅ Pass | [EAM Provider](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/f8642471-b7d7-4432-9527-776071e69b8b) | 08/29/2024 10:01:29 | \n| ✅ Pass | [InfinityDemo](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/fef811e1-2354-43b0-961b-248fe15e737d) | 08/29/2024 10:01:29 | \n| ✅ Pass | [aadgraphmggraph](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/24b66505-1142-452f-9472-2ecbb37deac1) | 08/29/2024 10:01:29 | \n| ✅ Pass | [elapora-Maester-54d3ea01-5a07-45d0-8d69-e5f5b0b20098](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/a8c184ae-8ddf-41f3-8881-c090b43c385f) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Adatum Demo App](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d2934d2a-3fbc-44a1-bda0-13e8d8a73b15) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Docusign](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/bc582926-d3ef-48e0-9a43-e813b898afb0) | 08/29/2024 10:01:29 | \n| ✅ Pass | [M365PronounKit](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/eea28244-3eec-4820-beae-d4a2c0bcc235) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Maester DevOps Account](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d99dd249-6ab3-4e92-be40-81af11658359) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Adobe Identity Management](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ff64cddf-24b9-4fcd-a1f7-d0450e4e6e09) | 08/29/2024 10:01:29 | \n| ✅ Pass | [Adobe Identity Management](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/414689fd-571d-45f6-a667-ef83c95bf11d) | 08/29/2024 10:01:29 | \n| ✅ Pass | [saml test app](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c266d677-a5f8-47bc-9f0a-1b6fbe0bddad) | 08/29/2024 10:01:29 | \n| ✅ Pass | [TokenTestClient](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ad96f4e9-6971-4892-8f5a-7fa522f793a2) | 08/29/2024 10:01:29 | \n| ✅ Pass | [MyTokenTestApp](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/6a846cb7-35ad-41b2-b10a-0c5decde9855) | 08/29/2024 10:01:29 | \n| ✅ Pass | [MyZt](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/eee51d92-0bb5-4467-be6a-8f24ef677e4d) | 08/29/2024 10:01:29 | \n| ✅ Pass | [testuserread](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/9fe2675c-7fc5-4895-8470-eed989ea0d63) | 11/11/2024 10:03:58 | \n| ✅ Pass | [Graph PS - Zero Trust Workshop](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/a9632ced-c276-4c2b-9288-3a34b755eaa9) | 01/26/2025 10:04:49 | \n| ✅ Pass | [MyTestForBlock](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/14a3ba45-3246-4fbe-8c3b-c3922e68232b) | 03/11/2025 10:04:34 | \n| ✅ Pass | [GraphPermissionApp](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d36fe320-bc28-40c8-a141-a512d65d112c) | 04/09/2025 10:06:21 | \n| ✅ Pass | [Zero Trust Assessment](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/e7dfcbb6-fe86-44a2-b512-8d361dcc3d30) | 04/09/2025 10:06:21 | \n| ✅ Pass | [Maester DevOps Account](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/303774c1-3c6f-4dfd-8505-f24e82f9212a) | 04/09/2025 10:06:21 | \n| ✅ Pass | [Entra.News Automation Script - Message Center](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/83f76a08-fa60-48e6-9cb5-fd8ced5ae314) | 04/09/2025 10:06:21 | \n| ✅ Pass | [MessageCenterAccount github.com/merill/mc DO NOT DELETE](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/778fad36-e4c1-4d40-a58e-9b5b64179d41) | 04/09/2025 10:06:21 | \n| ✅ Pass | [GitHub Actions App for Microsoft Info script](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/38535360-9f3e-4b1e-a41e-b4af46afcb0c) | 04/09/2025 10:06:21 | \n| ❌ Fail | [WingtipToys App](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/56a89db1-6ed2-4171-88f6-b4f7597dbce3) | 04/23/2025 10:04:47 | \n| ❌ Fail | [PnPPowerShell](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/1d93462e-0f39-4e4c-898a-b6b1df5fa997) | 04/23/2025 10:04:47 | \n| ❌ Fail | [MyZtA[[](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d159fcf5-a613-435b-8195-8add3cdf4bff) | 04/23/2025 10:04:47 | \n| ❌ Fail | [AppRolePimAutomationTestParentAcc19Feb22](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/b650c3c1-3395-40bb-8471-2a6a8b76d8a9) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Box](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/cd9b6959-7da0-4af1-ac5e-4036be679d06) | 04/23/2025 10:04:47 | \n| ❌ Fail | [SharePoint Version App](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/2bb68591-782c-4c64-9415-bdf9414ae400) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Sumo Logic](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/86b3e44d-492a-40bb-846d-72ec4d3c45f0) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Cool New for Telstra](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d77611ee-5051-4383-9af3-5ba3627306a7) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Adobe Identity Management](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/414689fd-571d-45f6-a667-ef83c95bf11d) | 04/23/2025 10:04:47 | \n| ❌ Fail | [test](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/4f50c653-dae4-44e7-ae2e-a081cce1f830) | 04/23/2025 10:04:47 | \n| ❌ Fail | [mobile app](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3e3698b4-f52a-4e05-a639-cf791d198f03) | 04/23/2025 10:04:47 | \n| ❌ Fail | [EAM Provider](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/f8642471-b7d7-4432-9527-776071e69b8b) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Maester DevOps Account - GitHub](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/f050a85f-390b-4d43-85a0-2196b706bfd6) | 04/23/2025 10:04:47 | \n| ❌ Fail | [My Doc Gen](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/e580347d-d0aa-4aa1-9113-5daa0bb1c805) | 04/23/2025 10:04:47 | \n| ❌ Fail | [TestAAD](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/beb68935-f55b-478f-b7a6-b61424a0754c) | 04/23/2025 10:04:47 | \n| ❌ Fail | [ASPNET-Tutorial](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/059da61d-d02e-40ee-8140-6842d5819f18) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Atlassian Cloud](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3a689936-1313-4b8e-be76-931e46da03fa) | 04/23/2025 10:04:47 | \n| ❌ Fail | [graph-developer-proxy-samples](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3658d9e9-dc87-4345-b59b-184febcf6781) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Microsoft Graph PowerShell - Used by Team Incredibles](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/2935f660-810c-41ff-b9ad-168cc649e36f) | 04/23/2025 10:04:47 | \n| ❌ Fail | [groupreg](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/eae40c30-b994-41a1-986f-3c7ffcf9d475) | 04/23/2025 10:04:47 | \n| ❌ Fail | [AppRolePimTestChildApp](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3cc4d46f-39a7-4da0-980d-620341db8101) | 04/23/2025 10:04:47 | \n| ❌ Fail | [aadgraphmggraph](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/24b66505-1142-452f-9472-2ecbb37deac1) | 04/23/2025 10:04:47 | \n| ❌ Fail | [CachingSampleApp](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3d6835ff-f7f4-4a83-adb5-67ccdd934717) | 04/23/2025 10:04:47 | \n| ❌ Fail | [RemixTest](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d4588485-154e-4b32-935f-31ceaf993cdc) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Workday](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/aa94c951-f6e4-4bc0-bcf2-285399beb643) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Adobe Identity Management](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ff64cddf-24b9-4fcd-a1f7-d0450e4e6e09) | 04/23/2025 10:04:47 | \n| ❌ Fail | [AWS Single-Account Access](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/091edd89-b342-4bb5-9144-82fe6c913987) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Google Cloud / G Suite Connector by Microsoft](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/12bb770c-850b-423c-acac-2c9762bd5ee9) | 04/23/2025 10:04:47 | \n| ❌ Fail | [MyZt](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/eee51d92-0bb5-4467-be6a-8f24ef677e4d) | 04/23/2025 10:04:47 | \n| ❌ Fail | [MyTestForBlock](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/14a3ba45-3246-4fbe-8c3b-c3922e68232b) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Graph PowerShell - Privileged Perms](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c5338ce0-3e9e-4895-8f49-5e176836a348) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Adatum Demo App](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d2934d2a-3fbc-44a1-bda0-13e8d8a73b15) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Automation](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/dc7d83b5-d38b-4488-8952-7abf02e71590) | 04/23/2025 10:04:47 | \n| ❌ Fail | [samlclaim](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/1d2c143c-4985-4572-915f-f16873879d24) | 04/23/2025 10:04:47 | \n| ❌ Fail | [ServiceNow](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ecbbb1c8-ef06-48c4-9211-9ffbfbc24b94) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Maester DevOps Account](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d99dd249-6ab3-4e92-be40-81af11658359) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Entry Kiosk](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/b903f17a-87b0-460b-9978-962c812e4f98) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Docusign](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/bc582926-d3ef-48e0-9a43-e813b898afb0) | 04/23/2025 10:04:47 | \n| ❌ Fail | [spatest](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/29f30b71-ee1f-4759-9cef-c9205fa97c8c) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Maester DevOps Account - GitHub - Secret (demo)](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d0dc5f0a-bf75-41a4-9272-d5ec2345c963) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Saml test entity id](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/6590313e-1c00-4c07-be28-72858e837a52) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Workday](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c5f30d9b-59a2-4b24-a5b3-a8d14e420497) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Salesforce](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/1a2a1d4c-1d76-44ec-95f4-3ed5345423a9) | 04/23/2025 10:04:47 | \n| ❌ Fail | [testuserread](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/9fe2675c-7fc5-4895-8470-eed989ea0d63) | 04/23/2025 10:04:47 | \n| ❌ Fail | [My idPowerToys](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/cedf636f-98aa-41bc-8262-d30a6d1ce376) | 04/23/2025 10:04:47 | \n| ❌ Fail | [aad-extensions-app. Do not modify. Used by AAD for storing user data.](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d211b2a1-0c5e-4be8-a40a-46033a0b6df2) | 04/23/2025 10:04:47 | \n| ❌ Fail | [WebApplication4](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/b2d1f868-27ee-4ecd-ae81-0ee96b028605) | 04/23/2025 10:04:47 | \n| ❌ Fail | [MyMobile](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/2d66cc83-3d41-4704-b060-8791f49fd7dc) | 04/23/2025 10:04:47 | \n| ❌ Fail | [InfinityDemo - Sample](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/20f152d5-856c-449d-aa07-81f5e510dfa7) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Test API PS add crede](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/93bbd7d8-a127-4370-ab85-c3fcf6a5ebeb) | 04/23/2025 10:04:47 | \n| ❌ Fail | [My simple app](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ac96c48c-170b-4dd2-98cb-d0d3b2b1ba44) | 04/23/2025 10:04:47 | \n| ❌ Fail | [M365PronounKit](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/eea28244-3eec-4820-beae-d4a2c0bcc235) | 04/23/2025 10:04:47 | \n| ❌ Fail | [spa test](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/3f94a971-3133-4ccb-981d-093024494bed) | 04/23/2025 10:04:47 | \n| ❌ Fail | [WebApplication3](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/bcdb1ed5-9470-41e6-821b-1fc42ae94cfb) | 04/23/2025 10:04:47 | \n| ❌ Fail | [elapora-Maester-54d3ea01-5a07-45d0-8d69-e5f5b0b20098](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/a8c184ae-8ddf-41f3-8881-c090b43c385f) | 04/23/2025 10:04:47 | \n| ❌ Fail | [BlazorMultiDemo](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/2e311a1d-f5c0-41c6-b866-77af3289871e) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Graph Filter](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c94b2f6c-f4c2-4ab3-8d1a-6971b2c7e975) | 04/23/2025 10:04:47 | \n| ❌ Fail | [test public client](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/79a0c604-f215-4c52-8fbe-641d08aa7937) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Demo](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/f864cc86-0f4f-4861-9583-2580817e4f88) | 04/23/2025 10:04:47 | \n| ❌ Fail | [saml test app](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c266d677-a5f8-47bc-9f0a-1b6fbe0bddad) | 04/23/2025 10:04:47 | \n| ❌ Fail | [test demo](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/d734d232-25cb-4a20-9937-589f74707926) | 04/23/2025 10:04:47 | \n| ❌ Fail | [TokenTestClient](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ad96f4e9-6971-4892-8f5a-7fa522f793a2) | 04/23/2025 10:04:47 | \n| ❌ Fail | [MyTokenTestApp](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/6a846cb7-35ad-41b2-b10a-0c5decde9855) | 04/23/2025 10:04:47 | \n| ❌ Fail | [WebApplication3_20210211261232](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/ac49e193-bd5f-40fe-b4ff-e62136419388) | 04/23/2025 10:04:47 | \n| ❌ Fail | [SumoLogic](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/1b6c36b2-f2b1-43d3-b74f-8d52c44fc9c1) | 04/23/2025 10:04:47 | \n| ❌ Fail | [test](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/8ae2b566-71f5-467e-8960-cfe8da3a2cfa) | 04/23/2025 10:04:47 | \n| ❌ Fail | [SAP Analytics Cloud](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/88bb9c21-2b67-4e09-aa64-a05453aa24fd) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Docusign](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/712ec6bf-1d33-4d13-b6cc-e28b30751435) | 04/23/2025 10:04:47 | \n| ❌ Fail | [test](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/c823a25d-fe94-494c-91f6-c7d51bf2df82) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Assessment app](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/173f3b0c-8987-43af-bd21-3783b755ab98) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Azure AD SAML Toolkit](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/6f5ed68c-9fad-4d78-bf88-2b16bbe16338) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Graph PS - Zero Trust Workshop](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/a9632ced-c276-4c2b-9288-3a34b755eaa9) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Dropbox Business](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/f76d7d98-02ee-4e62-9345-36016a72e664) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Postman](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/7fb37b38-ce4f-4675-9263-0cd3404b4925) | 04/23/2025 10:04:47 | \n| ❌ Fail | [InfinityDemo](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/fef811e1-2354-43b0-961b-248fe15e737d) | 04/23/2025 10:04:47 | \n| ❌ Fail | [Contoso Access Verifier](https://portal.azure.com/#view/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/~/Overview/appId/a6af3433-bc44-4d27-9b35-81d10fd51315) | 04/26/2025 10:06:39 | \n\n\n#### Remediation actions:\n\n1. From the Impacted resources table, select More details to identify the impacted resources.[]().\n\n2. Select the Resource link to go directly to the associated App registration page.[]().\n\n3. Determine if the identified application is needed based on the application usage scenario. For example, an application could have usage gaps due to being deprecated or intentional long intermittent use through the year. []().\n\n4. If the application is no longer needed, remove it from your tenant by first soft deleting it, wait 15 days, and then remove it permanently. Find more details on how to soft or permanently delete applications, see [How to: Restore or remove a recently deleted application with the Microsoft identity platform](https://learn.microsoft.com/en-us/entra/identity-platform/howto-restore-app).\n\n5. If the application is needed, you have the option to update the status of the recommendation for that application as Dismissed or Postponed. For more information, see [How to update a recommendation.](https://learn.microsoft.com/en-us/entra/identity/monitoring-health/howto-use-recommendations#how-to-update-a-recommendation&tabs=http).\n\n6. For more information, see [Recommendation to remove unused apps.](https://learn.microsoft.com/en-us/entra/identity/monitoring-health/recommendation-remove-unused-apps).",
        "TestDescription": "Removing unused applications helps reduce the attack surface area and helps declutter the app portfolio of a tenant.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.2",
      "Title": "Entra Recommendation - Protect all users with a user risk policy",
      "Name": "MT.1024.2: Entra Recommendation - Protect all users with a user risk policy ",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "userRiskPolicy"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because With the user risk policy turned on, Microsoft Entra ID detects the probability that a user account has been compromised. As an administrator, you can configure a user risk Conditional Access policy to automatically respond to a specific user risk level. For example, you can block access to your resources or require a password change to get a user account back into a clean state., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because With the user risk policy turned on, Microsoft Entra ID detects the probability that a user account has been compromised. As an administrator, you can configure a user risk Conditional Access policy to automatically respond to a specific user risk level. For example, you can block access to your resources or require a password change to get a user account back into a clean state., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.2: Entra Recommendation - Protect all users with a user risk policy ",
        "TestResult": "You have 2 of 59 users that don’t have a user risk policy enabled. \n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Protect all users with a user risk policy ](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy) in the Entra admin portal.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ✅ Pass | [merill@elapora.com]() | 05/25/2024 08:09:32 | \n| ✅ Pass | [emergency@elapora.com]() | 04/03/2025 08:20:42 | \n| ❌ Fail | [emergency@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [merill@elapora.com]() | 04/17/2025 08:17:37 | \n\n\n#### Remediation actions:\n\n1. To implement this recommendation, you need Microsoft Entra ID Premium P2 licenses. Check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n2. If you’ve invested in Microsoft Entra ID Premium P2 licenses, you can create a Conditional Access policy from scratch or by using a template. Note: Classic Conditional Access policies aren’t scored. Use the recommended steps to receive credit. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-risk-user).\n\n3. If you’re not using Microsoft Entra ID Premium P2 licenses, we recommend you set the status for this action to “Dismissed” or “Risk accepted”. []().",
        "TestDescription": "With the user risk policy turned on, Microsoft Entra ID detects the probability that a user account has been compromised. As an administrator, you can configure a user risk Conditional Access policy to automatically respond to a specific user risk level. For example, you can block access to your resources or require a password change to get a user account back into a clean state.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.1",
      "Title": "Entra Recommendation - Protect your tenant with Insider Risk condition in Conditional Access policy",
      "Name": "MT.1024.1: Entra Recommendation - Protect your tenant with Insider Risk condition in Conditional Access policy",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "insiderRiskPolicy"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Enabling an Insider Risk-based Conditional Access policy offers crucial benefits, including early detection of anomalies, adaptive access controls, and real-time responses to insider threats. It prevents unauthorized access, enforces compliance, and reduces the impact of insider incidents. By fostering a security-aware culture, the policy integrates with the broader security ecosystem, providing a comprehensive approach to mitigate risks originating from within the organization, safeguarding sensitive data, and enhancing overall security posture.​, but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Enabling an Insider Risk-based Conditional Access policy offers crucial benefits, including early detection of anomalies, adaptive access controls, and real-time responses to insider threats. It prevents unauthorized access, enforces compliance, and reduces the impact of insider incidents. By fostering a security-aware culture, the policy integrates with the broader security ecosystem, providing a comprehensive approach to mitigate risks originating from within the organization, safeguarding sensitive data, and enhancing overall security posture.​, but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.1: Entra Recommendation - Protect your tenant with Insider Risk condition in Conditional Access policy",
        "TestResult": "You have 59 of 59 users that aren’t covered by the Insider Risk condition in a Conditional Access policy.\n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Protect your tenant with Insider Risk condition in Conditional Access policy](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. Enable Adaptive Protection in Microsoft Purview. You must be a member of the Insider Risk Management or Insider Risk Management Admins role group in Microsoft Purview to configure Adaptive Protection. [Go to Adaptive Protection.](https://go.microsoft.com/fwlink/?linkid=2261736).\n\n2. Create a Conditional Access policy that includes the Insider Risk condition. [Use this risk policy template](https://go.microsoft.com/fwlink/?linkid=2261903).\n\n3. For more information about this recommendation and the associated features, see [Adaptive Protection and Insider Risk Conditional Access recommendation.](https://go.microsoft.com/fwlink/?linkid=2260505).",
        "TestDescription": "Enabling an Insider Risk-based Conditional Access policy offers crucial benefits, including early detection of anomalies, adaptive access controls, and real-time responses to insider threats. It prevents unauthorized access, enforces compliance, and reduces the impact of insider incidents. By fostering a security-aware culture, the policy integrates with the broader security ecosystem, providing a comprehensive approach to mitigate risks originating from within the organization, safeguarding sensitive data, and enhancing overall security posture.​",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.3",
      "Title": "Entra Recommendation - Protect all users with a sign-in risk policy",
      "Name": "MT.1024.3: Entra Recommendation - Protect all users with a sign-in risk policy",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "signinRiskPolicy"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Turning on the sign-in risk policy ensures that suspicious sign-ins are challenged for multifactor authentication (MFA)., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Turning on the sign-in risk policy ensures that suspicious sign-ins are challenged for multifactor authentication (MFA)., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "96",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.3: Entra Recommendation - Protect all users with a sign-in risk policy",
        "TestResult": "You have 59 of 59 users that don't have a sign-in risk policy turned on.\n\nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. \n\n➡️ Open [Recommendation - Protect all users with a sign-in risk policy](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy) in the Entra admin portal.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ✅ Pass | [merill@elapora.com]() | 05/23/2024 08:10:57 | \n| ✅ Pass | [emergency@elapora.com]() | 11/09/2024 08:10:41 | \n| ✅ Pass | [nomailenabled@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [damien.bowden@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [PradeepG@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [JohannaL@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [Sync_DC1_d8475d81663f@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [jackief@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [annaj@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [MiriamG@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [Sandy@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [roif@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [AlexW@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [RheaS@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [LeeG@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [HenriettaM@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [DiegoS@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [merill_merill.net#EXT#@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [jane@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [faizam@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [tegran@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [tyler@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [MeganB@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [tracy@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [unlicensed@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [new@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [LidiaH@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [NestorW@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [IsaiahL@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [yakupm@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [john1@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [PattiF@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [usernonick@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [hamisik@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [joshua@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [JoniS@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [bagula@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [merillf_gmail.com#EXT#@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [wilnar@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [LynneR@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [GradyA@elapora.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [AdeleV@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [nousagelocation@pora.onmicrosoft.com]() | 02/13/2025 08:17:52 | \n| ✅ Pass | [sophia.rodriguez@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [david.kim@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [michael.wong@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [jessica.taylor@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [james.thompson@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [olivia.patel@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [sarah.mitchell@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [emma.johnson@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [ryan.chen@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [daniel.nguyen@elapora.com]() | 03/17/2025 08:14:24 | \n| ✅ Pass | [richard.wilkings@elapora.com]() | 04/03/2025 08:20:42 | \n| ✅ Pass | [simon.burn@elapora.com]() | 04/03/2025 08:20:42 | \n| ✅ Pass | [aitest1@elapora.com]() | 04/03/2025 08:20:42 | \n| ✅ Pass | [aitest2@elapora.com]() | 04/03/2025 08:20:42 | \n| ✅ Pass | [shobalak_outlook.com#EXT#@pora.onmicrosoft.com]() | 04/03/2025 08:20:42 | \n| ❌ Fail | [hamisik@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [usernonick@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [LidiaH@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [bagula@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [sophia.rodriguez@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [merill_merill.net#EXT#@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [MiriamG@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [faizam@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [ann@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [tegran@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [jessica.taylor@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [simon.burn@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [NestorW@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [AlexW@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [merill@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [yakupm@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [aitest1@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [sarah.mitchell@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [joshua@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [DiegoS@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [damien.bowden@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [wilnar@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [nousagelocation@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [PattiF@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [richard.wilkings@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [jackief@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [daniel.nguyen@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [Sandy@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [unlicensed@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [LynneR@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [nomailenabled@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [merillf_gmail.com#EXT#@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [IsaiahL@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [AdeleV@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [james.thompson@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [emma.johnson@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [shobalak_outlook.com#EXT#@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [john1@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [roif@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [JoniS@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [emergency@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [annaj@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [tyler@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [aitest2@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [RheaS@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [jane@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [david.kim@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [GradyA@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [MeganB@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [Sync_DC1_d8475d81663f@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [ryan.chen@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [tracy@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [HenriettaM@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [new@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [LeeG@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [JohannaL@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [olivia.patel@elapora.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [PradeepG@pora.onmicrosoft.com]() | 04/17/2025 08:17:37 | \n| ❌ Fail | [michael.wong@elapora.com]() | 04/17/2025 08:17:37 | \n\n\n#### Remediation actions:\n\n1. To implement this recommendation, you need Microsoft Entra ID Premium P2 licenses. Check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n2. If you’ve invested in Microsoft Entra ID Premium P2 licenses, you can create a Conditional Access policy from scratch or by using a template. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-risk-user).\n\n3. If you’re not using Microsoft Entra ID Premium P2 licenses, we recommend you set this action to “Dismissed” or “Risk accepted”.[]().",
        "TestDescription": "Turning on the sign-in risk policy ensures that suspicious sign-ins are challenged for multifactor authentication (MFA). ",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.8",
      "Title": "Entra Recommendation - Do not expire passwords",
      "Name": "MT.1024.8: Entra Recommendation - Do not expire passwords",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "pwagePolicyNew"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.8: Entra Recommendation - Do not expire passwords",
        "TestResult": "Your current policy is set to never let passwords expire.\n\n➡️ Open [Recommendation - Do not expire passwords](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. In the Microsoft 365 admin center, go to Settings > Org Settings > Security & privacy > Password expiration policy. Then check the box \"Set passwords to never expire (recommended)\". You must be a global admin to edit the password policy. [Go to Password expiration policy in Microsoft 365](https://admin.microsoft.com/#/Settings/SecurityPrivacy/:/Settings/L1/PasswordPolicy).\n\n2. If your organization has an on-premises implementation, we recommend that you set the status for this action to “Completed” or “Resolved through alternate mitigation”.[]().",
        "TestDescription": "Research has found that when periodic password resets are enforced, passwords become less secure. Users tend to pick a weaker password and vary it slightly for each reset. If a user creates a strong password (long, complex and without any pragmatic words present), it should remain as strong in the future as it is today. It is Microsoft's official security position to not expire passwords periodically without a specific reason, and recommends that cloud-only tenants set the password policy to never expire.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1024.13",
      "Title": "Entra Recommendation - Renew expiring service principal credentials",
      "Name": "MT.1024.13: Entra Recommendation - Renew expiring service principal credentials",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Entra",
        "Security",
        "All",
        "Recommendation",
        "MT.1024",
        "servicePrincipalKeyExpiry"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $EntraPremiumRecommendations = @(\n            \"insiderRiskPolicy\",\n            \"userRiskPolicy\",\n            \"signinRiskPolicy\"\n        )\n        $recommendationUrl = \"https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/$id\"\n        $recommendationLinkMd = \"`n`n➡️ Open [Recommendation - $displayName]($recommendationUrl) in the Entra admin portal.\"\n\n        # Hashtable to map recommendation IDs to sequential numbers\n        $recommendationSequence = @{\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_insiderRiskPolicy\" = 1\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_userRiskPolicy\" = 2\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_signinRiskPolicy\" = 3\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_selfServicePasswordReset\" = 4\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_roleOverlap\" = 5\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_oneAdmin\" = 6\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_passwordHashSync\" = 7\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_pwagePolicyNew\" = 8\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_mfaRegistrationV2\" = 9\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_integratedApps\" = 10\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_blockLegacyAuthentication\" = 11\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_adminMFAV2\" = 12\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry\" = 13\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_applicationCredentialExpiry\" = 14\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleAppCreds\" = 15\n            \"0817c655-a853-4d8f-9723-3a333b5b9235_staleApps\" = 16\n        }\n\n        # Get sequential number for current recommendation, default to the id if not found\n        $sequentialNumber = $id\n        if ($recommendationSequence.ContainsKey($id)) {\n            $sequentialNumber = $recommendationSequence[$id]\n        }\n\n        $recommendationName = $id -replace \"0817c655-a853-4d8f-9723-3a333b5b9235_\", \"\"\n        $recommendationName = $recommendationName -replace \"_\", \" \"\n        $recommendationName = $recommendationName -replace \"Policy\", \"policy\"\n\n        $testTitle = \"MT.1024.$($sequentialNumber): Entra Recommendation - $displayName\"\n\n        $EntraIDPlan = Get-MtLicenseInformation -Product \"EntraID\"\n        if ( $EntraIDPlan -ne \"P2\" ) {\n            $EntraPremiumRecommendations | ForEach-Object {\n                if ( $id -match \"$($_)$\" ) {\n                    Add-MtTestResultDetail -TestTitle $testTitle -SkippedBecause NotLicensedEntraIDP2\n                    return $null\n                }\n            }\n        }\n\n        if ( $status -match \"dismissed\" ) {\n            Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -SkippedBecause Custom -SkippedCustomReason \"This recommendation has been **Dismissed** by an administrator.`n`nIf this test is valid for your tenant you can change it's state from **Dismissed** to **Active**. $recommendationLinkMd\"\n            return $null\n        }\n\n        #region Add detailed test description\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\n        }\n        $ActionSteps = $ActionSteps -join \"`n`n\"\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\n            foreach ($resource in $impactedResources) {\n                if ($resource.status -eq 'completedBySystem') {\n                    $resourceResult = \"✅ Pass\"\n                } else {\n                    $resourceResult = \"❌ Fail\"\n                }\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\n            }\n        }\n\n        if( $status -eq 'completedBySystem' ) {\n            $deepLink = $recommendationLinkMd\n        } else {\n            $deepLink = \"`n`nIf the recommendation is not applicable for your tenant, it can be marked as **Dismissed** for Maester to skip it in the future. $recommendationLinkMd\"\n        }\n\n        $ResultMarkdown = $insights + $deepLink + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\n        Add-MtTestResultDetail -TestTitle $testTitle -Description $benefits -Result $ResultMarkdown\n        #endregion\n        # Actual test\n        $status | Should -Be \"completedBySystem\" -Because $benefits\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1024.13: Entra Recommendation - Renew expiring service principal credentials",
        "TestResult": "Your tenant has service principals with credentials that will expire soon.\n\n➡️ Open [Recommendation - Renew expiring service principal credentials](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RecommendationDetails.ReactView/recommendationId/0817c655-a853-4d8f-9723-3a333b5b9235_servicePrincipalKeyExpiry) in the Entra admin portal.\n\n#### Remediation actions:\n\n1. Navigate to the Enterprise applications section and locate the Enterprise application for which the credential needs to be rotated.[]().\n\n2. Navigate to the “Single sign-on” blade.[]().\n\n3. Edit the 'SAML signing certificate' section and follow prompts to add a new certificate.[]().\n\n4. After adding the certificate, change its properties to make certificate active. This will make the previous certificate inactive.[]().\n\n5. Once the certificate is successfully added and activated, validate that your service is working with the new credential, and remove the old credential.[]().\n\n6. If the service principal does not show any credentials after navigating to the enterprise apps blade, we recommend checking the 'passwordCredentials' and 'keyCredentials' property of the service principal object using PowerShell or Microsoft Graph service principal API and use the Microsoft Graph API to rotate credentials.[]().",
        "TestDescription": "Renewing the service principal credential(s) before expiration ensures the application continues to function and reduces the possibility of downtime due to an expired credential. ",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1025",
      "Title": "No external user with permanent role assignment on Control Plane.",
      "Name": "MT.1025: No external user with permanent role assignment on Control Plane.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1025",
      "Tag": [
        "Maester",
        "Privileged",
        "Security",
        "All",
        "MT.1025"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $Check = Test-MtPrivPermanentDirectoryRole -FilteredAccessLevel \"ControlPlane\" -FilterPrincipal \"ExternalUser\"\n        $Check | Should -Be $false -Because \"External user shouldn't have high-privileged roles\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $false, because External user shouldn't have high-privileged roles, but got $true.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $false, because External user shouldn't have high-privileged roles, but got $true.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "8",
            "LineText": "        $Check | Should -Be $false -Because \"External user shouldn't have high-privileged roles\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "MT.1025: No external user with permanent role assignment on Control Plane. See https://maester.dev/docs/tests/MT.1025",
        "TestResult": "These directory role assignments for ExternalUser exists:\n\n  - [Bob Leaf](https://portal.azure.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/653c7fdd-1b41-4229-992a-69cc35aad4f7) with Global Administrator on scope directory (tenant-wide)\n",
        "TestDescription": "\nTake attention on B2B collaboration user with Entra ID directory role assignments on ControlPlane.\nVerify the affected external users, the user source (e.g., MSSP/partner or managing tenant) and if the privileged accounts pass your requirements for Conditional Access, Lifecycle Workflow and Identity Protection.\nLearn more about the best practices for privileges users:\n  - [Securing privileged access for hybrid and cloud deployments in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/security-planning#ensure-separate-user-accounts-and-mail-forwarding-for-global-administrator-accounts)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1026",
      "Title": "No hybrid user with permanent role assignment on Control Plane.",
      "Name": "MT.1026: No hybrid user with permanent role assignment on Control Plane.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1026",
      "Tag": [
        "Maester",
        "Privileged",
        "Security",
        "All",
        "MT.1026"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $Check = Test-MtPrivPermanentDirectoryRole -FilteredAccessLevel \"ControlPlane\" -FilterPrincipal \"HybridUser\"\n        $Check | Should -Be $false -Because \"Hybrid user with access to high-privileged directory roles which should be avoided\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1026: No hybrid user with permanent role assignment on Control Plane. See https://maester.dev/docs/tests/MT.1026",
        "TestResult": "Well done!",
        "TestDescription": "\nIt's recommended to use cloud-only accounts for privileges with ControlPlane privileges to avoid attack paths from on-premises environment.\nLearn more about the best practices for privileges users:\n  - [Securing privileged access for hybrid and cloud deployments in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/security-planning#ensure-separate-user-accounts-and-mail-forwarding-for-global-administrator-accounts)\n  - [Protecting Microsoft 365 from on-premises attacks](https://learn.microsoft.com/en-us/entra/architecture/protect-m365-from-on-premises-attacks#isolate-privileged-identities)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1027",
      "Title": "No Service Principal with Client Secret and permanent role assignment on Control Plane.",
      "Name": "MT.1027: No Service Principal with Client Secret and permanent role assignment on Control Plane.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1027",
      "Tag": [
        "Maester",
        "Privileged",
        "Security",
        "All",
        "MT.1027"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $Check = Test-MtPrivPermanentDirectoryRole -FilteredAccessLevel \"ControlPlane\" -FilterPrincipal \"ServicePrincipalClientSecret\"\n        $Check | Should -Be $false -Because \"Service Principal with assignments to high-privileged roles should not using Client Secret\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $false, because Service Principal with assignments to high-privileged roles should not using Client Secret, but got $true.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $false, because Service Principal with assignments to high-privileged roles should not using Client Secret, but got $true.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "16",
            "LineText": "        $Check | Should -Be $false -Because \"Service Principal with assignments to high-privileged roles should not using Client Secret\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 16\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1027: No Service Principal with Client Secret and permanent role assignment on Control Plane. See https://maester.dev/docs/tests/MT.1027",
        "TestResult": "These directory role assignments for ServicePrincipalClientSecret exists:\n\n  - [AppRolePimAutomationTestParentAcc19Feb22](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/d22f071d-e8d3-41fc-a516-b29753cdd1f6) with Application Administrator on scope /37af5ea5-a0ce-4562-8e82-077e05f0dc48\n",
        "TestDescription": "\nReview your Service Principals with Client Secrets and ControlPlane privileges.\nIt's recommended to use certificates for Service Principals. Review if you can replace client secrets by certificates or use managed identities instead of a Service Principal.\nLearn more about the best practices for issuing certificates for Service Principals:\n  - [Securing service principals in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/architecture/service-accounts-principal#service-principal-authentication)\n  - [Best practices for all isolation architectures - Service Principal Credentials](https://learn.microsoft.com/en-us/entra/architecture/secure-best-practices#service-principals-credentials)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1028",
      "Title": "No user with mailbox and permanent role assignment on Control Plane.",
      "Name": "MT.1028: No user with mailbox and permanent role assignment on Control Plane.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1028",
      "Tag": [
        "Maester",
        "Privileged",
        "Security",
        "All",
        "MT.1028"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $Check = Test-MtPrivPermanentDirectoryRole -FilteredAccessLevel \"ControlPlane\" -FilterPrincipal \"UserMailbox\"\n        $Check | Should -Be $false -Because \"Privileged user with assignment to high-privileged roles should not be mail-enabled which could be a risk for phishing attacks\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $false, because Privileged user with assignment to high-privileged roles should not be mail-enabled which could be a risk for phishing attacks, but got $true.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $false, because Privileged user with assignment to high-privileged roles should not be mail-enabled which could be a risk for phishing attacks, but got $true.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "20",
            "LineText": "        $Check | Should -Be $false -Because \"Privileged user with assignment to high-privileged roles should not be mail-enabled which could be a risk for phishing attacks\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 20\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1028: No user with mailbox and permanent role assignment on Control Plane. See https://maester.dev/docs/tests/MT.1028",
        "TestResult": "These directory role assignments for UserMailbox exists:\n\n  - [Merill Fernando](https://portal.azure.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/513f3db2-044c-41be-af14-431bf88a2b3e) with Attribute Assignment Administrator on scope directory (tenant-wide)\n  - [Merill Fernando](https://portal.azure.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/513f3db2-044c-41be-af14-431bf88a2b3e) with Global Administrator on scope directory (tenant-wide)\n  - [Merill Fernando](https://portal.azure.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/513f3db2-044c-41be-af14-431bf88a2b3e) with Attribute Definition Administrator on scope directory (tenant-wide)\n  - [Joshua Fernando](https://portal.azure.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/babe04c9-8340-4329-a727-a8cee0cd2b1a) with Global Administrator on scope directory (tenant-wide)\n  - [Grady Archie](https://portal.azure.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/e4bc6f4a-124f-469b-8951-3d5c34fb9741) with User Administrator on scope /administrativeUnits/d2a86fca-7fe6-4842-b42f-9b53ad2283ee\n",
        "TestDescription": "\nTake attention on mail-enabled administrative accounts with ControlPlane privileges.\nIt's recommended to use mail forwarding to regular work account which allows to avoid direct mail access and phishing attacks on privileged user.\nLearn more about the best practices for securing privileged user accounts:\n  - [Securing privileged access for hybrid and cloud deployments in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/security-planning#ensure-separate-user-accounts-and-mail-forwarding-for-global-administrator-accounts)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1029",
      "Title": "Stale accounts are not assigned to privileged roles.",
      "Name": "MT.1029: Stale accounts are not assigned to privileged roles.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1029",
      "Tag": [
        "Privileged",
        "Security",
        "All",
        "PIM",
        "MT.1029"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        if ( ( Get-MtLicenseInformation EntraID ) -ne \"P2\" ) {\n            Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP2\n        } else {\n            $Check = Test-MtPimAlertsExists -AlertId \"StaleSignInAlert\"\n            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "MT.1029: Stale accounts are not assigned to privileged roles. See https://maester.dev/docs/tests/MT.1029",
        "TestResult": "All privileged role assignments are managed by PIM. Well done!",
        "TestDescription": "\n\n**Security Impact**\n\n\nAccounts in a privileged role have not signed in recently. These accounts might be service or shared accounts that aren't being maintained and are vulnerable to attackers.\n\n**Mitigation steps**\n\n\nReview the accounts in the list. If they no longer need access, remove them from their privileged roles.\n\n**How to prevent**\n\n\nRegularly review accounts with privileged roles using [access reviews](https://docs.microsoft.com/en-us/azure/active-directory/governance/access-reviews-overview) and remove role assignments which are no longer needed.\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1030",
      "Title": "Eligible role assignments on Control Plane are in use by administrators.",
      "Name": "MT.1030: Eligible role assignments on Control Plane are in use by administrators.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1030",
      "Tag": [
        "Privileged",
        "Security",
        "All",
        "PIM",
        "MT.1030"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        if ( ( Get-MtLicenseInformation EntraID ) -ne \"P2\" ) {\n            Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP2\n        } else {\n            $Check = Test-MtPimAlertsExists -AlertId \"RedundantAssignmentAlert\" -FilteredAccessLevel \"ControlPlane\"\n            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Users that have been assigned privileged roles they don't need increases the chance of an attack. It is also easier for attackers to remain unnoticed in accounts that are not actively being used., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Users that have been assigned privileged roles they don't need increases the chance of an attack. It is also easier for attackers to remain unnoticed in accounts that are not actively being used., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "38",
            "LineText": "            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 38\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1030: Eligible role assignments on Control Plane are in use by administrators. See https://maester.dev/docs/tests/MT.1030",
        "TestResult": "7 user(s) haven't activated their privileged roles in the past 30 days\n\n\n  -  Bagul Atayewa with Global Administrator by AssigneeId 5655cf54-34bc-4f36-bb74-44da35547975\n   -  Isaiah Langer with Application Administrator by AssigneeId 2a054082-8f05-4e05-8fce-4e35c3bb40cc\n   -  Adele Vance with Application Administrator by AssigneeId e436ca15-3a39-4dcc-819e-7dbb246cd46b\n   -  Megan Bowen with Application Administrator by AssigneeId 96d29f01-873c-46a3-b542-f7ee192cc675\n   -  Anna Jorayew with Global Reader by AssigneeId 58d9ed99-93ca-4674-8c5f-ec770f5ba17d\n\nGet more details from the PIM alert [Eligible administrators aren't activating their privileged role](https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/AlertDetail/providerId/aadroles/alertId/RedundantAssignmentAlert/resourceId/0817c655-a853-4d8f-9723-3a333b5b9235) in the Azure Portal.\n",
        "TestDescription": "\n\n**Security Impact**\n\n\nUsers that have been assigned privileged roles they don't need increases the chance of an attack. It is also easier for attackers to remain unnoticed in accounts that are not actively being used.\n\n**Mitigation steps**\n\n\nReview the users in the list and remove them from privileged roles they do not need.\n\n**How to prevent**\n\n\n·Assign privileged roles to users that have a business justification.\r\n·Schedule regular access reviews to verify that users still need their access.\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1031",
      "Title": "Privileged role on Control Plane are managed by PIM only.",
      "Name": "MT.1031: Privileged role on Control Plane are managed by PIM only.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1031",
      "Tag": [
        "Privileged",
        "Security",
        "All",
        "PIM",
        "MT.1031"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        if ( ( Get-MtLicenseInformation EntraID ) -ne \"P2\" ) {\n            Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP2\n        } else {\n            $Check = Test-MtPimAlertsExists -AlertId \"RolesAssignedOutsidePimAlert\" -FilteredAccessLevel \"ControlPlane\"\n            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Privileged role assignments made outside of Privileged Identity Management are not properly monitored and may indicate an active attack., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Privileged role assignments made outside of Privileged Identity Management are not properly monitored and may indicate an active attack., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "46",
            "LineText": "            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 46\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1031: Privileged role on Control Plane are managed by PIM only. See https://maester.dev/docs/tests/MT.1031",
        "TestResult": "1 privileged assignment(s) were made outside of Microsoft Entra Privileged Identity Management (PIM)\n\n\n  -  Ann Quinzon with Global Administrator by AssigneeId 2072badc-3cf0-4e84-b4c2-f9c065c46165\n\nGet more details from the PIM alert [Roles are being assigned outside of Privileged Identity Management](https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/AlertDetail/providerId/aadroles/alertId/RolesAssignedOutsidePimAlert/resourceId/0817c655-a853-4d8f-9723-3a333b5b9235) in the Azure Portal.\n",
        "TestDescription": "\n\n**Security Impact**\n\n\nPrivileged role assignments made outside of Privileged Identity Management are not properly monitored and may indicate an active attack.\n\n**Mitigation steps**\n\n\nReview the users in the list and remove them from privileged roles assigned outside of PIM.\n\n**How to prevent**\n\n\nInvestigate where users are being assigned privileged roles outside of Privileged Identity Management and prohibit future assignments from there.\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1032",
      "Title": "Limited number of Global Admins are assigned.",
      "Name": "MT.1032: Limited number of Global Admins are assigned.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1032",
      "Tag": [
        "Privileged",
        "Security",
        "All",
        "PIM",
        "MT.1032"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        if ( ( Get-MtLicenseInformation EntraID ) -ne \"P2\" ) {\n            Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP2\n        } else {\n            $Check = Test-MtPimAlertsExists -AlertId \"TooManyGlobalAdminsAssignedToTenantAlert\"\n            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Global administrator is the highest privileged role. If a Global Administrator is compromised, the attacker gains access to all of their permissions, which puts your whole system at risk., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Global administrator is the highest privileged role. If a Global Administrator is compromised, the attacker gains access to all of their permissions, which puts your whole system at risk., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "54",
            "LineText": "            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 54\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1032: Limited number of Global Admins are assigned. See https://maester.dev/docs/tests/MT.1032",
        "TestResult": "The percentage of global administrators is high, relative to other privileged roles. It is recommended to use least privileged roles, with just enough privileges to perform the required tasks.\n\n\n  -  Damien Bowden (damien.bowden@elapora.com)\n   -  Tyler Chan (tyler@elapora.com)\n   -  Bagul Atayewa (bagula@elapora.com)\n   -  Emergency Access (emergency@elapora.com)\n   -  Joshua Fernando (joshua@elapora.com)\n   -  Ann Quinzon (ann@elapora.com)\n   -  Bob Leaf (merillf_gmail.com#EXT#@pora.onmicrosoft.com)\n\nGet more details from the PIM alert [There are too many global administrators](https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/AlertDetail/providerId/aadroles/alertId/TooManyGlobalAdminsAssignedToTenantAlert/resourceId/0817c655-a853-4d8f-9723-3a333b5b9235) in the Azure Portal.\n",
        "TestDescription": "\n\n**Security Impact**\n\n\nGlobal administrator is the highest privileged role. If a Global Administrator is compromised, the attacker gains access to all of their permissions, which puts your whole system at risk.\n\n**Mitigation steps**\n\n\n·Review the users in the list and remove any that do not absolutely need the Global Administrator role.\r\n·Assign lower privileged roles to these users instead.\n\n**How to prevent**\n\n\nAssign users the least privileged role they need.\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1035",
      "Title": "All security groups assigned to Conditional Access Policies should be protected by RMAU.",
      "Name": "MT.1035: All security groups assigned to Conditional Access Policies should be protected by RMAU.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1035",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1035"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaGroupsRestricted | Should -Be $true -Because \"there are one or more policies without protection of included or excluded groups\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1035: All security groups assigned to Conditional Access Policies should be protected by RMAU. See https://maester.dev/docs/tests/MT.1035",
        "TestResult": "Well done! All security groups with assignment in Conditional Access are protected.",
        "TestDescription": "Security Groups will be used to exclude and include users from Conditional Access Policies. Modify group membership outside of Conditional Access Administrator or other privileged roles can lead to bypassing Conditional Access Policies.\n\nTo prevent this, you can protect these groups by using Restricted Management Administrative Units or Role Assignable Groups. Role Assignable Group should be used in combination of assignments to Entra ID roles. Restricted Management Administrative Units should be used to protect groups by restricting management to specific users or groups. This test checks if all groups used in Conditional Access Policies are protected.\n\nSee [Restricted management administrative units in Microsoft Entra ID - Microsoft Entra ID | Microsoft Learn](https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/admin-units-restricted-management)",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1036",
      "Title": "All excluded objects should have a fallback include in another policy.",
      "Name": "MT.1036: All excluded objects should have a fallback include in another policy.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1036",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1036",
        "Warning"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaGap | Should -Be $true -Because \"there are one or more objects excluded without a corresponding fallback in another policy.\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there are one or more objects excluded without a corresponding fallback in another policy., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there are one or more objects excluded without a corresponding fallback in another policy., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "63",
            "LineText": "        Test-MtCaGap | Should -Be $true -Because \"there are one or more objects excluded without a corresponding fallback in another policy.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 63\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "MT.1036: All excluded objects should have a fallback include in another policy. See https://maester.dev/docs/tests/MT.1036",
        "TestResult": "The following user objects did not have a fallback:\n\n\n    User: On-Premises Directory Synchronization Service Account\n        > Excluded in policy 'MFA - All users'\n\n    User: Emergency Access\n        > Excluded in policy 'MFA - All users'\n        > Excluded in policy 'Block legacy authentication'\n        > Excluded in policy 'Require password change for high-risk users'\n        > Excluded in policy 'MFA CA Policy'\n        > Excluded in policy 'Device compliance #1'\n        > Excluded in policy 'Guest-Meferna-Woodgrove-PhishingResistantAuthStrength'\n        > Excluded in policy 'Block Device Code'\n        > Excluded in policy 'Unmanaged Device - Admin Portal Block'\n        > Excluded in policy 'CISA SCuBA.MS.AAD.2.3: Users detected as high risk SHALL be blocked.'\n        > Excluded in policy 'AzMfa Test (Require MFA for Az Portal)'\n\n    User: Merill Fernando\n        > Excluded in policy 'MFA - All users'\n        > Excluded in policy 'Block legacy authentication'\n        > Excluded in policy 'Require password change for high-risk users'\n        > Excluded in policy 'Block Device Code'\n        > Excluded in policy 'CISA SCuBA.MS.AAD.2.3: Users detected as high risk SHALL be blocked.'\n\n    User: Shonali Balakrishna\n        > Excluded in policy 'MFA - All users'\nThe following location objects did not have a fallback:\n\n\n    Location: Boston Head Office\n        > Excluded in policy 'Device compliance #1'\n",
        "TestDescription": "All excluded objects should have a fallback include in another policy",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1037",
      "Title": "Only users with Presenter role are allowed to present in Teams meetings",
      "Name": "MT.1037: Only users with Presenter role are allowed to present in Teams meetings",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Teams",
        "MeetingPolicy",
        "All",
        "MT.1037"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        # Secure Score Name: Configure which users are allowed to present in Teams meetings\n\n        $result = Test-MtTeamsRestrictParticipantGiveRequestControl -TeamsMeetingPolicy $TeamsMeetingPolicy\n        $result | Should -Be $true -Because \"Standard attendees in a Teams meeting should not be allowed to present in Teams meetings unless they are assigned the Presenter role.\"\n\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Teams",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1037: Only users with Presenter role are allowed to present in Teams meetings",
        "TestResult": "\n\nWell done. Only users in the **Presenter** role are configured to share content during Teams meetings.\n\n",
        "TestDescription": "This test checks the Org-wide default meeting policy is configured to only allow users in the **Presenter** role to request control and share content during meetings.\n\nRestricting who can present limits meeting disruptions and reduces the risk of unwanted or inappropriate content being shared.\n\n#### Remediation action:\n\nTo prevent standard attendees from sharing content during Teams meetings:\n\n1. Click here to open [**Org-wide default settings > Meetings**](https://admin.teams.microsoft.com/one-policy/settings/meeting)\n   * Or navigate to [Teams Admin Center](https://admin.teams.microsoft.com).\n   * Click **Settings & policies > Org-wide default settings > Meetings**.\n1. Scroll to the **Content sharing** section.\n1. Set **Participants can give or request control** to **Off**.\n1. Click Save.\n\n#### Related links\n\n* [Manage meeting policies for content sharing](https://learn.microsoft.com/en-us/microsoftteams/meeting-policies-content-sharing)\n* [7 tips for safe online meetings and collaboration with Microsoft Teams - Tip 3: Determine who can present content or share their screen in your Teams meeting](https://techcommunity.microsoft.com/blog/microsoftteamsblog/7-tips-for-safe-online-meetings-and-collaboration-with-microsoft-teams/2072303)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1038",
      "Title": "Conditional Access policies should not include or exclude deleted groups.",
      "Name": "MT.1038: Conditional Access policies should not include or exclude deleted groups.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1038",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1038",
        "Warning"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaReferencedGroupsExist | Should -Be $true -Because \"there are one or more policies relying on deleted groups.\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "Response": "StatusCode: 404, ReasonPhrase: 'Not Found', Version: 2.0, Content: System.Net.Http.DecompressionHandler+GZipDecompressedContent, Headers:\n{\n  Cache-Control: no-cache\n  Vary: Accept-Encoding\n  Strict-Transport-Security: max-age=31536000\n  request-id: 380c8f70-cfe9-4efd-9488-9fff8f96ec6a\n  client-request-id: 359b5211-f5a1-4bcd-8532-b72a9683225f\n  x-ms-ags-diagnostic: {\"ServerInfo\":{\"DataCenter\":\"Australia East\",\"Slice\":\"E\",\"Ring\":\"5\",\"ScaleUnit\":\"002\",\"RoleInstance\":\"SY2PEPF00003F75\"}}\n  Link: <https://developer.microsoft-tst.com/en-us/graph/changes?$filterby=beta,PrivatePreview:GroupOriginInfo&from=2024-04-01&to=2024-05-01>;rel=\"deprecation\";type=\"text/html\"\n  deprecation: Mon, 01 Apr 2024 23:59:59 GMT\n  sunset: Wed, 01 Apr 2026 23:59:59 GMT\n  x-ms-resource-unit: 1\n  Date: Tue, 29 Apr 2025 22:32:59 GMT\n  Content-Type: application/json\n}",
            "HttpRequestError": 0,
            "StatusCode": null,
            "TargetSite": "Void ThrowTerminatingError(System.Management.Automation.ErrorRecord)",
            "Message": "Response status code does not indicate success: NotFound (Not Found).",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233088,
            "StackTrace": "   at System.Management.Automation.MshCommandRuntime.ThrowTerminatingError(ErrorRecord errorRecord)"
          },
          "TargetObject": {
            "Version": "2.0",
            "VersionPolicy": 0,
            "Content": null,
            "Method": "GET",
            "RequestUri": "https://graph.microsoft.com:443/beta/groups/60929ea8-1d05-4f5c-801b-ce09a1f1566b",
            "Headers": "[ConsistencyLevel, System.String[]] [User-Agent, System.String[]] [FeatureFlag, System.String[]] [Cache-Control, System.String[]] [Authorization, System.String[]] [SdkVersion, System.String[]] [client-request-id, System.String[]] [Accept-Encoding, System.String[]]",
            "Properties": "",
            "Options": ""
          },
          "CategoryInfo": {
            "Category": 7,
            "Activity": "Invoke-MgGraphRequest",
            "Reason": "HttpResponseException",
            "TargetName": "Method: GET, RequestUri: 'https://graph.microsoft.com/beta/groups/60929ea8-1d05-4f5c-801b-ce09a1f1566b', Version: 2.0, Content: <null>, Headers:\n{\n  ConsistencyLevel: eventual\n  User-Agent: Mozilla/5.0\n  User-Agent: (Macintosh; Darwin 24.4.0 Darwin Kernel Version 24.4.0: Fri Apr 11 18:33:47 PDT 2025; root:xnu-11417.101.15~117/RELEASE_ARM64_T6030; en-AU)\n  User-Agent: PowerShell/7.5.0\n  User-Agent: Invoke-MgGraphRequest\n  FeatureFlag: 00000003\n  Cache-Control: no-store, no-cache\n  Authorization: \n  SdkVersion: graph-powershell-beta/2.26.1\n  client-request-id: 359b5211-f5a1-4bcd-8532-b72a9683225f\n  Accept-Encoding: gzip\n  Accept-Encoding: deflate\n  Accept-Encoding: br\n}",
            "TargetType": "HttpRequestMessage"
          },
          "FullyQualifiedErrorId": "InvokeGraphHttpResponseException,Microsoft.Graph.PowerShell.Authentication.Cmdlets.InvokeMgGraphRequest",
          "ErrorDetails": {
            "Message": "GET https://graph.microsoft.com/beta/groups/60929ea8-1d05-4f5c-801b-ce09a1f1566b\r\nHTTP/2.0 404 Not Found\r\nCache-Control: no-cache\r\nVary: Accept-Encoding\r\nStrict-Transport-Security: max-age=31536000\r\nrequest-id: 380c8f70-cfe9-4efd-9488-9fff8f96ec6a\r\nclient-request-id: 359b5211-f5a1-4bcd-8532-b72a9683225f\r\nx-ms-ags-diagnostic: {\"ServerInfo\":{\"DataCenter\":\"Australia East\",\"Slice\":\"E\",\"Ring\":\"5\",\"ScaleUnit\":\"002\",\"RoleInstance\":\"SY2PEPF00003F75\"}}\r\nLink: <https://developer.microsoft-tst.com/en-us/graph/changes?$filterby=beta,PrivatePreview:GroupOriginInfo&from=2024-04-01&to=2024-05-01>;rel=\"deprecation\";type=\"text/html\"\r\ndeprecation: Mon, 01 Apr 2024 23:59:59 GMT\r\nsunset: Wed, 01 Apr 2026 23:59:59 GMT\r\nx-ms-resource-unit: 1\r\nDate: Tue, 29 Apr 2025 22:32:59 GMT\r\nContent-Type: application/json\r\n\r\n{\"error\":{\"code\":\"Request_ResourceNotFound\",\"message\":\"Resource '60929ea8-1d05-4f5c-801b-ce09a1f1566b' does not exist or one of its queried reference-property objects are not present.\",\"innerError\":{\"date\":\"2025-04-29T22:32:59\",\"request-id\":\"380c8f70-cfe9-4efd-9488-9fff8f96ec6a\",\"client-request-id\":\"359b5211-f5a1-4bcd-8532-b72a9683225f\"}}}",
            "RecommendedAction": ""
          },
          "InvocationInfo": {
            "MyCommand": "Invoke-MgGraphRequest",
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 39,
            "OffsetInLine": 24,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/GitHub/maester/powershell/internal/Invoke-MtGraphRequestCache.ps1",
            "Line": "            $results = Invoke-MgGraphRequest -Method $Method -Uri $Uri -Headers $Headers -OutputType $OutputType # -Body $Body # Cannot use Body with GET in PS 5.1\n",
            "Statement": "Invoke-MgGraphRequest -Method $Method -Uri $Uri -Headers $Headers -OutputType $OutputType",
            "PositionMessage": "At /Users/merill/GitHub/maester/powershell/internal/Invoke-MtGraphRequestCache.ps1:39 char:24\n+ …  $results = Invoke-MgGraphRequest -Method $Method -Uri $Uri -Headers  …\n+               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/GitHub/maester/powershell/internal",
            "PSCommandPath": "/Users/merill/GitHub/maester/powershell/internal/Invoke-MtGraphRequestCache.ps1",
            "InvocationName": "Invoke-MgGraphRequest",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-MtGraphRequestCache, /Users/merill/GitHub/maester/powershell/internal/Invoke-MtGraphRequestCache.ps1: line 39\nat Invoke-MtGraphRequest<Process>, /Users/merill/GitHub/maester/powershell/public/Invoke-MtGraphRequest.ps1: line 154\nat <ScriptBlock>, /Users/merill/GitHub/maester/powershell/public/Test-MtCaReferencedGroupsExist.ps1: line 36\nat Test-MtCaReferencedGroupsExist, /Users/merill/GitHub/maester/powershell/public/Test-MtCaReferencedGroupsExist.ps1: line 33\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 66\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1039",
      "Title": "Ensure MailTips are enabled for end users",
      "Name": "MT.1039: Ensure MailTips are enabled for end users",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Exchange",
        "SecureScore",
        "MT.1039",
        "MailTipsExternalRecipientsTipsEnabled"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        #Get-OrganizationConfig | fl MailTipsAllTipsEnabled, MailTipsExternalRecipientsTipsEnabled\n        #Set-OrganizationConfig -MailTipsAllTipsEnabled $true -MailTipsExternalRecipientsTipsEnabled $true -MailTipsGroupMetricsEnabled $true -MailTipsLargeAudienceThreshold '25'\n\n        $result = $OrganizationConfig.MailTipsExternalRecipientsTipsEnabled\n\n        if ($result -eq $true) {\n            $testResultMarkdown = \"Well done. MailTipsExternalRecipientsTipsEnabled is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"MailTipsExternalRecipientsTipsEnabled should be True and is $($result) in [SecureScore]($portalLink_SecureScore)`n`n\"\n        }\n        $testDetailsMarkdown = \"MailTips assist end users with identifying strange patterns to emails they send.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        # Actual test\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"MailTipsExternalRecipientsTipsEnabled should be True\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Exchange/Test-ExchangeSetting.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Exchange",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1040",
      "Title": "Ensure additional storage providers are restricted in Outlook on the web",
      "Name": "MT.1040: Ensure additional storage providers are restricted in Outlook on the web",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Exchange",
        "SecureScore",
        "MT.1040",
        "AdditionalStorageProvidersAvailable"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        # > CIS 1.3.7 (L2) Ensure 'third-party storage services' are restricted in 'Microsoft 365 on the web'\n\n        #Get-OwaMailboxPolicy | fl Name, AdditionalStorageProvidersAvailable, ThirdPartyFileProvidersEnabled, ConditionalAccessPolicy, ChangePasswordEnabled, *Offline*, ReportJunkEmailEnabled\n        #Set-OwaMailboxPolicy -Identity OwaMailboxPolicy-Default -AdditionalStorageProvidersAvailable $false\n\n        $result = $OwaMailboxPolicyDefault.AdditionalStorageProvidersAvailable\n\n        if ($result -eq $false) {\n            $testResultMarkdown = \"Well done. AdditionalStorageProvidersAvailable is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"AdditionalStorageProvidersAvailable should be False and is $($result) in [SecureScore]($portalLink_SecureScore)`n`n\"\n        }\n        $testDetailsMarkdown = \"This setting allows users to open certain external files while working in Outlook on the web. If allowed, keep in mind that Microsoft doesn't control the use terms or privacy policies of those third-party services. Ensure AdditionalStorageProvidersAvailable is restricted.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        # Actual test\n        if ($null -ne $result) {\n            $result | Should -Be $false -Because \"AdditionalStorageProvidersAvailable should be False\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Exchange/Test-ExchangeSetting.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Exchange",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1041",
      "Title": "Ensure users installing Outlook add-ins is not allowed",
      "Name": "MT.1041: Ensure users installing Outlook add-ins is not allowed",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Exchange",
        "SecureScore",
        "MT.1041",
        "MyCustomApps",
        "MyMarketplaceApps",
        "MyReadWriteMailboxApps"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        # > CIS 1.3.4 (L1) Ensure 'User owned apps and services' is restricted\n\n        #Get-ManagementRoleAssignment -Role \"My Custom Apps\" -RoleAssignee $defaultrole | ft -AutoSize\n        #Get-ManagementRoleAssignment -Role \"My Marketplace Apps\" -RoleAssignee $defaultrole | ft -AutoSize\n        #Get-ManagementRoleAssignment -Role \"My ReadWriteMailbox Apps\" -RoleAssignee $defaultrole | ft -AutoSize\n\n        $result = [bool](Get-ManagementRoleAssignment -Role \"My Custom Apps\" -RoleAssignee $RoleAssignmentPolicyDefault) -or `\n            [bool](Get-ManagementRoleAssignment -Role \"My Marketplace Apps\" -RoleAssignee $RoleAssignmentPolicyDefault) -or `\n            [bool](Get-ManagementRoleAssignment -Role \"My ReadWriteMailbox Apps\" -RoleAssignee $RoleAssignmentPolicyDefault)\n\n        if ($result -eq $false) {\n            $testResultMarkdown = \"Well done. Apps in 'Default Role Assignment Policy' is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"Apps in 'Default Role Assignment Policy' should be False and is $($result) in [SecureScore]($portalLink_SecureScore)`n`n\"\n        }\n        $testDetailsMarkdown = \"Specify the administrators and users who can install and manage add-ins for Outlook in Exchange Online By default, users can install add-ins in their Microsoft Outlook Desktop client, allowing data access within the client application. Rationale: Attackers exploit vulnerable or custom add-ins to access user data. Disabling user installed add-ins in Microsoft Outlook reduces this threat surface.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        # Actual test\n        if ($null -ne $result) {\n            $result | Should -Be $false -Because \"Apps in 'Default Role Assignment Policy' should be False\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Exchange/Test-ExchangeSetting.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Exchange",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1042",
      "Title": "Restrict dial-in users from bypassing a meeting lobby",
      "Name": "MT.1042: Restrict dial-in users from bypassing a meeting lobby ",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Teams",
        "MeetingPolicy",
        "All",
        "MT.1042"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $TeamsMeetingPolicyGlobal = $TeamsMeetingPolicy | Where-Object { $_.Identity -eq \"Global\" }\n        $portalLink_MeetingPolicy = \"https://admin.teams.microsoft.com/policies/meetings\"\n\n        if (!(Test-MtConnection Teams)) {\n            Add-MtTestResultDetail -SkippedBecause NotConnectedTeams\n            return $null\n        }\n\n        $result = $TeamsMeetingPolicyGlobal.AllowPSTNUsersToBypassLobby\n\n        if ($result -eq $false) {\n            $testResultMarkdown = \"Well done. AllowPSTNUsersToBypassLobby is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"AllowPSTNUsersToBypassLobby in [Meeting policies]($portalLink_MeetingPolicy) should be False and is $($result) `n`n\"\n        }\n        $testDetailsMarkdown = \"Dial-in users aren’t authenticated though the Teams app. Increase the security of your meetings by preventing these unknown users from bypassing the lobby and immediately joining the meeting.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        $result | Should -Be $false -Because \"AllowPSTNUsersToBypassLobby should be False\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Teams",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1042: Restrict dial-in users from bypassing a meeting lobby ",
        "TestResult": "Well done. AllowPSTNUsersToBypassLobby is False\n\n",
        "TestDescription": "Dial-in users aren’t authenticated though the Teams app. Increase the security of your meetings by preventing these unknown users from bypassing the lobby and immediately joining the meeting.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1043",
      "Title": "Ensure Spam confidence level (SCL) is configured in mail transport rules with specific domains",
      "Name": "MT.1043: Ensure Spam confidence level (SCL) is configured in mail transport rules with specific domains",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Exchange",
        "SecureScore",
        "MT.1043",
        "SetScl",
        "TransportRule"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $portalLink_TransportRules = \"https://admin.exchange.microsoft.com/#/transportrules\"\n\n        $RuleWithSCL = $ExchangeTransportRule | Where-Object { $_.SetScl -match \"-1\" }\n        $result = ($RuleWithSCL).Count -gt 0\n\n        if ($result -eq $false) {\n            $testResultMarkdown = \"Well done. SetScl is not in use`n`n\"\n        } else {\n            $testResultMarkdown = \"SetScl is used $(($RuleWithSCL).Count) times in [Rules]($portalLink_TransportRules)`n`n\"\n        }\n        $testDetailsMarkdown = \"You should set Spam confidence level (SCL) in your Exchange Online mail transport rules with specific domains. Allow-listing domains in transport rules bypasses regular malware and phishing scanning, which can enable an attacker to launch attacks against your users from a safe haven domain. Note: In order to get a score for this security control, all the active transport rule that applies to specific domains must have a Spam Confidence Level (SCL) of 0 or higher.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        # Actual test\n        if ($null -ne $result) {\n            $result | Should -Be $false -Because \"SetScl should be 0 (False)\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Exchange/Test-ExchangeSetting.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Exchange",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1044",
      "Title": "Ensure modern authentication for Exchange Online is enabled",
      "Name": "MT.1044: Ensure modern authentication for Exchange Online is enabled",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Exchange",
        "SecureScore",
        "MT.1044",
        "OAuth2ClientProfileEnabled"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $result = $OrganizationConfig.OAuth2ClientProfileEnabled\n\n        if ($result -eq $true) {\n            $testResultMarkdown = \"Well done. OAuth2ClientProfileEnabled is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"OAuth2ClientProfileEnabled should be True and is $($result) in [SecureScore]($portalLink_SecureScore)`n`n\"\n        }\n        $testDetailsMarkdown = \"Modern authentication in Microsoft 365 enables authentication features like multifactor authentication (MFA) using smart cards, certificate-based authentication (CBA), and third-party SAML identity providers. When you enable modern authentication in Exchange Online, Outlook 2016 and Outlook 2013 use modern authentication to log in to Microsoft 365 mailboxes. When you disable modern authentication in Exchange Online, Outlook 2016 and Outlook 2013 use basic authentication to log in to Microsoft 365 mailboxes. When users initially configure certain email clients, like Outlook 2013 and Outlook 2016, they may be required to authenticate using enhanced authentication mechanisms, such as multifactor authentication. Other Outlook clients that are available in Microsoft 365 (for example, Outlook Mobile and Outlook for Mac 2016) always use modern uthentication to log in to Microsoft 365 mailboxes\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        # Actual test\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"OAuth2ClientProfileEnabled should be True\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Exchange/Test-ExchangeSetting.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Exchange",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1045",
      "Title": "Only invited users should be automatically admitted to Teams meetings",
      "Name": "MT.1045: Only invited users should be automatically admitted to Teams meetings",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Teams",
        "MeetingPolicy",
        "All",
        "MT.1045"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        #($TeamsMeetingPolicyGlobal.AutoAdmittedUsers -eq \"InvitedUsers\")\n        $TeamsMeetingPolicyGlobal = $TeamsMeetingPolicy | Where-Object { $_.Identity -eq \"Global\" }\n        $portalLink_MeetingPolicy = \"https://admin.teams.microsoft.com/policies/meetings\"\n\n        if (!(Test-MtConnection Teams)) {\n            Add-MtTestResultDetail -SkippedBecause NotConnectedTeams\n            return $null\n        }\n\n        $result = $TeamsMeetingPolicyGlobal.AutoAdmittedUsers\n\n        if ($result -eq \"InvitedUsers\") {\n            $testResultMarkdown = \"Well done. AutoAdmittedUsers is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"AutoAdmittedUsers in [Meeting policies]($portalLink_MeetingPolicy) should be InvitedUsers and is $($result) `n`n\"\n        }\n        $testDetailsMarkdown = \"Users who aren’t invited to a meeting shouldn’t be let in automatically, because it increases the risk of data leaks, inappropriate content being shared, or malicious actors joining. If only invited users are automatically admitted, then users who weren’t invited will be sent to a meeting lobby. The host can then decide whether or not to let them in.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        $result | Should -Be \"InvitedUsers\" -Because \"AutoAdmittedUsers should be InvitedUsers\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because AutoAdmittedUsers should be InvitedUsers, but they were different.\nExpected length: 12\nActual length:   17\nStrings differ at index 0.\nExpected: 'InvitedUsers'\nBut was:  'EveryoneInCompany'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because AutoAdmittedUsers should be InvitedUsers, but they were different.\nExpected length: 12\nActual length:   17\nStrings differ at index 0.\nExpected: 'InvitedUsers'\nBut was:  'EveryoneInCompany'\n           ^",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
            "Line": "41",
            "LineText": "        $result | Should -Be \"InvitedUsers\" -Because \"AutoAdmittedUsers should be InvitedUsers\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1: line 41\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Teams",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1045: Only invited users should be automatically admitted to Teams meetings",
        "TestResult": "AutoAdmittedUsers in [Meeting policies](https://admin.teams.microsoft.com/policies/meetings) should be InvitedUsers and is EveryoneInCompany \n\n",
        "TestDescription": "Users who aren’t invited to a meeting shouldn’t be let in automatically, because it increases the risk of data leaks, inappropriate content being shared, or malicious actors joining. If only invited users are automatically admitted, then users who weren’t invited will be sent to a meeting lobby. The host can then decide whether or not to let them in.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1046",
      "Title": "Restrict anonymous users from joining meetings",
      "Name": "MT.1046: Restrict anonymous users from joining meetings",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Teams",
        "MeetingPolicy",
        "All",
        "MT.1046"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $TeamsMeetingPolicyGlobal = $TeamsMeetingPolicy | Where-Object { $_.Identity -eq \"Global\" }\n        $portalLink_MeetingPolicy = \"https://admin.teams.microsoft.com/policies/meetings\"\n\n        if (!(Test-MtConnection Teams)) {\n            Add-MtTestResultDetail -SkippedBecause NotConnectedTeams\n            return $null\n        }\n\n        $result = $TeamsMeetingPolicyGlobal.AllowAnonymousUsersToJoinMeeting\n\n        if ($result -eq $false) {\n            $testResultMarkdown = \"Well done. AllowAnonymousUsersToJoinMeeting is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"AllowAnonymousUsersToJoinMeeting in [Meeting policies]($portalLink_MeetingPolicy) should be False and is $($result) `n`n\"\n        }\n        $testDetailsMarkdown = \"By restricting anonymous users from joining Microsoft Teams meetings, you have full control over meeting access. Anonymous users may not be from your organization and could have joined for malicious purposes, such as gaining information about your organization through conversations.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        $result | Should -Be $false -Because \"AllowAnonymousUsersToJoinMeeting should be False\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $false, because AllowAnonymousUsersToJoinMeeting should be False, but got $true.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $false, because AllowAnonymousUsersToJoinMeeting should be False, but got $true.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
            "Line": "64",
            "LineText": "        $result | Should -Be $false -Because \"AllowAnonymousUsersToJoinMeeting should be False\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1: line 64\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Teams",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1046: Restrict anonymous users from joining meetings",
        "TestResult": "AllowAnonymousUsersToJoinMeeting in [Meeting policies](https://admin.teams.microsoft.com/policies/meetings) should be False and is True \n\n",
        "TestDescription": "By restricting anonymous users from joining Microsoft Teams meetings, you have full control over meeting access. Anonymous users may not be from your organization and could have joined for malicious purposes, such as gaining information about your organization through conversations.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1047",
      "Title": "Restrict anonymous users from starting Teams meetings",
      "Name": "MT.1047: Restrict anonymous users from starting Teams meetings",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Teams",
        "MeetingPolicy",
        "All",
        "MT.1047"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n\n        $TeamsMeetingPolicyGlobal = $TeamsMeetingPolicy | Where-Object { $_.Identity -eq \"Global\" }\n        $portalLink_MeetingPolicy = \"https://admin.teams.microsoft.com/policies/meetings\"\n\n        if (!(Test-MtConnection Teams)) {\n            Add-MtTestResultDetail -SkippedBecause NotConnectedTeams\n            return $null\n        }\n\n        $result = $TeamsMeetingPolicyGlobal.AllowAnonymousUsersToStartMeeting\n\n        if ($result -eq $false) {\n            $testResultMarkdown = \"Well done. AllowAnonymousUsersToStartMeeting is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"AllowAnonymousUsersToStartMeeting in [Meeting policies]($portalLink_MeetingPolicy) should be False and is $($result) `n`n\"\n        }\n        $testDetailsMarkdown = \"If anonymous users are allowed to start meetings, they can admit any users from the lobbies, authenticated or otherwise. Anonymous users haven’t been authenticated, which can increase the risk of data leakage.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        $result | Should -Be $false -Because \"AllowAnonymousUsersToStartMeeting should be False\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $false, because AllowAnonymousUsersToStartMeeting should be False, but got $true.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $false, because AllowAnonymousUsersToStartMeeting should be False, but got $true.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
            "Line": "87",
            "LineText": "        $result | Should -Be $false -Because \"AllowAnonymousUsersToStartMeeting should be False\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1: line 87\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Teams",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1047: Restrict anonymous users from starting Teams meetings",
        "TestResult": "AllowAnonymousUsersToStartMeeting in [Meeting policies](https://admin.teams.microsoft.com/policies/meetings) should be False and is True \n\n",
        "TestDescription": "If anonymous users are allowed to start meetings, they can admit any users from the lobbies, authenticated or otherwise. Anonymous users haven’t been authenticated, which can increase the risk of data leakage.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1048",
      "Title": "Limit external participants from having control in a Teams meeting",
      "Name": "MT.1048: Limit external participants from having control in a Teams meeting",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Teams",
        "MeetingPolicy",
        "All",
        "MT.1048"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        $TeamsMeetingPolicyGlobal = $TeamsMeetingPolicy | Where-Object { $_.Identity -eq \"Global\" }\n        $portalLink_MeetingPolicy = \"https://admin.teams.microsoft.com/policies/meetings\"\n\n        if (!(Test-MtConnection Teams)) {\n            Add-MtTestResultDetail -SkippedBecause NotConnectedTeams\n            return $null\n        }\n\n        $result = $TeamsMeetingPolicyGlobal.AllowExternalParticipantGiveRequestControl\n\n        if ($result -eq $false) {\n            $testResultMarkdown = \"Well done. AllowExternalParticipantGiveRequestControl is $($result)`n`n\"\n        } else {\n            $testResultMarkdown = \"AllowExternalParticipantGiveRequestControl in [Meeting policies]($portalLink_MeetingPolicy) should be False and is $($result) `n`n\"\n        }\n        $testDetailsMarkdown = \"External participants are users that are outside your organization. Limiting their permission to share content, add new users, and more protects your organization’s information from data leaks, inappropriate content being shared, or malicious actors joining the meeting.\"\n        Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n        $result | Should -Be $false -Because \"AllowExternalParticipantGiveRequestControl should be False\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Teams/Test-TeamsMeeting.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Teams",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1048: Limit external participants from having control in a Teams meeting",
        "TestResult": "Well done. AllowExternalParticipantGiveRequestControl is False\n\n",
        "TestDescription": "External participants are users that are outside your organization. Limiting their permission to share content, add new users, and more protects your organization’s information from data leaks, inappropriate content being shared, or malicious actors joining the meeting.",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1049",
      "Title": "Conditional Access policies for User Risk and Sign-in Risk should be configured separately.",
      "Name": "MT.1049: Conditional Access policies for User Risk and Sign-in Risk should be configured separately.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1049",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1049"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        Test-MtCaMisconfiguredIDProtection | Should -Be $false -Because \"there is one or more policy with common misconfiguration for ID Protection \"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1049: Conditional Access policies for User Risk and Sign-in Risk should be configured separately. See https://maester.dev/docs/tests/MT.1049",
        "TestResult": "\nWell done! No conditional access policies detected where sign-in risk and user risk are combined.",
        "TestDescription": "Checks if both user risk and sign-in risk are configured in one conditional access policy.\n\nCombining sign in risk and user risk in one policy will only block access if both types of risk are flagged for a given sign in.\n\nThis means if only one type of risk is present (eg Sign-in risk = High, User risk = None), the sign-in will be allowed to proceed. This could create a security gap since risky activities might slip through.\n\n\nSee [Sign-in risk-based multifactor authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-risk)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1052",
      "Title": "At least one Conditional Access policy is targeting the Device Code authentication flow.",
      "Name": "MT.1052: At least one Conditional Access policy is targeting the Device Code authentication flow.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1052",
      "Tag": [
        "Maester",
        "CA",
        "Security",
        "All",
        "MT.1052"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        Test-MtCaDeviceCodeFlow | Should -Be $true -Because \"there is no policy that targets the device code authentication flow.\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that targets the device code authentication flow., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that targets the device code authentication flow., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "72",
            "LineText": "        Test-MtCaDeviceCodeFlow | Should -Be $true -Because \"there is no policy that targets the device code authentication flow.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 72\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1052: At least one Conditional Access policy is targeting the Device Code authentication flow. See https://maester.dev/docs/tests/MT.1052",
        "TestResult": "\nNo conditional access policy found that targets the Device Code authentication flow.",
        "TestDescription": "Checks if at least one policy is targeting the Device Code condition.\n\nOrganizations should block or limit device code flow because it can be exploited in phishing attacks, such as those conducted by the Storm-2372 group.\nAttackers leverage this authentication method to trick users into entering device codes on malicious websites, granting unauthorized access to accounts.\nBlocking or limiting this flow helps prevent exploitation by minimizing attack vectors, improving overall security posture, and safeguarding against compromised credentials through phishing techniques.\n\n## How to fix\n\nConfigure a Conditional Access policy to block the Device Code authentication flow and limit access to only trusted users and devices or to specific named locations.\n\n## Learn more\n  - [Block authentication flows with Conditional Access policy](https://learn.microsoft.com/entra/identity/conditional-access/policy-block-authentication-flows)\n  - [Microsoft Threat Intelligence | Storm-2372 conducts device code phishing campaign](https://www.microsoft.com/security/blog/2025/02/13/storm-2372-conducts-device-code-phishing-campaign/)\n  - [Jeffrey Appel | How to protect against Device Code Flow abuse (Storm-2372 attacks) and block the authentication flow](https://jeffreyappel.nl/how-to-protect-against-device-code-flow-abuse-storm-2372-attacks-and-block-the-authentication-flow/)\n\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1053",
      "Title": "Ensure intune device clean-up rule is configured",
      "Name": "MT.1053: Ensure intune device clean-up rule is configured",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Intune",
        "All",
        "MT.1053"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtManagedDeviceCleanupSettings\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"automatic device clean-up rule is configured.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Intune/Test-MtIntunePlatform.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because automatic device clean-up rule is configured., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because automatic device clean-up rule is configured., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Intune/Test-MtIntunePlatform.Tests.ps1",
            "Line": "5",
            "LineText": "            $result | Should -Be $true -Because \"automatic device clean-up rule is configured.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Intune/Test-MtIntunePlatform.Tests.ps1: line 5\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Intune",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1053: Ensure intune device clean-up rule is configured",
        "TestResult": "\nYour Intune device clean-up rule is not configured.",
        "TestDescription": "Ensure device clean-up rule is configured\n\nThis test checks if the device clean-up rule is configured.\n\nSet your Intune device cleanup rules to delete Intune MDM enrolled devices that appear inactive, stale, or unresponsive. Intune applies cleanup rules immediately and continuously so that your device records remain current.\n\n#### Remediation action:\n\nTo enable device clean-up rules:\n1. Navigate to [Microsoft Intune admin center](https://intune.microsoft.com).\n2. Click **Devices** scroll down to **Organize devices**.\n3. Select **Device clean-up rules**.\n4. Set **Delete devices based on last check-in date** to **Yes**\n5. Set **Delete devices that haven’t checked in for this many days** to **30 days or more** depending on your organizational needs.\n6. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [Microsoft Intune - Device clean-up rules](https://intune.microsoft.com/?ref=AdminCenter#view/Microsoft_Intune_DeviceSettings/DevicesMenu/~/deviceCleanUp)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1054",
      "Title": "Ensure built-in Device Compliance Policy marks devices with no compliance policy assigned as 'Not compliant'",
      "Name": "MT.1054: Ensure built-in Device Compliance Policy marks devices with no compliance policy assigned as 'Not compliant'",
      "HelpUrl": "",
      "Tag": [
        "Maester",
        "Intune",
        "All",
        "MT.1054"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-MtDeviceComplianceSettings\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"built-in device compliance policy marks devices with no policy assigned as 'Not compliant'.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Intune/Test-MtIntunePlatform.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because built-in device compliance policy marks devices with no policy assigned as 'Not compliant'., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because built-in device compliance policy marks devices with no policy assigned as 'Not compliant'., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/Maester/Intune/Test-MtIntunePlatform.Tests.ps1",
            "Line": "12",
            "LineText": "            $result | Should -Be $true -Because \"built-in device compliance policy marks devices with no policy assigned as 'Not compliant'.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Intune/Test-MtIntunePlatform.Tests.ps1: line 12\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Intune",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1054: Ensure built-in Device Compliance Policy marks devices with no compliance policy assigned as 'Not compliant'",
        "TestResult": "\nYour Intune built-in Device Compliance Policy **incorrectly** marks devices with no compliance policy assigned as 'Compliant'.",
        "TestDescription": "Ensure the built-in Device Compliance Policy marks devices with no compliance policy assigned as 'Not compliant'.\n\nSet your Intune built-in Device Compliance Policy to mark devices with no compliance policy assigned as 'Not compliant'.\nThis ensures that new devices that do not have any policies assigned are not compliant per default.\n\n#### Remediation action:\n\nTo change the built-in device compliance policy:\n1. Navigate to [Microsoft Intune admin center](https://intune.microsoft.com).\n2. Click **Devices** scroll down to **Manage devices**.\n3. Select **Compliance** and Select **Compliance settings**.\n4. Set **Mark devices with no compliance policy assigned as** to **Not compliant**\n5. Click **Save**.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [Microsoft Intune - Compliance](https://intune.microsoft.com/?ref=AdminCenter#view/Microsoft_Intune_DeviceSettings/DevicesMenu/~/compliance)\n* [Compliance policy settings](https://learn.microsoft.com/de-de/mem/intune/protect/device-compliance-get-started#compliance-policy-settings)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "MT.1055",
      "Title": "Microsoft 365 Group (and Team) creation should be restricted to approved users.",
      "Name": "MT.1055: Microsoft 365 Group (and Team) creation should be restricted to approved users.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1055",
      "Tag": [
        "Maester",
        "Group",
        "Security",
        "All",
        "MT.1055"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n\n        Test-MtGroupCreationRestricted | Should -Be $true -Because \"Microsoft 365 Group creation should be restricted to approved users.\"\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-Groups.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1055: Microsoft 365 Group (and Team) creation should be restricted to approved users. See https://maester.dev/docs/tests/MT.1055",
        "TestResult": "\n\nWell done. Microsoft 365 Group creation is restricted to approved users.\n",
        "TestDescription": "This test checks if Microsoft 365 Group creation is restricted to approved users.\n\nBy default, all users in the tenant can create Microsoft 365 Groups. This can lead to group sprawl, security risks and compliance issues.\n\nCreating groups should be restricted to users who have undergone training and understand the responsibilities of group ownership, governance and compliance requirements.\n\n#### Remediation action\n\nUnfortunately, Microsoft 365 does not provide a user interface to restrict group creation. However, you can restrict group creation to approved users by using PowerShell.\n\nFollow the link below to restrict Microsoft 365 Group creation to approved users:.\n\n#### Related links\n\n- [Manage who can create Microsoft 365 Groups](https://learn.microsoft.com/en-us/microsoft-365/solutions/manage-creation-of-groups?view=o365-worldwide)\n\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.100",
      "Title": "Bulk Complaint Level threshold is between 4 and 6.",
      "Name": "ORCA.100: Bulk Complaint Level threshold is between 4 and 6.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.100",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA100\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Bulk Complaint Level threshold is between 4 and 6.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA100.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Bulk Complaint Level threshold is between 4 and 6., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Bulk Complaint Level threshold is between 4 and 6., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA100.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Bulk Complaint Level threshold is between 4 and 6.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA100.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:11",
      "ResultDetail": {
        "TestTitle": "ORCA.100: Bulk Complaint Level threshold is between 4 and 6.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Anti-Spam Policy|Bulk Complaint Level Threshold|Result|\n|-|-|-|\n|Default|7|❌ Fail|\n",
        "TestDescription": "The differentiation between bulk and spam can sometimes be subjective. The bulk complaint level is based on the number of complaints from the sender. Decreasing the threshold can decrease the amount of perceived spam received, however, too low may be considered too strict.\n\n#### Remediation action\nSet the Bulk Complaint Level threshold to be 6.\n\n#### Related Links\n\n* [Bulk Complaint Level values](https://aka.ms/orca-antispam-docs-1) \n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.101",
      "Title": "Bulk is marked as spam.",
      "Name": "ORCA.101: Bulk is marked as spam.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.101",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA101\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Bulk is marked as spam.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA101.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.101: Bulk is marked as spam.",
        "TestResult": "Well done! Bulk is marked as spam.\n\n\n\n|Anti-Spam Policy|Mark as Spam Bulk Mail Setting (MarkAsSpamBulkMail)|Result|\n|-|-|-|\n|Default|On|✅ Pass|\n",
        "TestDescription": "The differentiation between bulk and spam can sometimes be subjective. The bulk complaint level is based on the number of complaints from the sender. Marking bulk as spam can decrease the amount of perceived spam received. This setting is only available in PowerShell.\n\n#### Remediation action\nSet the anti-spam policy to mark bulk mail as spam.\n\n#### Related Links\n\n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6) \n* [Set-HostedContentFilterPolicy](https://aka.ms/orca-antispam-docs-9)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.102",
      "Title": "Advanced Spam filter options are turned off.",
      "Name": "ORCA.102: Advanced Spam filter options are turned off.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.102",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA102\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Advanced Spam filter options are turned off.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA102.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.102: Advanced Spam filter options are turned off.",
        "TestResult": "Well done! Advanced Spam filter options are turned off.\n\n\n\n|Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Default|ASF Options|Disabled|✅ Pass|\n",
        "TestDescription": "Enabling one or more of the ASF settings is an aggressive approach to spam filtering that can often cause false positives. The effectiveness of these settings in reducing spam has severely declined over the years. Use them with caution.\n\n#### Remediation action\nTurn off Advanced Spam filter (ASF) options in Anti-Spam filter policies.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.103",
      "Title": "Outbound spam filter policy settings configured.",
      "Name": "ORCA.103: Outbound spam filter policy settings configured.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.103",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA103\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Outbound spam filter policy settings configured.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA103.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Outbound spam filter policy settings configured., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Outbound spam filter policy settings configured., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA103.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Outbound spam filter policy settings configured.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA103.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.103: Outbound spam filter policy settings configured.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Outbound Spam Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Default|RecipientLimitExternalPerHour|0|❌ Fail|\n|Default|RecipientLimitInternalPerHour|0|❌ Fail|\n|Default|RecipientLimitPerDay|0|❌ Fail|\n|Default|ActionWhenThresholdReached|BlockUserForToday|❌ Fail|\n",
        "TestDescription": "Configure the maximum number of recipients that a user can send to, per hour for internal (RecipientLimitInternalPerHour) and external recipients (RecipientLimitExternalPerHour) and maximum number per day for outbound email. It is common, after an account compromise incident, for an attacker to use the account to generate spam and phish. Configuring the recommended values can reduce the impact, but also allows you to receive notifications when these thresholds have been reached.\n\n#### Remediation action\nSet RecipientLimitExternalPerHour to 500, RecipientLimitInternalPerHour to 1000, and ActionWhenThresholdReached to block.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.104",
      "Title": "High Confidence Phish action set to Quarantine message.",
      "Name": "ORCA.104: High Confidence Phish action set to Quarantine message.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.104",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA104\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"High Confidence Phish action set to Quarantine message.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA104.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.104: High Confidence Phish action set to Quarantine message.",
        "TestResult": "Well done! High Confidence Phish action set to Quarantine message.\n\n\n\n|Spam Policy|Action|Result|\n|-|-|-|\n|Default|Quarantine|✅ Pass|\n",
        "TestDescription": "It is recommended to configure the High Confidence Phish detection action to Quarantine so that these emails are not visible to the end user from within Outlook. As Phishing emails are designed to look legitimate, users may mistakenly think that a phishing email in Junk is false-positive.\n\n#### Remediation action\nChange High Confidence Phish action to Quarantine message.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.105",
      "Title": "Safe Links Synchronous URL detonation is enabled.",
      "Name": "ORCA.105: Safe Links Synchronous URL detonation is enabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.105",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA105\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Links Synchronous URL detonation is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA105.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.105: Safe Links Synchronous URL detonation is enabled.",
        "TestResult": "Well done! Safe Links Synchronous URL detonation is enabled.\n\n\n\n|Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Built-In Protection Policy|DeliverMessageAfterScan|True|✅ Pass|\n|Built-In Protection Policy|ScanUrls|True|✅ Pass|\n",
        "TestDescription": "When the 'Wait for URL scanning to complete before delivering the message' option is configured, messages that contain URLs to be scanned will be held until the URLs finish scanning and are confirmed to be safe before the messages are delivered.\n\n#### Remediation action\nEnable Safe Links Synchronous URL detonation.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Recommended settings for EOP and Office 365 Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-7) \n* [Set up Microsoft Defender for Office 365 Safe Links policies](https://aka.ms/orca-atpp-docs-10)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.106",
      "Title": "Quarantine retention period is 30 days.",
      "Name": "ORCA.106: Quarantine retention period is 30 days.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.106",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA106\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Quarantine retention period is 30 days.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA106.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Quarantine retention period is 30 days., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Quarantine retention period is 30 days., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA106.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Quarantine retention period is 30 days.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA106.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.106: Quarantine retention period is 30 days.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Anti-Spam Filter Policy|Quarantine Retention Period|Result|\n|-|-|-|\n|Default|15|❌ Fail|\n",
        "TestDescription": "You can view, release, download, delete and report false positive quarantined email messages or files captured by Microsoft Defender for Office 365 (MDO) for SharePoint Online, OneDrive for Business, and Microsoft Teams in Office 365. Keep messages in the quarantine for 30 days to allow enough time for further investigation. This is the default value and also the maximum.\n\n#### Remediation action\nConfigure the Quarantine retention period to 30 days.\n\n#### Related Links\n\n* [Manage quarantined messages and files as an administrator in Office 365](https://aka.ms/orca-antispam-docs-6) \n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Office 365 Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.107",
      "Title": "End-user spam notification is enabled.",
      "Name": "ORCA.107: End-user spam notification is enabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.107",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA107\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"End-user spam notification is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA107.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.107: End-user spam notification is enabled.",
        "TestResult": "Well done! End-user spam notification is enabled.\n\n\n\n|Quarantine Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|DefaultFullAccessPolicy|ESNEnabled|False|🗄 Skip|\n|AdminOnlyAccessPolicy|ESNEnabled|False|🗄 Skip|\n",
        "TestDescription": "Enable End-user Spam notifications to let users manage their own spam-quarantined messages (Release, Block sender, Review). End-user spam notifications contain a list of all spam-quarantined messages that the end-user has received during a time period. Policies that do not apply to a spam policy as either a spam, or bulk action, will appear disabled below.\n\n#### Remediation action\nEnable End-user Spam notifications on a quarantine policy.\n\n#### Related Links\n\n* [Configure end-user spam notifications in Exchange Online](https://aka.ms/orca-antispam-docs-2) \n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Office 365 Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.109",
      "Title": "Senders are not being allow listed in an unsafe manner.",
      "Name": "ORCA.109: Senders are not being allow listed in an unsafe manner.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.109",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA109\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Senders are not being allow listed in an unsafe manner.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA109.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.109: Senders are not being allow listed in an unsafe manner.",
        "TestResult": "Well done! Senders are not being allow listed in an unsafe manner.\n\n\n\n|Anti-Spam Policy|Allowed Senders|Result|\n|-|-|-|\n|Default|No Sender Detected|✅ Pass|\n",
        "TestDescription": "Emails coming from allow listed senders bypass several layers of protection within Exchange Online Protection. If senders are allow listed, they are open to being spoofed from malicious actors.\n\n#### Remediation action\nRemove allow listing on senders.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Office 365 Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6) \n* [Use Anti-Spam Policy Sender/Domain Allow lists](https://aka.ms/orca-antispam-docs-4)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.110",
      "Title": "Internal Sender notifications are disabled.",
      "Name": "ORCA.110: Internal Sender notifications are disabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.110",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA110\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Internal Sender notifications are disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA110.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.110: Internal Sender notifications are disabled.",
        "TestResult": "Well done! Internal Sender notifications are disabled.\n\n\n\n|Malware Policy|EnableInternalSenderAdminNotifications|Result|\n|-|-|-|\n|Default|False|✅ Pass|\n",
        "TestDescription": "Notifying internal senders about malware detected in email messages could have negative impact. An adversary with access to an already compromised mailbox may use this information to verify effectiveness of malware detection.\n\n#### Remediation action\nDisable notifying internal senders of malware detection.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-malware](https://security.microsoft.com/antimalwarev2) \n* [Recommended settings for EOP and Office 365 Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.111",
      "Title": "Anti-phishing policy exists and EnableUnauthenticatedSender is true.",
      "Name": "ORCA.111: Anti-phishing policy exists and EnableUnauthenticatedSender is true.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.111",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA111\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Anti-phishing policy exists and EnableUnauthenticatedSender is true.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA111.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.111: Anti-phishing policy exists and EnableUnauthenticatedSender is true.",
        "TestResult": "Well done! Anti-phishing policy exists and EnableUnauthenticatedSender is true.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableUnauthenticatedSender|True|✅ Pass|\n",
        "TestDescription": "When the sender email address is spoofed, the message appears to originate from someone or somewhere other than the actual source. It is recommended to enable unauthenticated sender tagging in Office 365 Anti-phishing policies. The feature apply a '?' symbol in Outlook's sender card if the sender fails authentication checks.\n\n#### Remediation action\nEnable unauthenticated sender tagging in Anti-phishing policy.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Office 365 Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6) \n* [Unverified Sender](https://aka.ms/orca-atpp-docs-12)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.112",
      "Title": "Anti-spoofing protection action is configured to Move message to the recipients' Junk Email folders in Anti-phishing policy.",
      "Name": "ORCA.112: Anti-spoofing protection action is configured to Move message to the recipients' Junk Email folders in Anti-phishing policy.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.112",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA112\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Anti-spoofing protection action is configured to Move message to the recipients' Junk Email folders in Anti-phishing policy.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA112.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.112: Anti-spoofing protection action is configured to Move message to the recipients' Junk Email folders in Anti-phishing policy.",
        "TestResult": "Well done! Anti-spoofing protection action is configured to Move message to the recipients' Junk Email folders in Anti-phishing policy.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|AuthenticationFailAction|MoveToJmf|✅ Pass|\n",
        "TestDescription": "When the sender email address is spoofed, the message appears to originate from someone or somewhere other than the actual source. With Standard security settings it is recommended to configure Anti-spoofing protection action to Move message to the recipients' Junk Email folders in Office 365 Anti-phishing policies.\n\n#### Remediation action\nConfigure Anti-spoofing protection action to Move message to the recipients' Junk Email folders in Anti-phishing policy.\n\n#### Related Links\n\n* [Configuring the anti-spoofing policy](https://aka.ms/orca-atpp-docs-5) \n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Office 365 Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.113",
      "Title": "AllowClickThrough is disabled in Safe Links policies.",
      "Name": "ORCA.113: AllowClickThrough is disabled in Safe Links policies.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.113",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA113\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"AllowClickThrough is disabled in Safe Links policies.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA113.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because AllowClickThrough is disabled in Safe Links policies., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because AllowClickThrough is disabled in Safe Links policies., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA113.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"AllowClickThrough is disabled in Safe Links policies.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA113.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.113: AllowClickThrough is disabled in Safe Links policies.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Built-In Protection Policy|AllowClickThrough|True|❌ Fail|\n",
        "TestDescription": "Microsoft Defender for Office 365 Safe Links can help protect your organization by providing time-of-click verification of  web addresses (URLs) in email messages and Office documents. It is possible to allow users click through Safe Links to the original URL. It is recommended to configure Safe Links policies to not let users click through safe links. \n\n#### Remediation action\nDo not let users click through safe links to original URL.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Microsoft Defender for Office 365 Safe Links policies](https://aka.ms/orca-atpp-docs-11) \n* [Recommended settings for EOP and Office 365 Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-8)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.114",
      "Title": "No IP Allow Lists have been configured.",
      "Name": "ORCA.114: No IP Allow Lists have been configured.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.114",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA114\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"No IP Allow Lists have been configured.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA114.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.114: No IP Allow Lists have been configured.",
        "TestResult": "Well done! No IP Allow Lists have been configured.\n\n\n\n|Anti-Spam Policy|Allowed IP|Result|\n|-|-|-|\n|Default|10.10.10.10|🗄 Skip|\n",
        "TestDescription": "IP addresses contained in the IP allow list are able to bypass spam, phishing and spoofing checks, potentially resulting in more spam. Ensure that the IP list is kept to a minimum.\n\n#### Remediation action\nRemove IP addresses from IP allow list.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Use Anti-Spam Policy IP Allow lists](https://aka.ms/orca-antispam-docs-3)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.115",
      "Title": "Mailbox intelligence based impersonation protection is enabled in anti-phishing policies.",
      "Name": "ORCA.115: Mailbox intelligence based impersonation protection is enabled in anti-phishing policies.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.115",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA115\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Mailbox intelligence based impersonation protection is enabled in anti-phishing policies.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA115.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Mailbox intelligence based impersonation protection is enabled in anti-phishing policies., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Mailbox intelligence based impersonation protection is enabled in anti-phishing policies., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA115.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Mailbox intelligence based impersonation protection is enabled in anti-phishing policies.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA115.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.115: Mailbox intelligence based impersonation protection is enabled in anti-phishing policies.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableMailboxIntelligenceProtection|False|❌ Fail|\n",
        "TestDescription": "Mailbox Intelligence Protection enhances impersonation protection for users based on each user's individual sender graph.\n\n#### Remediation action\nEnable Mailbox intelligence based impersonation protection in anti-phishing policies.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-7) \n* [Set up Microsoft Defender for Office 365 anti-phishing and anti-phishing policies](https://aka.ms/orca-atpp-docs-9)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.116",
      "Title": "Mailbox intelligence based impersonation protection action set to move message to junk mail folder.",
      "Name": "ORCA.116: Mailbox intelligence based impersonation protection action set to move message to junk mail folder.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.116",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA116\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Mailbox intelligence based impersonation protection action set to move message to junk mail folder.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA116.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Mailbox intelligence based impersonation protection action set to move message to junk mail folder., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Mailbox intelligence based impersonation protection action set to move message to junk mail folder., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA116.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Mailbox intelligence based impersonation protection action set to move message to junk mail folder.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA116.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.116: Mailbox intelligence based impersonation protection action set to move message to junk mail folder.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|MailboxIntelligenceProtectionAction|NoAction|❌ Fail|\n",
        "TestDescription": "Mailbox intelligence protection enhances impersonation protection for users based on each user's individual sender graph. Move messages that are caught to junk mail folder.\n\n#### Remediation action\nChange Mailbox intelligence based impersonation protection action to move message to junk mail folder.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-7) \n* [Set up Microsoft Defender for Office 365 anti-phishing and anti-phishing policies](https://aka.ms/orca-atpp-docs-9)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.118.1",
      "Title": "Domains are not being allow listed in an unsafe manner in Anti-Spam Policies.",
      "Name": "ORCA.118.1: Domains are not being allow listed in an unsafe manner in Anti-Spam Policies.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.118.1",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA118_1\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Domains are not being allow listed in an unsafe manner in Anti-Spam Policies.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA118_1.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.118.1: Domains are not being allow listed in an unsafe manner in Anti-Spam Policies.",
        "TestResult": "Well done! Domains are not being allow listed in an unsafe manner in Anti-Spam Policies.\n\n\n\n|Anti-Spam Policy|Allowlisted Domain|Result|\n|-|-|-|\n|Default|No domain available|✅ Pass|\n",
        "TestDescription": "Emails coming from allow listed domains bypass several layers of protection within Exchange Online Protection. If domains are allow listed, they are open to being spoofed from malicious actors.\n\n#### Remediation action\nRemove allow listing on domains.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Use Anti-Spam Policy Sender/Domain Allow lists](https://aka.ms/orca-antispam-docs-4)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.118.2",
      "Title": "Domains are not being allow listed in an unsafe manner in Transport Rules.",
      "Name": "ORCA.118.2: Domains are not being allow listed in an unsafe manner in Transport Rules.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.118.2",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA118_2\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Domains are not being allow listed in an unsafe manner in Transport Rules.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA118_2.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.118.2: Domains are not being allow listed in an unsafe manner in Transport Rules.",
        "TestResult": "Well done! Domains are not being allow listed in an unsafe manner in Transport Rules.\n\n",
        "TestDescription": "Emails coming from allow listed domains bypass several layers of protection within Exchange Online Protection. If domains are allow listed, they are open to being spoofed from malicious actors.\n\n#### Remediation action\nRemove allow listed domains.\n\n#### Related Links\n\n* [Exchange admin center in Exchange Online](https://outlook.office365.com/ecp/) \n* [Using Exchange Transport Rules (ETRs) to allow specific senders](https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/create-safe-sender-lists-in-office-365#using-exchange-transport-rules-etrs-to-allow-specific-senders-recommended)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.118.3",
      "Title": "Your own domains are not being allow listed in an unsafe manner in Anti-Spam Policies.",
      "Name": "ORCA.118.3: Your own domains are not being allow listed in an unsafe manner in Anti-Spam Policies.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.118.3",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA118_3\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Your own domains are not being allow listed in an unsafe manner in Anti-Spam Policies.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA118_3.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.118.3: Your own domains are not being allow listed in an unsafe manner in Anti-Spam Policies.",
        "TestResult": "Well done! Your own domains are not being allow listed in an unsafe manner in Anti-Spam Policies.\n\n\n\n|Anti-Spam Policy|Organisation Domain Allow Listed|Result|\n|-|-|-|\n|Default|Allowed sender domains empty|✅ Pass|\n",
        "TestDescription": "Emails coming from allow listed domains bypass several layers of protection within Exchange Online Protection. When allow listing your own domains, an attacker can spoof any account in your organisation that has this domain. This is a significant phishing attack vector.\n\n#### Remediation action\nRemove allow listing on domains belonging to your organisation.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Use Anti-Spam Policy Sender/Domain Allow lists](https://aka.ms/orca-antispam-docs-4)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.118.4",
      "Title": "Your own domains are not being allow listed in an unsafe manner in Transport Rules.",
      "Name": "ORCA.118.4: Your own domains are not being allow listed in an unsafe manner in Transport Rules.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.118.4",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA118_4\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Your own domains are not being allow listed in an unsafe manner in Transport Rules.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA118_4.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.118.4: Your own domains are not being allow listed in an unsafe manner in Transport Rules.",
        "TestResult": "Well done! Your own domains are not being allow listed in an unsafe manner in Transport Rules.\n\n",
        "TestDescription": "Emails coming from allow listed domains bypass several layers of protection within Exchange Online Protection. When allow listing your own domains, an attacker can spoof any account in your organisation that has this domain. This is a significant phishing attack vector.\n\n#### Remediation action\nRemove allow listing on domains belonging to your organisation.\n\n#### Related Links\n\n* [Exchange admin center in Exchange Online](https://outlook.office365.com/ecp/) \n* [Using Exchange Transport Rules (ETRs) to allow specific senders](https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/create-safe-sender-lists-in-office-365#using-exchange-transport-rules-etrs-to-allow-specific-senders-recommended)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.119",
      "Title": "Similar Domains Safety Tips is enabled.",
      "Name": "ORCA.119: Similar Domains Safety Tips is enabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.119",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA119\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Similar Domains Safety Tips is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA119.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Similar Domains Safety Tips is enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Similar Domains Safety Tips is enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA119.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Similar Domains Safety Tips is enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA119.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.119: Similar Domains Safety Tips is enabled.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableSimilarDomainsSafetyTips|False|❌ Fail|\n",
        "TestDescription": "Microsoft Defender for Office 365 can show a warning tip to recipients in messages that might be from an impersonated domain.\n\n#### Remediation action\nEnable Similar Domains Safety Tips so that users can receive visible indication on incoming messages.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.120.1",
      "Title": "Zero Hour Autopurge Enabled for Phish.",
      "Name": "ORCA.120.1: Zero Hour Autopurge Enabled for Phish.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.120.1",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA120_phish\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Zero Hour Autopurge Enabled for Phish.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA120_phish.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.120.1: Zero Hour Autopurge Enabled for Phish.",
        "TestResult": "Well done! Zero Hour Autopurge Enabled for Phish.\n\n\n\n|Policy|ZapEnabled Setting|Result|\n|-|-|-|\n|Default|True|✅ Pass|\n",
        "TestDescription": "Zero Hour Autopurge can assist removing false-negatives post detection from mailboxes. By default, it is enabled.\n\n#### Remediation action\nEnable Zero Hour Autopurge.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6) \n* [Zero-hour auto purge - protection against spam and malware](https://aka.ms/orca-zha-docs-2)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.120.2",
      "Title": "Zero Hour Autopurge Enabled for Malware.",
      "Name": "ORCA.120.2: Zero Hour Autopurge Enabled for Malware.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.120.2",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA120_malware\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Zero Hour Autopurge Enabled for Malware.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA120_malware.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.120.2: Zero Hour Autopurge Enabled for Malware.",
        "TestResult": "Well done! Zero Hour Autopurge Enabled for Malware.\n\n\n\n|Policy|ZapEnabled Setting|Result|\n|-|-|-|\n|Default|True|✅ Pass|\n",
        "TestDescription": "Zero Hour Autopurge can assist removing false-negatives post detection from mailboxes. By default, it is enabled.\n\n#### Remediation action\nEnable Zero Hour Autopurge.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-malware](https://security.microsoft.com/antimalwarev2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.120.3",
      "Title": "Zero Hour Autopurge Enabled for Spam.",
      "Name": "ORCA.120.3: Zero Hour Autopurge Enabled for Spam.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.120.3",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA120_spam\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Zero Hour Autopurge Enabled for Spam.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA120_spam.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.120.3: Zero Hour Autopurge Enabled for Spam.",
        "TestResult": "Well done! Zero Hour Autopurge Enabled for Spam.\n\n\n\n|Policy|ZapEnabled Setting|Result|\n|-|-|-|\n|Default|True|✅ Pass|\n",
        "TestDescription": "Zero Hour Autopurge can assist removing false-negatives post detection from mailboxes. By default, it is enabled.\n\n#### Remediation action\nEnable Zero Hour Autopurge.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6) \n* [Zero-hour auto purge - protection against spam and malware](https://aka.ms/orca-zha-docs-2)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.121",
      "Title": "Supported filter policy action used.",
      "Name": "ORCA.121: Supported filter policy action used.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.121",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA121\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Supported filter policy action used.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA121.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.121: Supported filter policy action used.",
        "TestResult": "Well done! Supported filter policy action used.\n\n\n\n|Policy|Setting|Action|Result|\n|-|-|-|-|\n|Default|SpamAction|MoveToJmf|✅ Pass|\n|Default|PhishSpamAction|MoveToJmf|✅ Pass|\n",
        "TestDescription": "Zero Hour Autopurge can assist removing false-negatives post detection from mailboxes. It requires a supported action in the spam filter policy.\n\n#### Remediation action\nChange filter policy action to support Zero Hour Auto Purge.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Zero-hour auto purge - protection against spam and malware](https://aka.ms/orca-zha-docs-2)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.123",
      "Title": "Unusual Characters Safety Tips is enabled.",
      "Name": "ORCA.123: Unusual Characters Safety Tips is enabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.123",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA123\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Unusual Characters Safety Tips is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA123.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Unusual Characters Safety Tips is enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Unusual Characters Safety Tips is enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA123.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Unusual Characters Safety Tips is enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA123.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.123: Unusual Characters Safety Tips is enabled.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableUnusualCharactersSafetyTips|False|❌ Fail|\n",
        "TestDescription": "Microsoft Defender for Office 365 can show a warning tip to recipients where the sender name or email address contains character sets that aren't usually used together.\n\n#### Remediation action\nEnable Unusual Characters Safety Tips so that users can receive visible indication on incoming messages.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.124",
      "Title": "Safe attachments unknown malware response set to block messages.",
      "Name": "ORCA.124: Safe attachments unknown malware response set to block messages.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.124",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA124\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe attachments unknown malware response set to block messages.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA124.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.124: Safe attachments unknown malware response set to block messages.",
        "TestResult": "Well done! Safe attachments unknown malware response set to block messages.\n\n\n\n|Safe Attachments Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Built-In Protection Policy|Action|Block|✅ Pass|\n",
        "TestDescription": "When Safe attachments unknown malware response set to block, Microsoft Defender for Office 365 prevents current and future messages with detected malware from proceeding and sends messages to quarantine in Office 365.\n\n#### Remediation action\nSet Safe attachments unknown malware response to block messages.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe attachments](https://security.microsoft.com/safeattachmentv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.139",
      "Title": "Spam action set to move message to junk mail folder or quarantine.",
      "Name": "ORCA.139: Spam action set to move message to junk mail folder or quarantine.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.139",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA139\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Spam action set to move message to junk mail folder or quarantine.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA139.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.139: Spam action set to move message to junk mail folder or quarantine.",
        "TestResult": "Well done! Spam action set to move message to junk mail folder or quarantine.\n\n\n\n|Anti-Spam Policy|Action|Result|\n|-|-|-|\n|Default|MoveToJmf|✅ Pass|\n",
        "TestDescription": "It is recommended to configure Spam detection action to Move messages to Junk Email folder.\n\n#### Remediation action\nChange Spam action to move message to Junk Email Folder.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365 security](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.140",
      "Title": "High Confidence Spam action set to Quarantine message.",
      "Name": "ORCA.140: High Confidence Spam action set to Quarantine message.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.140",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA140\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"High Confidence Spam action set to Quarantine message.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA140.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because High Confidence Spam action set to Quarantine message., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because High Confidence Spam action set to Quarantine message., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA140.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"High Confidence Spam action set to Quarantine message.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA140.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.140: High Confidence Spam action set to Quarantine message.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Anti-Spam Policy|Action|Result|\n|-|-|-|\n|Default|MoveToJmf|❌ Fail|\n",
        "TestDescription": "It is recommended to configure High Confidence Spam detection action to Quarantine message.\n\n#### Remediation action\nChange High Confidence Spam action to Quarantine message.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.141",
      "Title": "Bulk action set to Move message to Junk Email Folder.",
      "Name": "ORCA.141: Bulk action set to Move message to Junk Email Folder.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.141",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA141\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Bulk action set to Move message to Junk Email Folder.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA141.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:01",
      "ResultDetail": {
        "TestTitle": "ORCA.141: Bulk action set to Move message to Junk Email Folder.",
        "TestResult": "Well done! Bulk action set to Move message to Junk Email Folder.\n\n\n\n|Anti-Spam Policy|Action|Result|\n|-|-|-|\n|Default|MoveToJmf|✅ Pass|\n",
        "TestDescription": "It is recommended to configure Bulk detection action to Move messages to Junk Email folder.\n\n#### Remediation action\nChange bulk action to move messages to junk mail folder.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.142",
      "Title": "Phish action set to Quarantine message.",
      "Name": "ORCA.142: Phish action set to Quarantine message.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.142",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA142\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Phish action set to Quarantine message.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA142.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Phish action set to Quarantine message., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Phish action set to Quarantine message., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA142.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Phish action set to Quarantine message.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA142.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.142: Phish action set to Quarantine message.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Anti-Spam Policy|Action|Result|\n|-|-|-|\n|Default|MoveToJmf|❌ Fail|\n",
        "TestDescription": "It is recommended to configure the Phish detection action to Quarantine so that these emails are not visible to the end user from within Outlook. As Phishing emails are designed to look legitimate, users may mistakenly think that a phishing email in Junk is false-positive.\n\n#### Remediation action\nChange Phish action to Quarantine message.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.156",
      "Title": "Safe Links Policies are tracking when user clicks on safe links.",
      "Name": "ORCA.156: Safe Links Policies are tracking when user clicks on safe links.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.156",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA156\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Links Policies are tracking when user clicks on safe links.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA156.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.156: Safe Links Policies are tracking when user clicks on safe links.",
        "TestResult": "Well done! Safe Links Policies are tracking when user clicks on safe links.\n\n\n\n|Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Built-In Protection Policy|TrackClicks|True|✅ Pass|\n",
        "TestDescription": "When these options are configured, click data for URLs in Word, Excel, PowerPoint, Visio documents and in emails is stored by Safe Links. This information can help dealing with phishing, suspicious email messages and URLs.\n\n#### Remediation action\nEnable tracking of user clicks in Safe Links Policies.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.158",
      "Title": "Safe Attachments is enabled for SharePoint and Teams.",
      "Name": "ORCA.158: Safe Attachments is enabled for SharePoint and Teams.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.158",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA158\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Attachments is enabled for SharePoint and Teams.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA158.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.158: Safe Attachments is enabled for SharePoint and Teams.",
        "TestResult": "Well done! Safe Attachments is enabled for SharePoint and Teams.\n\n\n\n|Safe Attachments Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Default|EnableATPForSPOTeamsODB|True|✅ Pass|\n",
        "TestDescription": "Safe Attachments can assist by scanning for zero day malware by using behavioural analysis and sandboxing techniques. These checks suppliment signature definitions.\n\n#### Remediation action\nEnable Safe Attachments for SharePoint and Teams.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe attachments](https://security.microsoft.com/safeattachmentv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.179",
      "Title": "Safe Links is enabled intra-organization.",
      "Name": "ORCA.179: Safe Links is enabled intra-organization.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.179",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA179\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Links is enabled intra-organization.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA179.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Safe Links is enabled intra-organization., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Safe Links is enabled intra-organization., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA179.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Safe Links is enabled intra-organization.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA179.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.179: Safe Links is enabled intra-organization.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|SafeLinks Policy|Enabled for Internal|Result|\n|-|-|-|\n|Built-In Protection Policy|False|❌ Fail|\n",
        "TestDescription": "Phishing attacks are not limited from external users. Commonly, when one user is compromised, that user can be used in a process of lateral movement between different accounts in your organization. Configuring Safe Links so that internal messages are also re-written can assist with lateral movement using phishing. The built-in policy is ignored in this check, as it only provides the minimum level of protection.\n\n#### Remediation action\nEnable Safe Links between internal users.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.180",
      "Title": "Anti-phishing policy exists and EnableSpoofIntelligence is true.",
      "Name": "ORCA.180: Anti-phishing policy exists and EnableSpoofIntelligence is true.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.180",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA180\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Anti-phishing policy exists and EnableSpoofIntelligence is true.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA180.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.180: Anti-phishing policy exists and EnableSpoofIntelligence is true.",
        "TestResult": "Well done! Anti-phishing policy exists and EnableSpoofIntelligence is true.\n\n\n\n|Policy|Setting|Antispoof Enforced|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableSpoofIntelligence|True|✅ Pass|\n",
        "TestDescription": "When the sender email address is spoofed, the message appears to originate from someone or somewhere other than the actual source. Anti-spoofing protection examines forgery of the 'From: header' which is the one that shows up in an email client like Outlook. It is recommended to enable anti-spoofing protection in Office 365 Anti-phishing policies.\n\n#### Remediation action\nEnable anti-spoofing protection in Anti-phishing policy.\n\n#### Related Links\n\n* [Anti-spoofing protection in Office 365](https:/aka.ms/orca-atpp-docs-3) \n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.189",
      "Title": "Safe Attachments is not bypassed.",
      "Name": "ORCA.189: Safe Attachments is not bypassed.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.189",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA189\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Attachments is not bypassed.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA189.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.189: Safe Attachments is not bypassed.",
        "TestResult": "Well done! Safe Attachments is not bypassed.\n\n",
        "TestDescription": "Microsoft Defender for Office 365 Safe Attachments assists scanning for zero day malware by using behavioural analysis and sandboxing, supplementing signature definitions. The protection can be bypassed using mail flow rules which set the X-MS-Exchange-Organization-SkipSafeAttachmentProcessing header for email messages.\n\n#### Remediation action\nRemove mail flow rules which bypass Safe Attachments.\n\n#### Related Links\n\n* [Exchange admin center in Exchange Online](https://outlook.office365.com/ecp/)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.189.2",
      "Title": "Safe Links is not bypassed.",
      "Name": "ORCA.189.2: Safe Links is not bypassed.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.189.2",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA189_2\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Links is not bypassed.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA189_2.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.189.2: Safe Links is not bypassed.",
        "TestResult": "Well done! Safe Links is not bypassed.\n\n",
        "TestDescription": "Microsoft Defender for Office 365 Safe Links can help protect against phishing attacks by providing time-of-click verification of web addresses (URLs) in email messages and Office documents. The protection can be bypassed using mail flow rules which set the X-MS-Exchange-Organization-SkipSafeLinksProcessing header for email messages.\n\n#### Remediation action\nRemove mail flow rules which bypass Safe Links.\n\n#### Related Links\n\n* [Exchange admin center in Exchange Online](https://outlook.office365.com/ecp/)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.205",
      "Title": "Common attachment type filter is enabled.",
      "Name": "ORCA.205: Common attachment type filter is enabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.205",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA205\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Common attachment type filter is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA205.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.205: Common attachment type filter is enabled.",
        "TestResult": "Well done! Common attachment type filter is enabled.\n\n\n\n|Policy|Setting|Missing Default File Type|Result|\n|-|-|-|-|\n|Default|FileFilter|Enabled with all default file types|✅ Pass|\n",
        "TestDescription": "The common attachment type filter can block file types that commonly contain malware, including in internal emails.\n\n#### Remediation action\nEnable common attachment type filter.\n\n#### Related Links\n\n* [Configure anti-malware policies](https://aka.ms/orca-mfp-docs-1) \n* [Microsoft 365 Defender Portal - Anti-malware](https://security.microsoft.com/antimalwarev2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-6)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.220",
      "Title": "Advanced Phish filter Threshold level is adequate.",
      "Name": "ORCA.220: Advanced Phish filter Threshold level is adequate.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.220",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA220\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Advanced Phish filter Threshold level is adequate.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA220.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Advanced Phish filter Threshold level is adequate., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Advanced Phish filter Threshold level is adequate., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA220.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Advanced Phish filter Threshold level is adequate.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA220.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.220: Advanced Phish filter Threshold level is adequate.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Advanced Phishing Threshold Level|Result|\n|-|-|-|\n|Office365 AntiPhish Default|1|❌ Fail|\n",
        "TestDescription": "The higher the Advanced Phishing Threshold Level, the stricter the mechanisms are that detect phishing attempts against your users.\n\n#### Remediation action\nSet Advanced Phish filter Threshold to 3 or 4.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.221",
      "Title": "Mailbox intelligence is enabled in anti-phishing policies.",
      "Name": "ORCA.221: Mailbox intelligence is enabled in anti-phishing policies.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.221",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA221\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Mailbox intelligence is enabled in anti-phishing policies.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA221.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.221: Mailbox intelligence is enabled in anti-phishing policies.",
        "TestResult": "Well done! Mailbox intelligence is enabled in anti-phishing policies.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableMailboxIntelligence|True|✅ Pass|\n",
        "TestDescription": "Mailbox Intelligence checks can provide your users with intelligence on suspicious incoming emails that appear to be from users that they normally communicate with based on their graph.\n\n#### Remediation action\nEnable mailbox intelligence in anti-phishing policies.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.222",
      "Title": "Domain Impersonation action is set to move to Quarantine.",
      "Name": "ORCA.222: Domain Impersonation action is set to move to Quarantine.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.222",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA222\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Domain Impersonation action is set to move to Quarantine.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA222.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Domain Impersonation action is set to move to Quarantine., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Domain Impersonation action is set to move to Quarantine., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA222.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Domain Impersonation action is set to move to Quarantine.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA222.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.222: Domain Impersonation action is set to move to Quarantine.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableTargetedDomainsProtection|False|❌ Fail|\n|Office365 AntiPhish Default|EnableOrganizationDomainsProtection|False|❌ Fail|\n|Office365 AntiPhish Default|TargetedDomainProtectionAction|NoAction|❌ Fail|\n",
        "TestDescription": "Domain Impersonation can detect impersonation attempts against your domains or domains that look very similiar to your domains. Move messages that are caught using this impersonation protection to Quarantine.\n\n#### Remediation action\nConfigure domain impersonation action to Quarantine.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.223",
      "Title": "User impersonation action is set to move to Quarantine.",
      "Name": "ORCA.223: User impersonation action is set to move to Quarantine.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.223",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA223\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"User impersonation action is set to move to Quarantine.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA223.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because User impersonation action is set to move to Quarantine., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because User impersonation action is set to move to Quarantine., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA223.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"User impersonation action is set to move to Quarantine.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA223.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.223: User impersonation action is set to move to Quarantine.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Setting|Action|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableTargetedUserProtection|False|❌ Fail|\n|Office365 AntiPhish Default|TargetedUserProtectionAction|NoAction|❌ Fail|\n",
        "TestDescription": "User impersonation protection can detect spoofing of your sensitive users. Move messages that are caught using user impersonation detection to Quarantine.\n\n#### Remediation action\nConfigure user impersonation action to Quarantine.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.224",
      "Title": "Similar Users Safety Tips is enabled.",
      "Name": "ORCA.224: Similar Users Safety Tips is enabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.224",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA224\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Similar Users Safety Tips is enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA224.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Similar Users Safety Tips is enabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Similar Users Safety Tips is enabled., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA224.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Similar Users Safety Tips is enabled.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA224.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.224: Similar Users Safety Tips is enabled.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableSimilarUsersSafetyTips|False|❌ Fail|\n",
        "TestDescription": "Microsoft Defender for Office 365 can show a warning tip to recipients in messages that might be from an impersonated user.\n\n#### Remediation action\nEnable Similar Users Safety Tips so that users can receive visible indication on incoming messages.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.225",
      "Title": "Safe Documents is enabled for Office clients.",
      "Name": "ORCA.225: Safe Documents is enabled for Office clients.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.225",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA225\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Documents is enabled for Office clients.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA225.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.225: Safe Documents is enabled for Office clients.",
        "TestResult": "Well done! Safe Documents is enabled for Office clients.\n\n\n\n|Safe Attachments Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Default|EnableSafeDocs|True|✅ Pass|\n",
        "TestDescription": "Safe Documents can assist protecting files opened in Office appplications. Before a user is allowed to trust a file opened in Office 365 ProPlus using Protected View, the file will be verified by Microsoft Defender for Office 365.\n\n#### Remediation action\nEnable Safe Documents for Office clients.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe attachments](https://security.microsoft.com/safeattachmentv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7) \n* [Safe Documents in Microsoft 365 E5](https://aka.ms/orca-atpp-docs-1)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.226",
      "Title": "Each domain has a Safe Link policy applied to it.",
      "Name": "ORCA.226: Each domain has a Safe Link policy applied to it.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.226",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA226\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Each domain has a Safe Link policy applied to it.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA226.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Each domain has a Safe Link policy applied to it., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Each domain has a Safe Link policy applied to it., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA226.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Each domain has a Safe Link policy applied to it.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA226.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.226: Each domain has a Safe Link policy applied to it.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Domain|Policy|Priority|Result|\n|-|-|-|-|\n|pora.mail.onmicrosoft.com|No Policy Applying||❌ Fail|\n|pora.onmicrosoft.com|No Policy Applying||❌ Fail|\n|elapora.com|No Policy Applying||❌ Fail|\n",
        "TestDescription": "Microsoft Defender for Office 365 Safe Links policies are applied using rules. The recipient domain condition is the most effective way of applying the Safe Links policy, ensuring no users are left without protection. If polices are applied using group membership make sure you cover all users through this method. Applying polices this way can be challenging, users may left unprotected if group memberships are not accurate and up to date. It is important not to rely on the 'built-in' Safe Links policy, as this policy only applies the minimum level of protections and should serve as a catch-all.\n\n#### Remediation action\nApply a Safe Links policy to every domain.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Order and precedence of email protection](https://aka.ms/orca-atpp-docs-4) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.227",
      "Title": "Each domain has a Safe Attachments policy applied to it.",
      "Name": "ORCA.227: Each domain has a Safe Attachments policy applied to it.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.227",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA227\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Each domain has a Safe Attachments policy applied to it.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA227.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Each domain has a Safe Attachments policy applied to it., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Each domain has a Safe Attachments policy applied to it., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA227.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Each domain has a Safe Attachments policy applied to it.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA227.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.227: Each domain has a Safe Attachments policy applied to it.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Domain|Policy|Priority|Result|\n|-|-|-|-|\n|pora.mail.onmicrosoft.com|No Policy Applying||❌ Fail|\n|pora.onmicrosoft.com|No Policy Applying||❌ Fail|\n|elapora.com|No Policy Applying||❌ Fail|\n",
        "TestDescription": "Microsoft Defender for Office 365 Safe Attachments policies are applied using rules. The recipient domain condition is the most effective way of applying the Safe Attachments policy, ensuring no users are left without protection. If polices are applied using group membership make sure you cover all users through this method. Applying polices this way can be challenging, users may left unprotected if group memberships are not accurate and up to date. It is important not to rely on the 'built-in' Safe Links policy, as this policy only applies the minimum level of protections and should serve as a catch-all.\n\n#### Remediation action\nApply a Safe Attachments policy to every domain.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe attachments](https://security.microsoft.com/safeattachmentv2) \n* [Order and precedence of email protection](https://aka.ms/orca-atpp-docs-4) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.228",
      "Title": "No trusted senders in Anti-phishing policy.",
      "Name": "ORCA.228: No trusted senders in Anti-phishing policy.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.228",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA228\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"No trusted senders in Anti-phishing policy.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA228.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.228: No trusted senders in Anti-phishing policy.",
        "TestResult": "Well done! No trusted senders in Anti-phishing policy.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|ExcludedSenders|No Sender Detected|✅ Pass|\n",
        "TestDescription": "Adding senders as trusted in Anti-phishing policy will result in the action for protected domains, Protected users or mailbox intelligence protection will be not applied to messages coming from these senders. If a trusted sender needs to be added based on organizational requirements it should be reviewed regularly and updated as needed.\n\n#### Remediation action\nRemove allow listing on senders in Anti-phishing policy.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.229",
      "Title": "No trusted domains in Anti-phishing policy.",
      "Name": "ORCA.229: No trusted domains in Anti-phishing policy.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.229",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA229\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"No trusted domains in Anti-phishing policy.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA229.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.229: No trusted domains in Anti-phishing policy.",
        "TestResult": "Well done! No trusted domains in Anti-phishing policy.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|ExcludedDomains|No domain detected|✅ Pass|\n",
        "TestDescription": "Adding domains as trusted in Anti-phishing policy will result in the action for protected domains, protected users or mailbox intelligence protection will be not applied to messages coming from these sender domains. If a trusted domain needs to be added based on organizational requirements it should be reviewed regularly and updated as needed. We also do not recommend adding domains from shared services.\n\n#### Remediation action\nRemove allow listing on domains in Anti-phishing policy.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.230",
      "Title": "Each domain has a Anti-phishing policy applied to it, or the default policy is being used.",
      "Name": "ORCA.230: Each domain has a Anti-phishing policy applied to it, or the default policy is being used.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.230",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA230\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Each domain has a Anti-phishing policy applied to it, or the default policy is being used.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA230.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.230: Each domain has a Anti-phishing policy applied to it, or the default policy is being used.",
        "TestResult": "Well done! Each domain has a Anti-phishing policy applied to it, or the default policy is being used.\n\n\n\n|Domain|Policy|Priority|Result|\n|-|-|-|-|\n|pora.mail.onmicrosoft.com|Default|Default|✅ Pass|\n|pora.onmicrosoft.com|Default|Default|✅ Pass|\n|elapora.com|Default|Default|✅ Pass|\n",
        "TestDescription": "Microsoft Defender for Office 365 Anti-phishing policies are applied using rules. The default anti-phishing policy applies in the absence of a custom policy. When creating custom policies, there may be duplication of settings and depending on the rules and priority, some policies or settings may not even apply. It's important in this circumstance to check that the desired settings are applied to the right users.\n\n#### Remediation action\nCheck your anti-phishing policies for duplicate rules. Some policies and settings may not be applying.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Antiphishing policies](https://security.microsoft.com/antiphishing) \n* [Order and precedence of email protection](https://aka.ms/orca-atpp-docs-4) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7) \n* [Setting up antiphishing policies](https://aka.ms/orca-atpp-docs-2)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.231",
      "Title": "Each domain has a anti-spam policy applied to it, or the default policy is being used.",
      "Name": "ORCA.231: Each domain has a anti-spam policy applied to it, or the default policy is being used.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.231",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA231\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Each domain has a anti-spam policy applied to it, or the default policy is being used.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA231.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.231: Each domain has a anti-spam policy applied to it, or the default policy is being used.",
        "TestResult": "Well done! Each domain has a anti-spam policy applied to it, or the default policy is being used.\n\n\n\n|Domain|Policy|Priority|Result|\n|-|-|-|-|\n|pora.mail.onmicrosoft.com|Default|Default|✅ Pass|\n|pora.onmicrosoft.com|Default|Default|✅ Pass|\n|elapora.com|Default|Default|✅ Pass|\n",
        "TestDescription": "Exchange Online Protection anti-spam policies are applied using rules. The default policy applies in the absence of a custom policy. When creating custom policies, there may be duplication of settings and depending on the rules and priority, some policies or settings may not even apply. It's important in this circumstance to check that the desired settings are applied to the right users.\n\n#### Remediation action\nCheck your anti-spam policies for duplicate rules. Some policies and settings may not be applying.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam policies](https://security.microsoft.com/antispam) \n* [Order and precedence of email protection](https://aka.ms/orca-antispam-docs-5)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.232",
      "Title": "Each domain has a malware filter policy applied to it, or the default policy is being used.",
      "Name": "ORCA.232: Each domain has a malware filter policy applied to it, or the default policy is being used.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.232",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA232\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Each domain has a malware filter policy applied to it, or the default policy is being used.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA232.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.232: Each domain has a malware filter policy applied to it, or the default policy is being used.",
        "TestResult": "Well done! Each domain has a malware filter policy applied to it, or the default policy is being used.\n\n\n\n|Domain|Policy|Priority|Result|\n|-|-|-|-|\n|pora.mail.onmicrosoft.com|Default|Default|✅ Pass|\n|pora.onmicrosoft.com|Default|Default|✅ Pass|\n|elapora.com|Default|Default|✅ Pass|\n",
        "TestDescription": "Exchange Online Protection malware filter policies are applied using rules. The default policy applies in the absence of a custom policy. When creating custom policies, there may be duplication of settings and depending on the rules and priority, some policies or settings may not even apply. It's important in this circumstance to check that the desired settings are applied to the right users.\n\n#### Remediation action\nCheck your malware filter policies for duplicate rules. Some policies and settings may not be applying.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-malware policies](https://security.microsoft.com/antimalwarev2) \n* [Order and precedence of email protection](https://aka.ms/orca-atpp-docs-4)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.233",
      "Title": "Domains are pointed directly at EOP or enhanced filtering is used.",
      "Name": "ORCA.233: Domains are pointed directly at EOP or enhanced filtering is used.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.233",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA233\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Domains are pointed directly at EOP or enhanced filtering is used.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA233.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.233: Domains are pointed directly at EOP or enhanced filtering is used.",
        "TestResult": "Well done! Domains are pointed directly at EOP or enhanced filtering is used.\n\n\n\n|Domain|Points to Service|Enhanced Filtering|Result|\n|-|-|-|-|\n|pora.mail.onmicrosoft.com|Yes|Not Required|✅ Pass|\n|pora.onmicrosoft.com|Yes|Not Required|✅ Pass|\n|elapora.com|Yes|Not Required|✅ Pass|\n",
        "TestDescription": "Exchange Online Protection (EOP) and Microsoft Defender for Office 365 (MDO) works best when the mail exchange (MX) record is pointed directly at the service. In the event another third-party service is being used, a very important signal (the senders IP address) is obfuscated and hidden from EOP & MDO, generating a larger quantity of false positives and false negatives. By configuring Enhanced Filtering with the IP addresses of these services the true senders IP address can be discovered, reducing the false-positive and false-negative impact.\n\n#### Remediation action\nSend mail directly to EOP or configure enhanced filtering.\n\n#### Related Links\n\n* [Enhanced Filtering for Connectors](https://aka.ms/orca-connectors-docs-1) \n* [Microsoft 365 Defender Portal - Enhanced Filtering](https://aka.ms/orca-connectors-action-skiplisting)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.233.1",
      "Title": "Domains are pointed directly at EOP or enhanced filtering is configured on all default connectors.",
      "Name": "ORCA.233.1: Domains are pointed directly at EOP or enhanced filtering is configured on all default connectors.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.233.1",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA233_1\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Domains are pointed directly at EOP or enhanced filtering is configured on all default connectors.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA233_1.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.233.1: Domains are pointed directly at EOP or enhanced filtering is configured on all default connectors.",
        "TestResult": "Well done! Domains are pointed directly at EOP or enhanced filtering is configured on all default connectors.\n\n",
        "TestDescription": "Exchange Online Protection (EOP) and Microsoft Defender for Office 365 works best when the mail exchange (MX) record is pointed directly at the service. In the event another third-party service is being used, a very important signal (the senders IP address) is obfuscated and hidden from EOP & MDO, generating a larger quantity of false positives and false negatives. By configuring Enhanced Filtering with the IP addresses of these services the true senders IP address can be discovered, reducing the false-positive and false-negative impact.\n\n#### Remediation action\nConfigure enhanced filtering on connectors when email path is not direct to EOP.\n\n#### Related Links\n\n* [Enhanced Filtering for Connectors](https://aka.ms/orca-connectors-docs-1) \n* [Microsoft 365 Defender Portal - Enhanced Filtering](https://aka.ms/orca-connectors-action-skiplisting)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.234",
      "Title": "Click through is disabled for Safe Documents.",
      "Name": "ORCA.234: Click through is disabled for Safe Documents.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.234",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA234\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Click through is disabled for Safe Documents.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA234.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.234: Click through is disabled for Safe Documents.",
        "TestResult": "Well done! Click through is disabled for Safe Documents.\n\n\n\n|Safe Attachments Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Default|AllowSafeDocsOpen|False|✅ Pass|\n",
        "TestDescription": "Safe Documents can assist protecting files opened in Office appplications. Before a user is allowed to trust a file opened in Office 365 ProPlus using Protected View, the file will be verified by Microsoft Defender for Office 365. It is possible to allow users click through Protected View even if Safe Documents identified the file as malicious. It is recommended to configure Safe Documents to not let users click through Pretected View.\n\n#### Remediation action\nDo not let usres click through Protected View if Safe Documents identified the file as malicious.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe attachments](https://security.microsoft.com/safeattachmentv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7) \n* [Safe Documents in Microsoft 365 E5](https://aka.ms/orca-atpp-docs-1)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.236",
      "Title": "Safe Links is enabled for emails.",
      "Name": "ORCA.236: Safe Links is enabled for emails.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.236",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA236\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Links is enabled for emails.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA236.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.236: Safe Links is enabled for emails.",
        "TestResult": "Well done! Safe Links is enabled for emails.\n\n\n\n|Safe Links policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Built-In Protection Policy|EnableSafeLinksForEmail|True|✅ Pass|\n",
        "TestDescription": "When Safe Links for emails is enabled, URLs in emails will be checked when users click on links.\n\n#### Remediation action\nEnable Safe Links policy action for unknown potentially malicious URLs in emails.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.237",
      "Title": "Safe Links is enabled for teams messages.",
      "Name": "ORCA.237: Safe Links is enabled for teams messages.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.237",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA237\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Links is enabled for teams messages.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA237.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.237: Safe Links is enabled for teams messages.",
        "TestResult": "Well done! Safe Links is enabled for teams messages.\n\n\n\n|Safe Links policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Built-In Protection Policy|EnableSafeLinksForTeams|True|✅ Pass|\n",
        "TestDescription": "When Safe Links for teamas messages is enabled, URLs in messages will be checked when users click on them.\n\n#### Remediation action\nEnable Safe Links policy action for unknown potentially malicious URLs in teams messages.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.238",
      "Title": "Safe Links is enabled for office documents.",
      "Name": "ORCA.238: Safe Links is enabled for office documents.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.238",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA238\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safe Links is enabled for office documents.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA238.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.238: Safe Links is enabled for office documents.",
        "TestResult": "Well done! Safe Links is enabled for office documents.\n\n\n\n|Safe Links policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Built-In Protection Policy|EnableSafeLinksForOffice|True|✅ Pass|\n",
        "TestDescription": "When Safe Links for office documents is enabled, URLs in documents will be checked when users click on them.\n\n#### Remediation action\nEnable Safe Links policy action for unknown potentially malicious URLs in office documents.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.239",
      "Title": "No exclusions for the built-in protection policies.",
      "Name": "ORCA.239: No exclusions for the built-in protection policies.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.239",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA239\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"No exclusions for the built-in protection policies.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA239.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.239: No exclusions for the built-in protection policies.",
        "TestResult": "Well done! No exclusions for the built-in protection policies.\n\n\n\n|Exclusion Type|Exclusion|Result|\n|-|-|-|\n|None|No exclusions from MDO in-built protections|✅ Pass|\n",
        "TestDescription": "Built-in protection policies provide catch-all protection against users not covered by higher order policies. Excluding users from the built-in protection policies may mean these users have reduced protections. It is important not to rely on the 'built-in' policies, as these policies only apply the minimum level of protections and should serve as a catch-all.\n\n#### Remediation action\nRemove exclusions from the built-in protection policies.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Safe links](https://security.microsoft.com/safelinksv2) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-atpp-docs-7)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.240",
      "Title": "Outlook is configured to display external tags for external emails.",
      "Name": "ORCA.240: Outlook is configured to display external tags for external emails.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.240",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA240\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Outlook is configured to display external tags for external emails.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA240.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Outlook is configured to display external tags for external emails., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Outlook is configured to display external tags for external emails., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA240.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Outlook is configured to display external tags for external emails.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA240.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.240: Outlook is configured to display external tags for external emails.",
        "TestResult": "The configured settings are not set as recommended.\n\n",
        "TestDescription": "External tags show users email that is coming from external. EOP & MDO works with native client side integration to clearly highlight external emails. This allows you to train users to identify these emails so that they can be more suspicious about the email contents.\n\n#### Remediation action\nConfigure external tags to highlight emails which are sent from external.\n\n#### Related Links\n\n* [Native external in Outlook](https://techcommunity.microsoft.com/t5/exchange-team-blog/native-external-sender-callouts-on-email-in-outlook/ba-p/2250098) \n* [Set External in Outlook (Set-ExternalInOutlook)](https://learn.microsoft.com/en-us/powershell/module/exchange/set-externalinoutlook?view=exchange-ps)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.241",
      "Title": "Anti-phishing policy exists and EnableFirstContactSafetyTips is true.",
      "Name": "ORCA.241: Anti-phishing policy exists and EnableFirstContactSafetyTips is true.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.241",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\n        $result = Test-ORCA241\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Anti-phishing policy exists and EnableFirstContactSafetyTips is true.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA241.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Anti-phishing policy exists and EnableFirstContactSafetyTips is true., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Anti-phishing policy exists and EnableFirstContactSafetyTips is true., but got $false.",
            "File": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA241.Tests.ps1",
            "Line": "8",
            "LineText": "            $result | Should -Be $true -Because \"Anti-phishing policy exists and EnableFirstContactSafetyTips is true.\"",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8106,
            "OffsetInLine": 13,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "Statement": "throw $errorRecord",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:8106 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8106\nat Should<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 8044\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA241.Tests.ps1: line 8\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.241: Anti-phishing policy exists and EnableFirstContactSafetyTips is true.",
        "TestResult": "The configured settings are not set as recommended.\n\n\n\n|Antiphishing Policy|Setting|Current Value|Result|\n|-|-|-|-|\n|Office365 AntiPhish Default|EnableFirstContactSafetyTips|False|❌ Fail|\n",
        "TestDescription": "Attackers pretend to be other people in order to trick users. By enabling first contact safety tips, users are shown a visual representation on the email that this is the first time that they have received an email from this sender. This can trigger users in to being suspicious of an email if it they believe it is coming from someone they know.\n\n#### Remediation action\nEnable first contact safety tips to highlight suspicious messages to users.\n\n#### Related Links\n\n* [First Contact Safety Tip](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-phishing-policies-about?view=o365-worldwide#first-contact-safety-tip) \n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.242",
      "Title": "Important protection alerts responsible for AIR activities are enabled.",
      "Name": "ORCA.242: Important protection alerts responsible for AIR activities are enabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.242",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA242\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Important protection alerts responsible for AIR activities are enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA242.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.242: Important protection alerts responsible for AIR activities are enabled.",
        "TestResult": "Well done! Important protection alerts responsible for AIR activities are enabled.\n\n\n\n|Protection Alert|Setting|Current Value|Result|\n|-|-|-|-|\n|A potentially malicious URL click was detected|Disabled|False|✅ Pass|\n|Teams message reported by user as security risk|Disabled|False|✅ Pass|\n|Email messages containing phish URLs removed after delivery|Disabled|False|✅ Pass|\n|Suspicious Email Forwarding Activity|Disabled|False|✅ Pass|\n|Email messages containing malicious file removed after delivery|Disabled|False|✅ Pass|\n|Email reported by user as malware or phish|Disabled|False|✅ Pass|\n|Email messages containing malicious URL removed after delivery|Disabled|False|✅ Pass|\n|Email messages containing malware removed after delivery|Disabled|False|✅ Pass|\n|A user clicked through to a potentially malicious URL|Disabled|False|✅ Pass|\n|Email messages from a campaign removed after delivery|Disabled|False|✅ Pass|\n|Email messages removed after delivery|Disabled|False|✅ Pass|\n|Suspicious email sending patterns detected|Disabled|False|✅ Pass|\n",
        "TestDescription": "Automated Incident Response (AIR) triggers off certain alerts that fire in the environment. AIR is responsible for detecting further anomalies and providing automated remediation actions designed to mitigate threats/attacks. It is important that these alerts are enabled so that AIR can function correctly.\n\n#### Remediation action\nEnable important protection alerts that are responsible for AIR activities.\n\n#### Related Links\n\n* [Automated investigation and response in Microsoft 365 Defender](https://learn.microsoft.com/en-us/microsoft-365/security/defender/m365d-autoir)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.243",
      "Title": "Authenticated Receive Chain is set up for domains not pointing to EOP/MDO, or all domains point to EOP/MDO.",
      "Name": "ORCA.243: Authenticated Receive Chain is set up for domains not pointing to EOP/MDO, or all domains point to EOP/MDO.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.243",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA243\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Authenticated Receive Chain is set up for domains not pointing to EOP/MDO, or all domains point to EOP/MDO.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA243.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.243: Authenticated Receive Chain is set up for domains not pointing to EOP/MDO, or all domains point to EOP/MDO.",
        "TestResult": "Well done! Authenticated Receive Chain is set up for domains not pointing to EOP/MDO, or all domains point to EOP/MDO.\n\n",
        "TestDescription": "When EOP/MDO is behind a third-party service, sender authentication checks such as DKIM & SPF can fail. This is due to the fact that the service infront may modify the message and break the signature, or send from an IP address that is not a registered sender for the domain. By configuring the third-party to ARC seal the message, and setting up a trusted ARC sealer, the authentication results of the third-party mail relay can be used. IMPORTANT NOTE: This check cannot validate that the third-party service infront of these domains is correctly ARC sealing your emails, nor can it check that the domain portion matches one of the trusted ARC sealers. This check purely validates a trusted ARC sealer exists. Even if this check passes, you should validate your emails are passing ARC seal\n\n#### Remediation action\nEnable Authenticated Receive Chain (ARC) trusted sealers for domains not pointed at EOP/MDO.\n\n#### Related Links\n\n* [Configuring trusted ARC sealers](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/email-authentication-arc-configure?view=o365-worldwide) \n* [Improving 'Defense in Depth' with Trusted ARC Sealers for Microsoft Defender for Office 365](https://techcommunity.microsoft.com/t5/microsoft-defender-for-office/improving-defense-in-depth-with-trusted-arc-sealers-for/ba-p/3440707)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "ORCA.244",
      "Title": "Policies are configured to honor sending domains DMARC.",
      "Name": "ORCA.244: Policies are configured to honor sending domains DMARC.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.244",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\n        $result = Test-ORCA244\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Policies are configured to honor sending domains DMARC.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA244.Tests.ps1",
      "ErrorRecord": [],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.244: Policies are configured to honor sending domains DMARC.",
        "TestResult": "Well done! Policies are configured to honor sending domains DMARC.\n\n\n\n|Antiphishing Policy|Honor DMARC Policy|Result|\n|-|-|-|\n|Office365 AntiPhish Default|True|✅ Pass|\n",
        "TestDescription": "Domain-based Message Authentication, Reporting & Conformance (DMARC) is a standard that helps prevent spoofing by verifying the senders identity. If an email fails DMARC validation, it often means that the sender is not who they claim to be, and the email could be fraudulent. The owner of the sending domain controls the DMARC policy for their domain, and provides recommendations to receivers on what action should be performed when DMARC fails. When the Honor DMARC Policy setting is set to False, the organisations policy is not considered. It is recommended to honor this policy. \n\n#### Remediation action\nConfigure anti-phish policy to honor sending domains DMARC configuration.\n\n#### Related Links\n\n* [Announcing New DMARC Policy Handling Defaults for Enhanced Email Security](https://techcommunity.microsoft.com/t5/exchange-team-blog/announcing-new-dmarc-policy-handling-defaults-for-enhanced-email/ba-p/3878883) \n* [Microsoft 365 Defender Portal - Anti-phishing](https://security.microsoft.com/antiphishing)\n",
        "SkippedReason": null,
        "Severity": "",
        "TestSkipped": "",
        "Service": null
      }
    },
    {
      "Id": "CIS.M365.1.2.2",
      "Title": "(L1) Ensure sign-in to shared mailboxes is blocked",
      "Name": "CIS.M365.1.2.2: (L1) Ensure sign-in to shared mailboxes is blocked",
      "HelpUrl": "",
      "Tag": [
        "CIS.M365.1.2.2",
        "L1",
        "CIS E3 Level 1",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n\n        $result = Test-MtCisSharedMailboxSignIn\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"Sign ins are blocked for shared mailboxes\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cis/Test-MtCisSharedMailboxSignIn.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because There are no SharedMailbox in your Tenant.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because There are no SharedMailbox in your Tenant.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtCisSharedMailboxSignIn, /Users/merill/GitHub/maester/powershell/public/cis/Test-MtCisSharedMailboxSignIn.ps1: line 36\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cis/Test-MtCisSharedMailboxSignIn.Tests.ps1: line 4\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CIS",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CIS.M365.1.2.2: (L1) Ensure sign-in to shared mailboxes is blocked",
        "TestResult": "\nSkipped. There are no SharedMailbox in your Tenant.",
        "TestDescription": "1.2.2 (L1) Ensure sign-in to shared mailboxes is blocked\n\nThe intent of the shared mailbox is the only allow delegated access from other mailboxes. An admin could reset the password, or an attacker could potentially gain access to the shared mailbox allowing the direct sign-in to the shared mailbox and subsequently the sending of email from a sender that does not have a unique identity. To prevent this, block sign-in for the account that is associated with the shared mailbox.\n\n#### Remediation action:\n\nBlock sign-in to shared mailboxes in the UI:\n1. Navigate to Microsoft 365 admin center [https://admin.microsoft.com](https://admin.microsoft.com).\n2. Click to expand **Teams & groups** and select **Shared mailboxes**.\n3. Take note of all shared mailboxes.\n4. Click to expand **Users** and select **Active users**.\n5. Select a shared mailbox account to open it's properties pane and then select **Block sign-in**.\n6. Check the box for Block this user from signing in.\n7. Repeat for any additional shared mailboxes.\n\n#### Related links\n\n* [Microsoft 365 Admin Center](https://admin.microsoft.com)\n* [CIS Microsoft 365 Foundations Benchmark v4.0.0 - Page 37](https://www.cisecurity.org/benchmark/microsoft_365)\n\n",
        "SkippedReason": "There are no SharedMailbox in your Tenant.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.AAD.5.4",
      "Title": "Group owners SHALL NOT be allowed to consent to applications.",
      "Name": "CISA.MS.AAD.5.4: Group owners SHALL NOT be allowed to consent to applications.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.5.4",
        "CISA.MS.AAD.5.4",
        "CISA",
        "Security",
        "All",
        "Entra ID Free"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        $result = Test-MtCisaAppGroupOwnerConsent\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"group owner consent is disabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppGroupOwnerConsent.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Settings value is not available. This may be due to the change that this API is no longer available for recently created tenants.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Settings value is not available. This may be due to the change that this API is no longer available for recently created tenants.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtCisaAppGroupOwnerConsent, /Users/merill/GitHub/maester/powershell/public/CISA/Entra/Test-MtCisaAppGroupOwnerConsent.ps1: line 29\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/entra/Test-MtCisaAppGroupOwnerConsent.Tests.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.AAD.5.4: Group owners SHALL NOT be allowed to consent to applications.",
        "TestResult": "\nSkipped. Settings value is not available. This may be due to the change that this API is no longer available for recently created tenants.\n",
        "TestDescription": "Group owners SHALL NOT be allowed to consent to applications.\n\nRationale: In M365, group owners and team owners can consent to applications accessing data in the tenant. By requiring consent requests to go through an approval workflow, risk of exposure to malicious applications is reduced.\n\n#### Remediation action:\n\n1. In **Entra** under **Identity** and **Applications**, select **Enterprise applications**.\n2. Under **Security**, select **Consent and permissions**.\n3. Under **Manage**, select **[User consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)**.\n4. Under **Group owner consent for apps accessing data**, select **Do not allow group owner consent**.\n5. Click **Save**.\n\n#### Related links\n\n* [Entra admin center - Consent and permissions | User consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)\n* [CISA Application Registration & Consent - MS.AAD.5.4v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad54v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L665)\n\n",
        "SkippedReason": "Settings value is not available. This may be due to the change that this API is no longer available for recently created tenants.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.14.4",
      "Title": "If a third-party party filtering solution is used, the solution SHOULD offer services comparable to the native spam filtering offered by Microsoft.",
      "Name": "CISA.MS.EXO.14.4: If a third-party party filtering solution is used, the solution SHOULD offer services comparable to the native spam filtering offered by Microsoft.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.14.4",
        "CISA.MS.EXO.14.4",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n\n        $result = Test-MtCisaSpamAlternative\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"should not pass.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamAlternative.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Unable to validate 3rd party solutions.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Unable to validate 3rd party solutions.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtCisaSpamAlternative, /Users/merill/GitHub/maester/powershell/public/CISA/exchange/Test-MtCisaSpamAlternative.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaSpamAlternative.Tests.ps1: line 4\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.14.4: If a third-party party filtering solution is used, the solution SHOULD offer services comparable to the native spam filtering offered by Microsoft.",
        "TestResult": "\nSkipped. Unable to validate 3rd party solutions.",
        "TestDescription": "If a third-party party filtering solution is used, the solution SHOULD offer services comparable to the native spam filtering offered by Microsoft.\n\nRationale: Spam is a constant threat as junk mail can reduce user productivity, fill up mailboxes unnecessarily, and in some cases include malicious links or attachments. Filtering out spam reduces user workload burden, prevents junk mail congestion, and reduces potentially malicious content exposure.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select [**Preset Security Policies**](https://security.microsoft.com/presetSecurityPolicies).\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 14 Inbound Anti-Spam Protections - MS.EXO.14.4](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo144v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L794)\n\n",
        "SkippedReason": "Unable to validate 3rd party solutions.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.16.2",
      "Title": "Alerts SHOULD be sent to a monitored address or incorporated into a security information and event management (SIEM) system.",
      "Name": "CISA.MS.EXO.16.2: Alerts SHOULD be sent to a monitored address or incorporated into a security information and event management (SIEM) system.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.16.2",
        "CISA.MS.EXO.16.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n\n        $result = Test-MtCisaExoAlertSiem\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"alerts enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaExoAlertSiem.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not available for API validation.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not available for API validation.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtCisaExoAlertSiem, /Users/merill/GitHub/maester/powershell/public/CISA/exchange/Test-MtCisaExoAlertSiem.ps1: line 31\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaExoAlertSiem.Tests.ps1: line 4\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.16.2: Alerts SHOULD be sent to a monitored address or incorporated into a security information and event management (SIEM) system.",
        "TestResult": "\nSkipped. Not available for API validation.",
        "TestDescription": "Alerts SHOULD be sent to a monitored address or incorporated into a security information and event management (SIEM) system.\n\nRationale: Suspicious or malicious events, if not resolved promptly, may have a greater impact to users and the agency. Sending alerts to a monitored email address or SIEM system helps ensure these suspicious or malicious events are acted upon in a timely manner to limit overall impact.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. Select [**Settings**](https://security.microsoft.com/securitysettings).\n3. Select either:\n    a. [**Microsoft Sentinel**](https://security.microsoft.com/sentinel/settings).\n    b. **Defender XDR**, and under **General**, select [**Streaming API**](https://security.microsoft.com/securitysettings/defender/raw_data_export).\n4. Ensure a SIEM integration is configured for your organization.\n\n#### Related links\n\n* [Defender admin center - Alert policy](https://security.microsoft.com/alertpoliciesv2)\n* [Defender admin center - Streaming API](https://security.microsoft.com/securitysettings/defender/raw_data_export)\n* [Defender admin center - Sentinel workspaces](https://security.microsoft.com/sentinel/settings)\n* [CISA 16 Alerts - MS.EXO.16.2](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo162v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L878)\n\n",
        "SkippedReason": "Not available for API validation.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.4.3",
      "Title": "The DMARC point of contact for aggregate reports SHALL include reports@dmarc.cyber.dhs.gov.",
      "Name": "CISA.MS.EXO.4.3: The DMARC point of contact for aggregate reports SHALL include reports@dmarc.cyber.dhs.gov.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.4.3",
        "CISA.MS.EXO.4.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        $cisaDmarcAggregateCisa = Test-MtCisaDmarcAggregateCisa\n\n        if ($null -ne $cisaDmarcAggregateCisa) {\n            $cisaDmarcAggregateCisa | Should -Be $true -Because \"DMARC record includes proper aggregate target.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDmarcAggregateCisa.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because This test is only for federal, executive branch, departments and agencies. To override use [Test-MtCisaDmarcAggregateCisa -Force](https://maester.dev/docs/commands/Test-MtCisaDmarcAggregateCisa)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because This test is only for federal, executive branch, departments and agencies. To override use [Test-MtCisaDmarcAggregateCisa -Force](https://maester.dev/docs/commands/Test-MtCisaDmarcAggregateCisa)",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtCisaDmarcAggregateCisa, /Users/merill/GitHub/maester/powershell/public/CISA/exchange/Test-MtCisaDmarcAggregateCisa.ps1: line 50\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDmarcAggregateCisa.Tests.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.4.3: The DMARC point of contact for aggregate reports SHALL include reports@dmarc.cyber.dhs.gov.",
        "TestResult": "\nSkipped. This test is only for federal, executive branch, departments and agencies. To override use [Test-MtCisaDmarcAggregateCisa -Force](https://maester.dev/docs/commands/Test-MtCisaDmarcAggregateCisa)",
        "TestDescription": "The DMARC point of contact for aggregate reports SHALL include `reports@dmarc.cyber.dhs.gov`.\n\nRationale: Email spoofing attempts are not inherently visible to domain owners. DMARC provides a mechanism to receive reports of spoofing attempts. Including reports@dmarc.cyber.dhs.gov as a point of contact for these reports gives CISA insight into spoofing attempts and is required by BOD 18-01 for FCEB departments and agencies.\n\n**Note: Only federal, executive branch, departments and agencies should include this email address in their DMARC record.**\n\n> For other organization's there are many services that offer managed DMARC analysis and reporting, though ensure you properly align your implementation with your organization's policies for data handling.\n\n#### Remediation action:\n\n* See MS.EXO.4.1v1 Instructions for an overview of how to publish and check a DMARC record.\n* Ensure the record published includes reports@dmarc.cyber.dhs.gov as one of the emails for the RUA field.\n\n#### Related links\n\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\n* [CISA 4 Domain-Based Message Authentication, Reporting, and Conformance (DMARC) - MS.EXO.4.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo43v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L207)\n\n",
        "SkippedReason": "This test is only for federal, executive branch, departments and agencies. To override use [Test-MtCisaDmarcAggregateCisa -Force](https://maester.dev/docs/commands/Test-MtCisaDmarcAggregateCisa)",
        "Severity": "",
        "TestSkipped": "NotDotGovDomain",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.8.3",
      "Title": "The selected DLP solution SHOULD offer services comparable to the native DLP solution offered by Microsoft.",
      "Name": "CISA.MS.EXO.8.3: The selected DLP solution SHOULD offer services comparable to the native DLP solution offered by Microsoft.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.8.3",
        "CISA.MS.EXO.8.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n\n        $cisa = Test-MtCisaDlpAlternate\n\n        if ($null -ne $cisa) {\n            $cisa | Should -Be $true -Because \"will not reach here.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlpAlternate.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Unable to validate 3rd party solutions.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Unable to validate 3rd party solutions.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtCisaDlpAlternate, /Users/merill/GitHub/maester/powershell/public/CISA/exchange/Test-MtCisaDlpAlternate.ps1: line 29\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaDlpAlternate.Tests.ps1: line 4\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.8.3: The selected DLP solution SHOULD offer services comparable to the native DLP solution offered by Microsoft.",
        "TestResult": "\nSkipped. Unable to validate 3rd party solutions.",
        "TestDescription": "The selected DLP solution SHOULD offer services comparable to the native DLP solution offered by Microsoft.\n\nRationale: Any alternative DLP solution should be able to detect sensitive information in Exchange Online and block access to unauthorized entities.\n\n> This test will always skip by default.\n\n#### Related links\n\n* [Purview admin center - Data loss prevention policies](https://purview.microsoft.com/datalossprevention/policies)\n* [CISA 8 Data Loss Prevention Solutions - MS.EXO.8.3](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo83v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L453)\n\n",
        "SkippedReason": "Unable to validate 3rd party solutions.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "CISA.MS.EXO.9.4",
      "Title": "Alternatively chosen filtering solutions SHOULD offer services comparable to Microsoft Defender's Common Attachment Filter.",
      "Name": "CISA.MS.EXO.9.4: Alternatively chosen filtering solutions SHOULD offer services comparable to Microsoft Defender's Common Attachment Filter.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.9.4",
        "CISA.MS.EXO.9.4",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n\n        $result = Test-MtCisaEmailFilterAlternative\n\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"should not pass.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaEmailFilterAlternative.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Tenant is not licensed for Exchange Online Protection and there is no implementation to check for alternate mail filters available.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Tenant is not licensed for Exchange Online Protection and there is no implementation to check for alternate mail filters available.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtCisaEmailFilterAlternative, /Users/merill/GitHub/maester/powershell/public/CISA/exchange/Test-MtCisaEmailFilterAlternative.ps1: line 31\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/cisa/exchange/Test-MtCisaEmailFilterAlternative.Tests.ps1: line 4\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "CISA.MS.EXO.9.4: Alternatively chosen filtering solutions SHOULD offer services comparable to Microsoft Defender's Common Attachment Filter.",
        "TestResult": "\nSkipped. Tenant is not licensed for Exchange Online Protection and there is no implementation to check for alternate mail filters available.",
        "TestDescription": "Alternatively chosen filtering solutions SHOULD offer services comparable to Microsoft Defender's Common Attachment Filter.\n\nRationale: Malicious attachments often take the form of click-to-run files. Sharing high risk file types, when necessary, is better left to a means other than email; the dangers of allowing them to be sent over email outweigh any potential benefits. Filtering email attachments based on file types can prevent spread of malware distributed via click-to-run email attachments.\n\n> Note: This test will always result in a skip result.\n\n#### Remediation action:\n\n1. Sign in to **Microsoft 365 Defender**.\n2. In the left-hand menu, go to **Email & Collaboration** > **Policies & Rules**.\n3. Select **Threat Policies**.\n4. From the **Templated policies** section, select **Preset Security Policies**.\n5. Under **Standard protection**, slide the toggle switch to the right so the text next to the toggle reads **Standard protection is on**.\n6. Under **Strict protection**, slide the toggle switch to the right so the text next to the toggle reads **Strict protection is on**.\n\nNote: If the toggle slider in step 5 is grayed out, click on **Manage protection settings** instead and configure the policy settings according to [Use the Microsoft 365 Defender portal to assign Standard and Strict preset security policies to users | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/preset-security-policies?view=o365-worldwide#use-the-microsoft-365-defender-portal-to-assign-standard-and-strict-preset-security-policies-to-users).\n\n#### Related links\n\n* [Defender admin center - Preset security policies](https://security.microsoft.com/presetSecurityPolicies)\n* [CISA 9 Attachment File Type - MS.EXO.9.4v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo94v1)\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L532)\n\n",
        "SkippedReason": "Tenant is not licensed for Exchange Online Protection and there is no implementation to check for alternate mail filters available.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AF05",
      "Title": "Authentication Method - FIDO2 security key - Restricted.",
      "Name": "EIDSCA.AF05: Authentication Method - FIDO2 security key - Restricted.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF05",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF05"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\n            .keyRestrictions.aaGuids -notcontains $null -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId AF05 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Authentication method of FIDO2 security keys is not enabled and key restriction not enforced.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Authentication method of FIDO2 security keys is not enabled and key restriction not enforced.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtEidscaAF05, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaAF05.ps1: line 25\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 326\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AF05: Authentication Method - FIDO2 security key - Restricted. See https://maester.dev/docs/tests/EIDSCA.AF05",
        "TestResult": "\nSkipped. Authentication method of FIDO2 security keys is not enabled and key restriction not enforced.\n",
        "TestDescription": "You can work with your Security key provider to determine the AAGuids of their devices for allowing or blocking usage.\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\n.keyRestrictions.aaGuids -notcontains $null -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\n\n\n",
        "SkippedReason": "Authentication method of FIDO2 security keys is not enabled and key restriction not enforced.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.AF06",
      "Title": "Authentication Method - FIDO2 security key - Restrict specific keys.",
      "Name": "EIDSCA.AF06: Authentication Method - FIDO2 security key - Restrict specific keys.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF06",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF06"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\n            .keyRestrictions.aaGuids -notcontains $null -and ($result.keyRestrictions.enforcementType -eq 'allow' -or $result.keyRestrictions.enforcementType -eq 'block') -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId AF06 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Authentication method of FIDO2 security keys is not enabled and key restriction not enforced.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Authentication method of FIDO2 security keys is not enabled and key restriction not enforced.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtEidscaAF06, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaAF06.ps1: line 25\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 335\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.AF06: Authentication Method - FIDO2 security key - Restrict specific keys. See https://maester.dev/docs/tests/EIDSCA.AF06",
        "TestResult": "\nSkipped. Authentication method of FIDO2 security keys is not enabled and key restriction not enforced.\n",
        "TestDescription": "Defines if list of AADGUID will be used to allow or block registration.\n\nYou should use Block or Allow as value to allow- or blocklisting of AAGuids.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\n.keyRestrictions.aaGuids -notcontains $null -and ($result.keyRestrictions.enforcementType -eq 'allow' -or $result.keyRestrictions.enforcementType -eq 'block') -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\n\n\n",
        "SkippedReason": "Authentication method of FIDO2 security keys is not enabled and key restriction not enforced.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.CP01",
      "Title": "Default Settings - Consent Policy Settings - Group owner consent for apps accessing data.",
      "Name": "EIDSCA.CP01: Default Settings - Consent Policy Settings - Group owner consent for apps accessing data.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CP01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CP01"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/settings\"\n            .values | where-object name -eq 'EnableGroupSpecificConsent' | select-object -expand value -eq 'False'\n        #>\n        Test-MtEidscaControl -CheckId CP01 | Should -Be 'False'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Group owner consent settings have been removed and replaced with Team owner consent settings.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Group owner consent settings have been removed and replaced with Team owner consent settings.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtEidscaCP01, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaCP01.ps1: line 25\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 96\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.CP01: Default Settings - Consent Policy Settings - Group owner consent for apps accessing data. See https://maester.dev/docs/tests/EIDSCA.CP01",
        "TestResult": "\nSkipped. Group owner consent settings have been removed and replaced with Team owner consent settings.\n",
        "TestDescription": "Group and team owners can authorize applications, such as applications published by third-party vendors, to access your organization's data associated with a group. For example, a team owner in Microsoft Teams can allow an app to read all Teams messages in the team, or list the basic profile of a group's members.\n\nCISA SCuBA 2.7: Non-Admin Users SHALL Be Prevented From Providing Consent To Third-Party Applications.\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/settings\n.values | where-object name -eq 'EnableGroupSpecificConsent' | select-object -expand value -eq 'False'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)\n\n",
        "SkippedReason": "Group owner consent settings have been removed and replaced with Team owner consent settings.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.CR02",
      "Title": "Consent Framework - Admin Consent Request - Reviewers will receive email notifications for requests.",
      "Name": "EIDSCA.CR02: Consent Framework - Admin Consent Request - Reviewers will receive email notifications for requests.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CR02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR02"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\"\n            .notifyReviewers -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId CR02 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Admin Consent Workflow is not enabled",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Admin Consent Workflow is not enabled",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtEidscaCR02, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaCR02.ps1: line 25\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 393\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.CR02: Consent Framework - Admin Consent Request - Reviewers will receive email notifications for requests. See https://maester.dev/docs/tests/EIDSCA.CR02",
        "TestResult": "\nSkipped. Admin Consent Workflow is not enabled\n",
        "TestDescription": "Specifies whether reviewers will receive notifications\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\n.notifyReviewers -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/adminConsentRequestPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [adminConsentRequestPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/adminconsentrequestpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\n\n",
        "SkippedReason": "Admin Consent Workflow is not enabled",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.CR03",
      "Title": "Consent Framework - Admin Consent Request - Reviewers will receive email notifications when admin consent requests are about to expire.",
      "Name": "EIDSCA.CR03: Consent Framework - Admin Consent Request - Reviewers will receive email notifications when admin consent requests are about to expire.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CR03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR03"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\"\n            .remindersEnabled -eq 'true'\n        #>\n        Test-MtEidscaControl -CheckId CR03 | Should -Be 'true'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Admin Consent Workflow is not enabled",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Admin Consent Workflow is not enabled",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtEidscaCR03, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaCR03.ps1: line 25\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 402\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.CR03: Consent Framework - Admin Consent Request - Reviewers will receive email notifications when admin consent requests are about to expire. See https://maester.dev/docs/tests/EIDSCA.CR03",
        "TestResult": "\nSkipped. Admin Consent Workflow is not enabled\n",
        "TestDescription": "Specifies whether reviewers will receive reminder emails\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\n.remindersEnabled -eq 'true'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/adminConsentRequestPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [adminConsentRequestPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/adminconsentrequestpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\n\n",
        "SkippedReason": "Admin Consent Workflow is not enabled",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "EIDSCA.CR04",
      "Title": "Consent Framework - Admin Consent Request - Consent request duration (days).",
      "Name": "EIDSCA.CR04: Consent Framework - Admin Consent Request - Consent request duration (days).",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CR04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR04"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        <#\n            Check if \"https://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\"\n            .requestDurationInDays -le '30'\n        #>\n        Test-MtEidscaControl -CheckId CR04 | Should -BeLessOrEqual '30'\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Admin Consent Workflow is not enabled",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Admin Consent Workflow is not enabled",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-MtEidscaCR04, /Users/merill/GitHub/maester/powershell/internal/eidsca/Test-MtEidscaCR04.ps1: line 25\nat Test-MtEidscaControl, /Users/merill/GitHub/maester/powershell/public/eidsca/Test-MtEidscaControl.ps1: line 28\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 411\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "EIDSCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "EIDSCA.CR04: Consent Framework - Admin Consent Request - Consent request duration (days). See https://maester.dev/docs/tests/EIDSCA.CR04",
        "TestResult": "\nSkipped. Admin Consent Workflow is not enabled\n",
        "TestDescription": "Specifies the duration the request is active before it automatically expires if no decision is applied\n\n\n\n#### Test script\n```\nhttps://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\n.requestDurationInDays -le '30'\n```\n\n#### Related links\n\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/adminConsentRequestPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\n- [adminConsentRequestPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/adminconsentrequestpolicy)\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\n\n",
        "SkippedReason": "Admin Consent Workflow is not enabled",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "MT.1021",
      "Title": "Security Defaults are enabled.",
      "Name": "MT.1021: Security Defaults are enabled.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1021",
      "Tag": [
        "CA",
        "Security",
        "All",
        "MT.1021"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        $EntraIDPlan = Get-MtLicenseInformation -Product EntraID\n        if ($EntraIDPlan -ne \"Free\") {\n            Add-MtTestResultDetail -SkippedBecause LicensedEntraIDPremium\n        } else {\n            $SecurityDefaults = Invoke-MtGraphRequest -RelativeUri \"policies/identitySecurityDefaultsEnforcementPolicy\" -ApiVersion beta | Select-Object -ExpandProperty isEnabled\n\n            if ($SecurityDefaults -eq $true) {\n                $testResultMarkdown = \"Well done. SecurityDefaults are On `n`n\"\n            } else {\n                $testResultMarkdown = \"SecurityDefaults are Off '$($SecurityDefaults)' `n`n\"\n            }\n            $testDetailsMarkdown = \"You should enable SecurityDefaults or configure Conditional Access.\"\n            Add-MtTestResultDetail -Description $testDetailsMarkdown -Result $testResultMarkdown\n\n            $SecurityDefaults | Should -Be $true -Because \"Security Defaults are not enabled\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because This test is for tenants that are not licensed for any Entra ID Premium license. See [Entra ID licensing](https://learn.microsoft.com/entra/fundamentals/licensing)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because This test is for tenants that are not licensed for any Entra ID Premium license. See [Entra ID licensing](https://learn.microsoft.com/entra/fundamentals/licensing)",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 90\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "MT.1021: Security Defaults are enabled. See https://maester.dev/docs/tests/MT.1021",
        "TestResult": "Skipped. This test is for tenants that are not licensed for any Entra ID Premium license. See [Entra ID licensing](https://learn.microsoft.com/entra/fundamentals/licensing)",
        "TestDescription": "",
        "SkippedReason": "This test is for tenants that are not licensed for any Entra ID Premium license. See [Entra ID licensing](https://learn.microsoft.com/entra/fundamentals/licensing)",
        "Severity": "",
        "TestSkipped": "LicensedEntraIDPremium",
        "Service": null
      }
    },
    {
      "Id": "MT.1033",
      "Title": "User should be blocked from using legacy authentication (<userPrincipalName>)",
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [
        "MT.1033"
      ],
      "Result": "NotRun",
      "ScriptBlock": "\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\n        ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1033",
      "Title": "User should be blocked from using legacy authentication (<userPrincipalName>)",
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [
        "MT.1033"
      ],
      "Result": "NotRun",
      "ScriptBlock": "\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\n        ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1033",
      "Title": "User should be blocked from using legacy authentication (<userPrincipalName>)",
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [
        "MT.1033"
      ],
      "Result": "NotRun",
      "ScriptBlock": "\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\n        ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1033",
      "Title": "User should be blocked from using legacy authentication (<userPrincipalName>)",
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [
        "MT.1033"
      ],
      "Result": "NotRun",
      "ScriptBlock": "\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\n        ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1034",
      "Title": "Emergency access users should not be blocked (<userPrincipalName>)",
      "Name": "MT.1034: Emergency access users should not be blocked (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [
        "MT.1034"
      ],
      "Result": "NotRun",
      "ScriptBlock": "\n            if ( ( Get-MtLicenseInformation EntraID ) -eq \"Free\" ) {\n                Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP1\n            } else {\n                Test-MtConditionalAccessWhatIf -UserId $id -IncludeApplications \"00000002-0000-0ff1-ce00-000000000000\" -ClientAppType exchangeActiveSync | Should -BeNullOrEmpty\n            }\n        ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1050",
      "Title": "Apps with high-risk permissions having a direct path to Global Admin",
      "Name": "MT.1050: Apps with high-risk permissions having a direct path to Global Admin",
      "HelpUrl": "",
      "Tag": [
        "Full",
        "Entra",
        "Graph",
        "App",
        "MT.1050"
      ],
      "Result": "NotRun",
      "ScriptBlock": "\n        $result = Test-MtHighRiskAppPermissions -AttackPath \"Direct\"\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"no graph application has permissions with a risk of having a direct path to Global Admin and full tenant takeover.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-MtHighRiskAppPermissions.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "MT.1051",
      "Title": "Apps with high-risk permissions having an indirect path to Global Admin",
      "Name": "MT.1051: Apps with high-risk permissions having an indirect path to Global Admin",
      "HelpUrl": "",
      "Tag": [
        "Full",
        "Entra",
        "Graph",
        "App",
        "MT.1051"
      ],
      "Result": "NotRun",
      "ScriptBlock": "\n        $result = Test-MtHighRiskAppPermissions -AttackPath \"Indirect\"\n        if ($null -ne $result) {\n            $result | Should -Be $true -Because \"no graph application has permissions with a risk of having an indirect path to Global Admin and full tenant takeover.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/Maester/Entra/Test-MtHighRiskAppPermissions.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Maester/Entra",
      "Duration": "00:00:00",
      "ResultDetail": null
    },
    {
      "Id": "ORCA.108",
      "Title": "DKIM signing is set up for all your custom domains.",
      "Name": "ORCA.108: DKIM signing is set up for all your custom domains.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.108",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        $result = Test-ORCA108\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"DKIM signing is set up for all your custom domains.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA108.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-ORCA108, /Users/merill/GitHub/maester/powershell/public/orca/Test-ORCA108.ps1: line 50\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA108.Tests.ps1: line 5\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.108: DKIM signing is set up for all your custom domains.",
        "TestResult": "Skipped. Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
        "TestDescription": "DKIM signing can help protect the authenticity of your messages in transit and can assist with deliverability of your email messages.\n\n#### Remediation action\nSet up DKIM signing to sign your emails.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - DKIM](https://security.microsoft.com/authentication?viewid=DKIM) \n* [Use DKIM to validate outbound email sent from your custom domain in Office 365](https://aka.ms/orca-dkim-docs-1)\n",
        "SkippedReason": "Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "ORCA.108.1",
      "Title": "DNS Records have been set up to support DKIM.",
      "Name": "ORCA.108.1: DNS Records have been set up to support DKIM.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.108.1",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        $result = Test-ORCA108_1\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"DNS Records have been set up to support DKIM.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA108_1.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-ORCA108_1, /Users/merill/GitHub/maester/powershell/public/orca/Test-ORCA108_1.ps1: line 50\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA108_1.Tests.ps1: line 5\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.108.1: DNS Records have been set up to support DKIM.",
        "TestResult": "Skipped. Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
        "TestDescription": "DKIM signing can help protect the authenticity of your messages in transit and can assist with deliverability of your email messages.\n\n#### Remediation action\nSet up the required selector DNS records in order to support DKIM.\n\n#### Related Links\n\n* [Use DKIM to validate outbound email sent from your custom domain in Office 365](https://aka.ms/orca-dkim-docs-1)\n",
        "SkippedReason": "Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "ORCA.143",
      "Title": "Safety Tips are enabled.",
      "Name": "ORCA.143: Safety Tips are enabled.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.143",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        $result = Test-ORCA143\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"Safety Tips are enabled.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA143.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because The statement \"SkipInReport\" was specified by ORCA.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because The statement \"SkipInReport\" was specified by ORCA.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-ORCA143, /Users/merill/GitHub/maester/powershell/public/orca/Test-ORCA143.ps1: line 45\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA143.Tests.ps1: line 5\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.143: Safety Tips are enabled.",
        "TestResult": "Skipped. The statement \"SkipInReport\" was specified by ORCA.",
        "TestDescription": "By default, safety tips can provide useful security information when reading an email.\n\n#### Remediation action\nSafety Tips should be enabled.\n\n#### Related Links\n\n* [Microsoft 365 Defender Portal - Anti-spam settings](https://security.microsoft.com/antispam) \n* [Recommended settings for EOP and Microsoft Defender for Office 365](https://aka.ms/orca-antispam-docs-8)\n",
        "SkippedReason": "The statement \"SkipInReport\" was specified by ORCA.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    },
    {
      "Id": "ORCA.235",
      "Title": "SPF records is set up for all your custom domains.",
      "Name": "ORCA.235: SPF records is set up for all your custom domains.",
      "HelpUrl": "",
      "Tag": [
        "ORCA",
        "ORCA.235",
        "EXO",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\n        $result = Test-ORCA235\n\n        if($null -ne $result) {\n            $result | Should -Be $true -Because \"SPF records is set up for all your custom domains.\"\n        }\n    ",
      "ScriptBlockFile": "/Users/merill/GitHub/maester/tests/orca/Test-ORCA235.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
            "File": "/Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1",
            "Line": "173",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15713,
            "OffsetInLine": 5,
            "HistoryId": 6,
            "ScriptName": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "Statement": "throw [Pester.Factory]::CreateErrorRecord(\r\n        'PesterTestSkipped', #string errorId\r\n        $Message, #string message\r\n        $File, #string file\r\n        $Line, #string line\r\n        $LineText, #string lineText\r\n        $false #bool terminating\r\n    )",
            "PositionMessage": "At /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1:15713 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0",
            "PSCommandPath": "/Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 15713\nat Add-MtTestResultDetail, /Users/merill/GitHub/maester/powershell/public/Add-MtTestResultDetail.ps1: line 173\nat Test-ORCA235, /Users/merill/GitHub/maester/powershell/public/orca/Test-ORCA235.ps1: line 50\nat <ScriptBlock>, /Users/merill/GitHub/maester/tests/orca/Test-ORCA235.Tests.ps1: line 5\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2145\nat Invoke-TestItem, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1198\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 834\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 892\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2012\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1973\nat Invoke-ScriptBlock, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2148\nat Invoke-Block, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 939\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1676\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.ps1: line 3\nat <ScriptBlock>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3203\nat Invoke-InNewScriptScope, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 3210\nat Run-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 1679\nat Invoke-Test, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 2500\nat Invoke-Pester<End>, /Users/merill/.local/share/powershell/Modules/Pester/5.5.0/Pester.psm1: line 5046\nat Invoke-Maester, /Users/merill/GitHub/maester/powershell/public/Invoke-Maester.ps1: line 355\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "ORCA",
      "Duration": "00:00:00",
      "ResultDetail": {
        "TestTitle": "ORCA.235: SPF records is set up for all your custom domains.",
        "TestResult": "Skipped. Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
        "TestDescription": "SPF helps validate outbound email sent from your custom domain. Microsoft 365 uses the Sender Policy Framework (SPF) TXT record in DNS to ensure that destination email systems trust messages sent from your custom domain.\n\n#### Remediation action\nSet up SPF records to prevent spoofing.\n\n#### Related Links\n\n* [Use SPF to validate outbound email sent from your custom domain in Office 365](https://aka.ms/orca-spf-docs-1)\n",
        "SkippedReason": "Resolve-DnsName is not found on ORCA computer and is required for DNS checks.",
        "Severity": "",
        "TestSkipped": "Custom",
        "Service": null
      }
    }
  ],
  "Blocks": [
    {
      "Name": "EIDSCA",
      "Result": "Failed",
      "FailedCount": 14,
      "PassedCount": 24,
      "SkippedCount": 6,
      "NotRunCount": 0,
      "TotalCount": 44,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP01"
      ]
    },
    {
      "Name": "CISA",
      "Result": "Failed",
      "FailedCount": 49,
      "PassedCount": 18,
      "SkippedCount": 6,
      "NotRunCount": 0,
      "TotalCount": 73,
      "Tag": [
        "MS.EXO",
        "MS.EXO.12.1",
        "CISA.MS.EXO.12.1",
        "CISA",
        "Security",
        "All"
      ]
    },
    {
      "Name": "Contoso.ConditionalAccess",
      "Result": "Failed",
      "FailedCount": 1,
      "PassedCount": 0,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 1,
      "Tag": []
    },
    {
      "Name": "CIS",
      "Result": "Failed",
      "FailedCount": 18,
      "PassedCount": 7,
      "SkippedCount": 1,
      "NotRunCount": 0,
      "TotalCount": 26,
      "Tag": [
        "CIS.M365.1.2.1",
        "L2",
        "CIS E3 Level 2",
        "CIS E3",
        "CIS",
        "Security",
        "All",
        "CIS M365 v4.0.0"
      ]
    },
    {
      "Name": "Maester/Exchange",
      "Result": "Failed",
      "FailedCount": 5,
      "PassedCount": 0,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 5,
      "Tag": [
        "Maester",
        "Exchange",
        "SecureScore"
      ]
    },
    {
      "Name": "Maester/Teams",
      "Result": "Failed",
      "FailedCount": 3,
      "PassedCount": 3,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 6,
      "Tag": [
        "Maester",
        "Teams",
        "MeetingPolicy",
        "All"
      ]
    },
    {
      "Name": "Maester/Intune",
      "Result": "Failed",
      "FailedCount": 2,
      "PassedCount": 0,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 2,
      "Tag": [
        "Maester",
        "Intune",
        "All"
      ]
    },
    {
      "Name": "Maester/Entra",
      "Result": "Passed",
      "FailedCount": 28,
      "PassedCount": 24,
      "SkippedCount": 1,
      "NotRunCount": 0,
      "TotalCount": 53,
      "Tag": [
        "Maester",
        "App",
        "Security",
        "All"
      ]
    },
    {
      "Name": "ORCA",
      "Result": "Failed",
      "FailedCount": 19,
      "PassedCount": 44,
      "SkippedCount": 4,
      "NotRunCount": 0,
      "TotalCount": 67,
      "Tag": [
        "ORCA",
        "ORCA.100",
        "EXO",
        "Security",
        "All"
      ]
    }
  ]
}
